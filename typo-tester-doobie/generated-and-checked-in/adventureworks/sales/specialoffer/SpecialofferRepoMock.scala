/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks.sales.specialoffer;

import doobie.free.connection.ConnectionIO;
import doobie.free.connection.delay;
import fs2.Stream;
import scala.annotation.nowarn;
import typo.dsl.DeleteBuilder;
import typo.dsl.DeleteBuilder.DeleteBuilderMock;
import typo.dsl.DeleteParams;
import typo.dsl.SelectBuilder;
import typo.dsl.SelectBuilderMock;
import typo.dsl.SelectParams;
import typo.dsl.UpdateBuilder;
import typo.dsl.UpdateBuilder.UpdateBuilderMock;
import typo.dsl.UpdateParams;

class SpecialofferRepoMock(val toRow: Function1[SpecialofferRowUnsaved, SpecialofferRow], val map: scala.collection.mutable.Map[SpecialofferId, SpecialofferRow] = scala.collection.mutable.Map.empty) extends SpecialofferRepo {
  def delete: DeleteBuilder[SpecialofferFields, SpecialofferRow] = DeleteBuilderMock(DeleteParams.empty, SpecialofferFields.structure, map)
  def deleteById(specialofferid: SpecialofferId): ConnectionIO[Boolean] = delay(map.remove(specialofferid).isDefined)
  def deleteByIds(specialofferids: Array[SpecialofferId]): ConnectionIO[Int] = delay(specialofferids.map(id => map.remove(id)).count(_.isDefined))
  def insert(unsaved: SpecialofferRow): ConnectionIO[SpecialofferRow] = {
    delay {
      val _ = if (map.contains(unsaved.specialofferid))
        sys.error(s"id ${unsaved.specialofferid} already exists")
      else
        map.put(unsaved.specialofferid, unsaved)
    
      unsaved
    }
  }
  def insert(unsaved: SpecialofferRowUnsaved): ConnectionIO[SpecialofferRow] = insert(toRow(unsaved))
  def insertStreaming(unsaved: Stream[ConnectionIO, SpecialofferRow], batchSize: Int = 10000): ConnectionIO[Long] = {
    unsaved.compile.toList.map { rows =>
      var num = 0L
      rows.foreach { row =>
        map += (row.specialofferid -> row)
        num += 1
      }
      num
    }
  }
  /** NOTE: this functionality requires PostgreSQL 16 or later! */
  def insertUnsavedStreaming(unsaved: Stream[ConnectionIO, SpecialofferRowUnsaved], batchSize: Int = 10000): ConnectionIO[Long] = {
    unsaved.compile.toList.map { unsavedRows =>
      var num = 0L
      unsavedRows.foreach { unsavedRow =>
        val row = toRow(unsavedRow)
        map += (row.specialofferid -> row)
        num += 1
      }
      num
    }
  }
  def select: SelectBuilder[SpecialofferFields, SpecialofferRow] = SelectBuilderMock(SpecialofferFields.structure, delay(map.values.toList), SelectParams.empty)
  def selectAll: Stream[ConnectionIO, SpecialofferRow] = Stream.emits(map.values.toList)
  def selectById(specialofferid: SpecialofferId): ConnectionIO[Option[SpecialofferRow]] = delay(map.get(specialofferid))
  def selectByIds(specialofferids: Array[SpecialofferId]): Stream[ConnectionIO, SpecialofferRow] = Stream.emits(specialofferids.flatMap(map.get).toList)
  def selectByIdsTracked(specialofferids: Array[SpecialofferId]): ConnectionIO[Map[SpecialofferId, SpecialofferRow]] = {
    selectByIds(specialofferids).compile.toList.map { rows =>
      val byId = rows.view.map(x => (x.specialofferid, x)).toMap
      specialofferids.view.flatMap(id => byId.get(id).map(x => (id, x))).toMap
    }
  }
  def update: UpdateBuilder[SpecialofferFields, SpecialofferRow] = UpdateBuilderMock(UpdateParams.empty, SpecialofferFields.structure, map)
  def update(row: SpecialofferRow): ConnectionIO[Boolean] = {
    delay {
      map.get(row.specialofferid) match {
        case Some(`row`) => false
        case Some(_) =>
          map.put(row.specialofferid, row): @nowarn
          true
        case None => false
      }
    }
  }
  def upsert(unsaved: SpecialofferRow): ConnectionIO[SpecialofferRow] = {
    delay {
      map.put(unsaved.specialofferid, unsaved): @nowarn
      unsaved
    }
  }
  def upsertBatch(unsaved: List[SpecialofferRow]): Stream[ConnectionIO, SpecialofferRow] = {
    Stream.emits {
      unsaved.map { row =>
        map += (row.specialofferid -> row)
        row
      }
    }
  }
  /** NOTE: this functionality is not safe if you use auto-commit mode! it runs 3 SQL statements */
  def upsertStreaming(unsaved: Stream[ConnectionIO, SpecialofferRow], batchSize: Int = 10000): ConnectionIO[Int] = {
    unsaved.compile.toList.map { rows =>
      var num = 0
      rows.foreach { row =>
        map += (row.specialofferid -> row)
        num += 1
      }
      num
    }
  }
}