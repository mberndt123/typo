/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks.sales.countryregioncurrency;

import adventureworks.customtypes.TypoLocalDateTime;
import adventureworks.person.countryregion.CountryregionFields;
import adventureworks.person.countryregion.CountryregionId;
import adventureworks.person.countryregion.CountryregionRow;
import adventureworks.sales.currency.CurrencyFields;
import adventureworks.sales.currency.CurrencyId;
import adventureworks.sales.currency.CurrencyRow;
import typo.dsl.ForeignKey;
import typo.dsl.Path;
import typo.dsl.SqlExpr;
import typo.dsl.SqlExpr.CompositeIn;
import typo.dsl.SqlExpr.CompositeIn.TuplePart;
import typo.dsl.SqlExpr.Const.As.as;
import typo.dsl.SqlExpr.Field;
import typo.dsl.SqlExpr.FieldLike;
import typo.dsl.SqlExpr.IdField;
import typo.dsl.Structure.Relation;

trait CountryregioncurrencyFields {
  def countryregioncode: IdField[CountryregionId, CountryregioncurrencyRow]
  def currencycode: IdField[CurrencyId, CountryregioncurrencyRow]
  def modifieddate: Field[TypoLocalDateTime, CountryregioncurrencyRow]
  def fkPersonCountryregion: ForeignKey[CountryregionFields, CountryregionRow] =
    ForeignKey[CountryregionFields, CountryregionRow]("sales.FK_CountryRegionCurrency_CountryRegion_CountryRegionCode", Nil)
      .withColumnPair(countryregioncode, _.countryregioncode)
  def fkCurrency: ForeignKey[CurrencyFields, CurrencyRow] =
    ForeignKey[CurrencyFields, CurrencyRow]("sales.FK_CountryRegionCurrency_Currency_CurrencyCode", Nil)
      .withColumnPair(currencycode, _.currencycode)
  def compositeIdIs(compositeId: CountryregioncurrencyId): SqlExpr[Boolean] =
    countryregioncode.isEqual(compositeId.countryregioncode).and(currencycode.isEqual(compositeId.currencycode))
  def compositeIdIn(compositeIds: Array[CountryregioncurrencyId]): SqlExpr[Boolean] =
    new CompositeIn(compositeIds)(TuplePart[CountryregioncurrencyId](countryregioncode)(_.countryregioncode)(using as[Array[CountryregionId]](CountryregionId.arrayPut), implicitly), TuplePart[CountryregioncurrencyId](currencycode)(_.currencycode)(using as[Array[CurrencyId]](CurrencyId.arrayPut), implicitly))
  
}

object CountryregioncurrencyFields {
  lazy val structure: Relation[CountryregioncurrencyFields, CountryregioncurrencyRow] =
    new Impl(Nil)

  private final class Impl(val _path: List[Path])
    extends Relation[CountryregioncurrencyFields, CountryregioncurrencyRow] {
  
    override lazy val fields: CountryregioncurrencyFields = new CountryregioncurrencyFields {
      override def countryregioncode = IdField[CountryregionId, CountryregioncurrencyRow](_path, "countryregioncode", None, None, x => x.countryregioncode, (row, value) => row.copy(countryregioncode = value))
      override def currencycode = IdField[CurrencyId, CountryregioncurrencyRow](_path, "currencycode", None, Some("bpchar"), x => x.currencycode, (row, value) => row.copy(currencycode = value))
      override def modifieddate = Field[TypoLocalDateTime, CountryregioncurrencyRow](_path, "modifieddate", Some("text"), Some("timestamp"), x => x.modifieddate, (row, value) => row.copy(modifieddate = value))
    }
  
    override lazy val columns: List[FieldLike[?, CountryregioncurrencyRow]] =
      List[FieldLike[?, CountryregioncurrencyRow]](fields.countryregioncode, fields.currencycode, fields.modifieddate)
  
    override def copy(path: List[Path]): Impl =
      new Impl(path)
  }
  
}
