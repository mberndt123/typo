/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks.sales.salesreason;

import adventureworks.customtypes.Defaulted;
import adventureworks.customtypes.TypoLocalDateTime;
import adventureworks.public.Name;
import cats.instances.list.catsStdInstancesForList;
import doobie.free.connection.ConnectionIO;
import doobie.postgres.syntax.FragmentOps;
import doobie.syntax.SqlInterpolator.SingleFragment.fromWrite;
import doobie.syntax.string.toSqlInterpolator;
import doobie.util.Write;
import doobie.util.fragment.Fragment;
import doobie.util.update.Update;
import fs2.Stream;
import typo.dsl.DeleteBuilder;
import typo.dsl.SelectBuilder;
import typo.dsl.SelectBuilderSql;
import typo.dsl.UpdateBuilder;

class SalesreasonRepoImpl extends SalesreasonRepo {
  def delete: DeleteBuilder[SalesreasonFields, SalesreasonRow] = DeleteBuilder("sales.salesreason", SalesreasonFields.structure)
  def deleteById(salesreasonid: SalesreasonId): ConnectionIO[Boolean] = sql"""delete from sales.salesreason where "salesreasonid" = ${fromWrite(salesreasonid)(Write.fromPut(SalesreasonId.put))}""".update.run.map(_ > 0)
  def deleteByIds(salesreasonids: Array[SalesreasonId]): ConnectionIO[Int] = sql"""delete from sales.salesreason where "salesreasonid" = ANY(${fromWrite(salesreasonids)(Write.fromPut(SalesreasonId.arrayPut))})""".update.run
  def insert(unsaved: SalesreasonRow): ConnectionIO[SalesreasonRow] = {
    sql"""insert into sales.salesreason("salesreasonid", "name", "reasontype", "modifieddate")
          values (${fromWrite(unsaved.salesreasonid)(Write.fromPut(SalesreasonId.put))}::int4, ${fromWrite(unsaved.name)(Write.fromPut(Name.put))}::varchar, ${fromWrite(unsaved.reasontype)(Write.fromPut(Name.put))}::varchar, ${fromWrite(unsaved.modifieddate)(Write.fromPut(TypoLocalDateTime.put))}::timestamp)
          returning "salesreasonid", "name", "reasontype", "modifieddate"::text
       """.query(using SalesreasonRow.read).unique
  }
  def insert(unsaved: SalesreasonRowUnsaved): ConnectionIO[SalesreasonRow] = {
    val fs = List(
      Some((Fragment.const0(s""""name""""), fr"${fromWrite(unsaved.name)(Write.fromPut(Name.put))}::varchar")),
                      Some((Fragment.const0(s""""reasontype""""), fr"${fromWrite(unsaved.reasontype)(Write.fromPut(Name.put))}::varchar")),
    unsaved.salesreasonid match {
      case Defaulted.UseDefault() => None
      case Defaulted.Provided(value) => Some((Fragment.const0(s""""salesreasonid""""), fr"${fromWrite(value: SalesreasonId)(Write.fromPut(SalesreasonId.put))}::int4"))
    },
    unsaved.modifieddate match {
      case Defaulted.UseDefault() => None
      case Defaulted.Provided(value) => Some((Fragment.const0(s""""modifieddate""""), fr"${fromWrite(value: TypoLocalDateTime)(Write.fromPut(TypoLocalDateTime.put))}::timestamp"))
    }
    ).flatten
    
    val q = if (fs.isEmpty) {
      sql"""insert into sales.salesreason default values
                            returning "salesreasonid", "name", "reasontype", "modifieddate"::text
                         """
    } else {
      val CommaSeparate = Fragment.FragmentMonoid.intercalate(fr", ")
      sql"""insert into sales.salesreason(${CommaSeparate.combineAllOption(fs.map { case (n, _) => n }).get})
                            values (${CommaSeparate.combineAllOption(fs.map { case (_, f) => f }).get})
                            returning "salesreasonid", "name", "reasontype", "modifieddate"::text
                         """
    }
    q.query(using SalesreasonRow.read).unique
  
  }
  def insertStreaming(unsaved: Stream[ConnectionIO, SalesreasonRow], batchSize: Int = 10000): ConnectionIO[Long] = new FragmentOps(sql"""COPY sales.salesreason("salesreasonid", "name", "reasontype", "modifieddate") FROM STDIN""").copyIn(unsaved, batchSize)(using SalesreasonRow.text)
  /** NOTE: this functionality requires PostgreSQL 16 or later! */
  def insertUnsavedStreaming(unsaved: Stream[ConnectionIO, SalesreasonRowUnsaved], batchSize: Int = 10000): ConnectionIO[Long] = new FragmentOps(sql"""COPY sales.salesreason("name", "reasontype", "salesreasonid", "modifieddate") FROM STDIN (DEFAULT '__DEFAULT_VALUE__')""").copyIn(unsaved, batchSize)(using SalesreasonRowUnsaved.text)
  def select: SelectBuilder[SalesreasonFields, SalesreasonRow] = SelectBuilderSql("sales.salesreason", SalesreasonFields.structure, SalesreasonRow.read)
  def selectAll: Stream[ConnectionIO, SalesreasonRow] = sql"""select "salesreasonid", "name", "reasontype", "modifieddate"::text from sales.salesreason""".query(using SalesreasonRow.read).stream
  def selectById(salesreasonid: SalesreasonId): ConnectionIO[Option[SalesreasonRow]] = sql"""select "salesreasonid", "name", "reasontype", "modifieddate"::text from sales.salesreason where "salesreasonid" = ${fromWrite(salesreasonid)(Write.fromPut(SalesreasonId.put))}""".query(using SalesreasonRow.read).option
  def selectByIds(salesreasonids: Array[SalesreasonId]): Stream[ConnectionIO, SalesreasonRow] = sql"""select "salesreasonid", "name", "reasontype", "modifieddate"::text from sales.salesreason where "salesreasonid" = ANY(${fromWrite(salesreasonids)(Write.fromPut(SalesreasonId.arrayPut))})""".query(using SalesreasonRow.read).stream
  def selectByIdsTracked(salesreasonids: Array[SalesreasonId]): ConnectionIO[Map[SalesreasonId, SalesreasonRow]] = {
    selectByIds(salesreasonids).compile.toList.map { rows =>
      val byId = rows.view.map(x => (x.salesreasonid, x)).toMap
      salesreasonids.view.flatMap(id => byId.get(id).map(x => (id, x))).toMap
    }
  }
  def update: UpdateBuilder[SalesreasonFields, SalesreasonRow] = UpdateBuilder("sales.salesreason", SalesreasonFields.structure, SalesreasonRow.read)
  def update(row: SalesreasonRow): ConnectionIO[Boolean] = {
    val salesreasonid = row.salesreasonid
    sql"""update sales.salesreason
                          set "name" = ${fromWrite(row.name)(Write.fromPut(Name.put))}::varchar,
                              "reasontype" = ${fromWrite(row.reasontype)(Write.fromPut(Name.put))}::varchar,
                              "modifieddate" = ${fromWrite(row.modifieddate)(Write.fromPut(TypoLocalDateTime.put))}::timestamp
                          where "salesreasonid" = ${fromWrite(salesreasonid)(Write.fromPut(SalesreasonId.put))}"""
      .update
      .run
      .map(_ > 0)
  }
  def upsert(unsaved: SalesreasonRow): ConnectionIO[SalesreasonRow] = {
    sql"""insert into sales.salesreason("salesreasonid", "name", "reasontype", "modifieddate")
          values (
            ${fromWrite(unsaved.salesreasonid)(Write.fromPut(SalesreasonId.put))}::int4,
            ${fromWrite(unsaved.name)(Write.fromPut(Name.put))}::varchar,
            ${fromWrite(unsaved.reasontype)(Write.fromPut(Name.put))}::varchar,
            ${fromWrite(unsaved.modifieddate)(Write.fromPut(TypoLocalDateTime.put))}::timestamp
          )
          on conflict ("salesreasonid")
          do update set
            "name" = EXCLUDED."name",
            "reasontype" = EXCLUDED."reasontype",
            "modifieddate" = EXCLUDED."modifieddate"
          returning "salesreasonid", "name", "reasontype", "modifieddate"::text
       """.query(using SalesreasonRow.read).unique
  }
  def upsertBatch(unsaved: List[SalesreasonRow]): Stream[ConnectionIO, SalesreasonRow] = {
    Update[SalesreasonRow](
      s"""insert into sales.salesreason("salesreasonid", "name", "reasontype", "modifieddate")
          values (?::int4,?::varchar,?::varchar,?::timestamp)
          on conflict ("salesreasonid")
          do update set
            "name" = EXCLUDED."name",
            "reasontype" = EXCLUDED."reasontype",
            "modifieddate" = EXCLUDED."modifieddate"
          returning "salesreasonid", "name", "reasontype", "modifieddate"::text"""
    )(using SalesreasonRow.write)
    .updateManyWithGeneratedKeys[SalesreasonRow]("salesreasonid", "name", "reasontype", "modifieddate")(unsaved)(using catsStdInstancesForList, SalesreasonRow.read)
  }
  /** NOTE: this functionality is not safe if you use auto-commit mode! it runs 3 SQL statements */
  def upsertStreaming(unsaved: Stream[ConnectionIO, SalesreasonRow], batchSize: Int = 10000): ConnectionIO[Int] = {
    for {
      _ <- sql"create temporary table salesreason_TEMP (like sales.salesreason) on commit drop".update.run
      _ <- new FragmentOps(sql"""copy salesreason_TEMP("salesreasonid", "name", "reasontype", "modifieddate") from stdin""").copyIn(unsaved, batchSize)(using SalesreasonRow.text)
      res <- sql"""insert into sales.salesreason("salesreasonid", "name", "reasontype", "modifieddate")
                   select * from salesreason_TEMP
                   on conflict ("salesreasonid")
                   do update set
                     "name" = EXCLUDED."name",
                     "reasontype" = EXCLUDED."reasontype",
                     "modifieddate" = EXCLUDED."modifieddate"
                   ;
                   drop table salesreason_TEMP;""".update.run
    } yield res
  }
}