/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks.production.productlistpricehistory

import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.production.product.ProductFields
import adventureworks.production.product.ProductId
import adventureworks.production.product.ProductRow
import typo.dsl.ForeignKey
import typo.dsl.Path
import typo.dsl.SqlExpr
import typo.dsl.SqlExpr.CompositeIn
import typo.dsl.SqlExpr.CompositeIn.TuplePart
import typo.dsl.SqlExpr.Const.As.as
import typo.dsl.SqlExpr.Field
import typo.dsl.SqlExpr.FieldLike
import typo.dsl.SqlExpr.IdField
import typo.dsl.SqlExpr.OptField
import typo.dsl.Structure.Relation

trait ProductlistpricehistoryFields {
  def productid: IdField[ProductId, ProductlistpricehistoryRow]
  def startdate: IdField[TypoLocalDateTime, ProductlistpricehistoryRow]
  def enddate: OptField[TypoLocalDateTime, ProductlistpricehistoryRow]
  def listprice: Field[BigDecimal, ProductlistpricehistoryRow]
  def modifieddate: Field[TypoLocalDateTime, ProductlistpricehistoryRow]
  def fkProduct: ForeignKey[ProductFields, ProductRow] =
    ForeignKey[ProductFields, ProductRow]("production.FK_ProductListPriceHistory_Product_ProductID", Nil)
      .withColumnPair(productid, _.productid)
  def compositeIdIs(compositeId: ProductlistpricehistoryId): SqlExpr[Boolean] =
    productid.isEqual(compositeId.productid).and(startdate.isEqual(compositeId.startdate))
  def compositeIdIn(compositeIds: Array[ProductlistpricehistoryId]): SqlExpr[Boolean] =
    new CompositeIn(compositeIds)(TuplePart[ProductlistpricehistoryId](productid)(_.productid)(using as[Array[ProductId]](ProductId.arrayPut), implicitly), TuplePart[ProductlistpricehistoryId](startdate)(_.startdate)(using as[Array[TypoLocalDateTime]](TypoLocalDateTime.arrayPut), implicitly))
  
}

object ProductlistpricehistoryFields {
  lazy val structure: Relation[ProductlistpricehistoryFields, ProductlistpricehistoryRow] =
    new Impl(Nil)

  private final class Impl(val _path: List[Path])
    extends Relation[ProductlistpricehistoryFields, ProductlistpricehistoryRow] {
  
    override lazy val fields: ProductlistpricehistoryFields = new ProductlistpricehistoryFields {
      override def productid = IdField[ProductId, ProductlistpricehistoryRow](_path, "productid", None, Some("int4"), x => x.productid, (row, value) => row.copy(productid = value))
      override def startdate = IdField[TypoLocalDateTime, ProductlistpricehistoryRow](_path, "startdate", Some("text"), Some("timestamp"), x => x.startdate, (row, value) => row.copy(startdate = value))
      override def enddate = OptField[TypoLocalDateTime, ProductlistpricehistoryRow](_path, "enddate", Some("text"), Some("timestamp"), x => x.enddate, (row, value) => row.copy(enddate = value))
      override def listprice = Field[BigDecimal, ProductlistpricehistoryRow](_path, "listprice", None, Some("numeric"), x => x.listprice, (row, value) => row.copy(listprice = value))
      override def modifieddate = Field[TypoLocalDateTime, ProductlistpricehistoryRow](_path, "modifieddate", Some("text"), Some("timestamp"), x => x.modifieddate, (row, value) => row.copy(modifieddate = value))
    }
  
    override lazy val columns: List[FieldLike[?, ProductlistpricehistoryRow]] =
      List[FieldLike[?, ProductlistpricehistoryRow]](fields.productid, fields.startdate, fields.enddate, fields.listprice, fields.modifieddate)
  
    override def copy(path: List[Path]): Impl =
      new Impl(path)
  }
  
}
