/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb.hardcoded.myschema;

import anorm.Column;
import anorm.ParameterMetaData;
import anorm.SqlMappingError;
import anorm.ToStatement;
import java.sql.Types;
import play.api.libs.json.JsError;
import play.api.libs.json.JsSuccess;
import play.api.libs.json.JsValue;
import play.api.libs.json.Reads;
import play.api.libs.json.Writes;
import testdb.hardcoded.Text;

/** Enum `myschema.sector`
  *  - PUBLIC
  *  - PRIVATE
  *  - OTHER
  */

sealed abstract class Sector(val value: java.lang.String)

object Sector {
  implicit lazy val arrayColumn: Column[Array[Sector]] = Column.columnToArray(column, implicitly)
  implicit lazy val column: Column[Sector] = Column.columnToString.mapResult(str => Sector(str).left.map(SqlMappingError.apply))
  implicit lazy val toStatement: ToStatement[Sector] = ToStatement.stringToStatement.contramap(_.value)
  implicit lazy val arrayToStatement: ToStatement[Array[Sector]] = ToStatement[Array[Sector]]((ps, i, arr) => ps.setArray(i, ps.getConnection.createArrayOf("myschema.sector", arr.map[AnyRef](_.value))))
  implicit lazy val parameterMetadata: ParameterMetaData[Sector] = {
    new ParameterMetaData[Sector] {
      override def sqlType: String = "myschema.sector"
      override def jdbcType: Int = Types.OTHER
    }
  }
  implicit lazy val text: Text[Sector] = {
    new Text[Sector] {
      override def unsafeEncode(v: Sector, sb: StringBuilder) = Text.stringInstance.unsafeEncode(v.value, sb)
      override def unsafeArrayEncode(v: Sector, sb: StringBuilder) = Text.stringInstance.unsafeArrayEncode(v.value, sb)
    }
  }
  implicit lazy val reads: Reads[Sector] = Reads[Sector]{(value: JsValue) => value.validate(Reads.StringReads).flatMap(str => Sector(str).fold(JsError.apply, JsSuccess(_)))}
  implicit lazy val writes: Writes[Sector] = Writes[Sector](value => Writes.StringWrites.writes(value.value))
  def apply(str: java.lang.String): scala.Either[java.lang.String, Sector] =
    ByName.get(str).toRight(s"'$str' does not match any of the following legal values: $Names")
  def force(str: java.lang.String): Sector =
    apply(str) match {
      case scala.Left(msg) => sys.error(msg)
      case scala.Right(value) => value
    }
  case object `_public` extends Sector("PUBLIC")
  case object `_private` extends Sector("PRIVATE")
  case object `_other` extends Sector("OTHER")
  val All: scala.List[Sector] = scala.List(`_public`, `_private`, `_other`)
  val Names: java.lang.String = All.map(_.value).mkString(", ")
  val ByName: scala.collection.immutable.Map[java.lang.String, Sector] = All.map(x => (x.value, x)).toMap
  }
            
