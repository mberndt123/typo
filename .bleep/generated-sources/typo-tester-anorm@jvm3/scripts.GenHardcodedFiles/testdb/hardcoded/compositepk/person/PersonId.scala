/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb.hardcoded.compositepk.person

import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.OWrites
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import scala.collection.immutable.ListMap
import scala.util.Try

/** Type for the composite primary key of table `compositepk.person` */
case class PersonId(
  one: Long,
  two: Option[String]
)
object PersonId {
  implicit lazy val reads: Reads[PersonId] = Reads[PersonId](json => JsResult.fromTry(
      Try(
        PersonId(
          one = json.\("one").as(Reads.LongReads),
          two = json.\("two").toOption.map(_.as(Reads.StringReads))
        )
      )
    ),
  )
  implicit lazy val writes: OWrites[PersonId] = OWrites[PersonId](o =>
    new JsObject(ListMap[String, JsValue](
      "one" -> Writes.LongWrites.writes(o.one),
      "two" -> Writes.OptionWrites(Writes.StringWrites).writes(o.two)
    ))
  )
}
