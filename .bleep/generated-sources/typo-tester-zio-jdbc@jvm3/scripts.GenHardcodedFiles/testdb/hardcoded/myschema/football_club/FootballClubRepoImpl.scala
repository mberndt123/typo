/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb.hardcoded.myschema.football_club;

import testdb.hardcoded.streamingInsert;
import typo.dsl.DeleteBuilder;
import typo.dsl.SelectBuilder;
import typo.dsl.SelectBuilderSql;
import typo.dsl.UpdateBuilder;
import zio.NonEmptyChunk;
import zio.ZIO;
import zio.jdbc.SqlFragment;
import zio.jdbc.SqlFragment.Segment;
import zio.jdbc.SqlFragment.Setter;
import zio.jdbc.UpdateResult;
import zio.jdbc.ZConnection;
import zio.jdbc.sqlInterpolator;
import zio.stream.ZStream;

class FootballClubRepoImpl extends FootballClubRepo {
  def delete: DeleteBuilder[FootballClubFields, FootballClubRow] = DeleteBuilder("myschema.football_club", FootballClubFields.structure)
  def deleteById(id: FootballClubId): ZIO[ZConnection, Throwable, Boolean] = sql"""delete from myschema.football_club where "id" = ${Segment.paramSegment(id)(FootballClubId.setter)}""".delete.map(_ > 0)
  def deleteByIds(ids: Array[FootballClubId]): ZIO[ZConnection, Throwable, Long] = sql"""delete from myschema.football_club where "id" = ANY(${Segment.paramSegment(ids)(FootballClubId.arraySetter)})""".delete
  def insert(unsaved: FootballClubRow): ZIO[ZConnection, Throwable, FootballClubRow] = {
    sql"""insert into myschema.football_club("id", "name")
          values (${Segment.paramSegment(unsaved.id)(FootballClubId.setter)}::int8, ${Segment.paramSegment(unsaved.name)(Setter.stringSetter)})
          returning "id", "name"
       """.insertReturning(using FootballClubRow.jdbcDecoder).map(_.updatedKeys.head)
  }
  def insertStreaming(unsaved: ZStream[ZConnection, Throwable, FootballClubRow], batchSize: Int = 10000): ZIO[ZConnection, Throwable, Long] = streamingInsert(s"""COPY myschema.football_club("id", "name") FROM STDIN""", batchSize, unsaved)(FootballClubRow.text)
  def select: SelectBuilder[FootballClubFields, FootballClubRow] = SelectBuilderSql("myschema.football_club", FootballClubFields.structure, FootballClubRow.jdbcDecoder)
  def selectAll: ZStream[ZConnection, Throwable, FootballClubRow] = sql"""select "id", "name" from myschema.football_club""".query(using FootballClubRow.jdbcDecoder).selectStream()
  def selectByFieldValues(fieldValues: List[FootballClubFieldValue[?]]): ZStream[ZConnection, Throwable, FootballClubRow] = {
    fieldValues match {
      case Nil      => selectAll
      case nonEmpty =>
        val wheres = SqlFragment.empty.and(
          nonEmpty.map {
            case FootballClubFieldValue.id(value) => sql""""id" = ${Segment.paramSegment(value)(FootballClubId.setter)}"""
            case FootballClubFieldValue.name(value) => sql""""name" = ${Segment.paramSegment(value)(Setter.stringSetter)}"""
          }
        )
        sql"""select "id", "name" from myschema.football_club where $wheres""".query(using FootballClubRow.jdbcDecoder).selectStream()
    }
  }
  def selectById(id: FootballClubId): ZIO[ZConnection, Throwable, Option[FootballClubRow]] = sql"""select "id", "name" from myschema.football_club where "id" = ${Segment.paramSegment(id)(FootballClubId.setter)}""".query(using FootballClubRow.jdbcDecoder).selectOne
  def selectByIds(ids: Array[FootballClubId]): ZStream[ZConnection, Throwable, FootballClubRow] = sql"""select "id", "name" from myschema.football_club where "id" = ANY(${Segment.paramSegment(ids)(FootballClubId.arraySetter)})""".query(using FootballClubRow.jdbcDecoder).selectStream()
  def selectByIdsTracked(ids: Array[FootballClubId]): ZIO[ZConnection, Throwable, Map[FootballClubId, FootballClubRow]] = {
    selectByIds(ids).runCollect.map { rows =>
      val byId = rows.view.map(x => (x.id, x)).toMap
      ids.view.flatMap(id => byId.get(id).map(x => (id, x))).toMap
    }
  }
  def update: UpdateBuilder[FootballClubFields, FootballClubRow] = UpdateBuilder("myschema.football_club", FootballClubFields.structure, FootballClubRow.jdbcDecoder)
  def update(row: FootballClubRow): ZIO[ZConnection, Throwable, Boolean] = {
    val id = row.id
    sql"""update myschema.football_club
          set "name" = ${Segment.paramSegment(row.name)(Setter.stringSetter)}
          where "id" = ${Segment.paramSegment(id)(FootballClubId.setter)}""".update.map(_ > 0)
  }
  def updateFieldValues(id: FootballClubId, fieldValues: List[FootballClubFieldValue[?]]): ZIO[ZConnection, Throwable, Boolean] = {
    NonEmptyChunk.fromIterableOption(fieldValues) match {
      case None           => ZIO.succeed(false)
      case Some(nonEmpty) =>
        val updates = nonEmpty.map { case FootballClubFieldValue.id(value) => sql""""id" = ${Segment.paramSegment(value)(FootballClubId.setter)}::int8"""
                                     case FootballClubFieldValue.name(value) => sql""""name" = ${Segment.paramSegment(value)(Setter.stringSetter)}""" }.mkFragment(SqlFragment(", "))
        sql"""update myschema.football_club
              set $updates
              where "id" = ${Segment.paramSegment(id)(FootballClubId.setter)}
           """.update.map(_ > 0)
    }
  }
  def upsert(unsaved: FootballClubRow): ZIO[ZConnection, Throwable, UpdateResult[FootballClubRow]] = {
    sql"""insert into myschema.football_club("id", "name")
          values (
            ${Segment.paramSegment(unsaved.id)(FootballClubId.setter)}::int8,
            ${Segment.paramSegment(unsaved.name)(Setter.stringSetter)}
          )
          on conflict ("id")
          do update set
            "name" = EXCLUDED."name"
          returning "id", "name"""".insertReturning(using FootballClubRow.jdbcDecoder)
  }
  /** NOTE: this functionality is not safe if you use auto-commit mode! it runs 3 SQL statements */
  def upsertStreaming(unsaved: ZStream[ZConnection, Throwable, FootballClubRow], batchSize: Int = 10000): ZIO[ZConnection, Throwable, Long] = {
    val created = sql"create temporary table football_club_TEMP (like myschema.football_club) on commit drop".execute
    val copied = streamingInsert(s"""copy football_club_TEMP("id", "name") from stdin""", batchSize, unsaved)(FootballClubRow.text)
    val merged = sql"""insert into myschema.football_club("id", "name")
                       select * from football_club_TEMP
                       on conflict ("id")
                       do update set
                         "name" = EXCLUDED."name"
                       ;
                       drop table football_club_TEMP;""".update
    created *> copied *> merged
  }
}