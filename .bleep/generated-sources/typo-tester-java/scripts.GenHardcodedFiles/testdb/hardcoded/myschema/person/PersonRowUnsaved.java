/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb.hardcoded.myschema.person;

import java.util.Optional;
import testdb.hardcoded.customtypes.Defaulted;
import testdb.hardcoded.myschema.Number;
import testdb.hardcoded.myschema.Sector;
import testdb.hardcoded.myschema.football_club.FootballClubId;
import testdb.hardcoded.myschema.marital_status.MaritalStatusId;

/** This class corresponds to a row in table `myschema.person` which has not been persisted yet */
public record PersonRowUnsaved(
  /** Points to {@link testdb.hardcoded.myschema.football_club.FootballClubRow.id} */
  FootballClubId favouriteFootballClubId,
  /* max 100 chars */ String name,
  Optional</* max 30 chars */ String> nickName,
  Optional</* max 100 chars */ String> blogUrl,
  /* max 254 chars */ String email,
  /* max 8 chars */ String phone,
  Boolean likesPizza,
  Optional</* max 254 chars */ String> workEmail,
  /** Default: auto-increment */
  Defaulted<PersonId> id,
  /** Default: some-value
    * Points to {@link testdb.hardcoded.myschema.marital_status.MaritalStatusRow.id}
    */
  Defaulted<MaritalStatusId> maritalStatusId,
  /** Default: PUBLIC */
  Defaulted<Sector> sector,
  /** Default: one */
  Defaulted<Number> favoriteNumber
) {
  public PersonRow toRow(
                          java.util.function.Supplier<PersonId> idDefault,
                          java.util.function.Supplier<MaritalStatusId> maritalStatusIdDefault,
                          java.util.function.Supplier<Sector> sectorDefault,
                          java.util.function.Supplier<Number> favoriteNumberDefault
                        ) {
    return new PersonRow(id.getOrElse(idDefault), favouriteFootballClubId, name, nickName, blogUrl, email, phone, likesPizza, maritalStatusId.getOrElse(maritalStatusIdDefault), workEmail, sector.getOrElse(sectorDefault), favoriteNumber.getOrElse(favoriteNumberDefault));
  };
}