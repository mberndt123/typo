/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb.hardcoded.myschema;

import cats.data.NonEmptyList;
import doobie.enumerated.JdbcType;
import doobie.postgres.Text;
import doobie.util.Get;
import doobie.util.Put;
import doobie.util.Read;
import doobie.util.Write;
import doobie.util.meta.Meta;
import io.circe.Decoder;
import io.circe.Encoder;

/** Enum `myschema.number`
  *  - one
  *  - two
  *  - three
  */

sealed abstract class Number(val value: java.lang.String)

object Number {
  implicit lazy val put: Put[Number] = Put.Advanced.one[Number](JdbcType.Other, NonEmptyList.one("myschema.number"), (ps, i, a) => ps.setString(i, a.value), (rs, i, a) => rs.updateString(i, a.value))
  implicit lazy val arrayPut: Put[Array[Number]] = Put.Advanced.array[AnyRef](NonEmptyList.one("myschema.number[]"), "myschema.number").contramap(_.map(_.value))
  implicit lazy val get: Get[Number] = Meta.StringMeta.get.temap(Number.apply)
  implicit lazy val arrayGet: Get[Array[Number]] = testdb.hardcoded.StringArrayMeta.get.map(_.map(force))
  implicit lazy val write: Write[Number] = Write.fromPut(put)
  implicit lazy val read: Read[Number] = Read.fromGet(get)
  implicit lazy val text: Text[Number] = {
    new Text[Number] {
      override def unsafeEncode(v: Number, sb: StringBuilder) = Text.stringInstance.unsafeEncode(v.value, sb)
      override def unsafeArrayEncode(v: Number, sb: StringBuilder) = Text.stringInstance.unsafeArrayEncode(v.value, sb)
    }
  }
  implicit lazy val decoder: Decoder[Number] = Decoder.decodeString.emap(Number.apply)
  implicit lazy val encoder: Encoder[Number] = Encoder.encodeString.contramap(_.value)
  def apply(str: java.lang.String): scala.Either[java.lang.String, Number] =
    ByName.get(str).toRight(s"'$str' does not match any of the following legal values: $Names")
  def force(str: java.lang.String): Number =
    apply(str) match {
      case scala.Left(msg) => sys.error(msg)
      case scala.Right(value) => value
    }
  case object `_one` extends Number("one")
  case object `_two` extends Number("two")
  case object `_three` extends Number("three")
  val All: scala.List[Number] = scala.List(`_one`, `_two`, `_three`)
  val Names: java.lang.String = All.map(_.value).mkString(", ")
  val ByName: scala.collection.immutable.Map[java.lang.String, Number] = All.map(x => (x.value, x)).toMap
  }
            
