/**
 * File automatically generated by `typo` for its own test suite.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN
 */
package testdb.hardcoded.myschema.football_club;

import doobie.free.connection.ConnectionIO;
import doobie.free.connection.delay;
import fs2.Stream;
import scala.annotation.nowarn;
import typo.dsl.DeleteBuilder;
import typo.dsl.DeleteBuilder.DeleteBuilderMock;
import typo.dsl.DeleteParams;
import typo.dsl.SelectBuilder;
import typo.dsl.SelectBuilderMock;
import typo.dsl.SelectParams;
import typo.dsl.UpdateBuilder;
import typo.dsl.UpdateBuilder.UpdateBuilderMock;
import typo.dsl.UpdateParams;

class FootballClubRepoMock(val map: scala.collection.mutable.Map[FootballClubId, FootballClubRow] = scala.collection.mutable.Map.empty) extends FootballClubRepo {
  def delete: DeleteBuilder[FootballClubFields, FootballClubRow] = DeleteBuilderMock(DeleteParams.empty, FootballClubFields.structure, map)
  def deleteById(id: FootballClubId): ConnectionIO[Boolean] = delay(map.remove(id).isDefined)
  def deleteByIds(ids: Array[FootballClubId]): ConnectionIO[Int] = delay(ids.map(id => map.remove(id)).count(_.isDefined))
  def insert(unsaved: FootballClubRow): ConnectionIO[FootballClubRow] = {
    delay {
      val _ = if (map.contains(unsaved.id))
        sys.error(s"id ${unsaved.id} already exists")
      else
        map.put(unsaved.id, unsaved)
    
      unsaved
    }
  }
  def insertStreaming(unsaved: Stream[ConnectionIO, FootballClubRow], batchSize: Int = 10000): ConnectionIO[Long] = {
    unsaved.compile.toList.map { rows =>
      var num = 0L
      rows.foreach { row =>
        map += (row.id -> row)
        num += 1
      }
      num
    }
  }
  def select: SelectBuilder[FootballClubFields, FootballClubRow] = SelectBuilderMock(FootballClubFields.structure, delay(map.values.toList), SelectParams.empty)
  def selectAll: Stream[ConnectionIO, FootballClubRow] = Stream.emits(map.values.toList)
  def selectByFieldValues(fieldValues: List[FootballClubFieldValue[?]]): Stream[ConnectionIO, FootballClubRow] = {
    Stream.emits {
      fieldValues.foldLeft(map.values) {
        case (acc, FootballClubFieldValue.id(value)) => acc.filter(_.id == value)
        case (acc, FootballClubFieldValue.name(value)) => acc.filter(_.name == value)
      }.toList
    }
  }
  def selectById(id: FootballClubId): ConnectionIO[Option[FootballClubRow]] = delay(map.get(id))
  def selectByIds(ids: Array[FootballClubId]): Stream[ConnectionIO, FootballClubRow] = Stream.emits(ids.flatMap(map.get).toList)
  def selectByIdsTracked(ids: Array[FootballClubId]): ConnectionIO[Map[FootballClubId, FootballClubRow]] = {
    selectByIds(ids).compile.toList.map { rows =>
      val byId = rows.view.map(x => (x.id, x)).toMap
      ids.view.flatMap(id => byId.get(id).map(x => (id, x))).toMap
    }
  }
  def update: UpdateBuilder[FootballClubFields, FootballClubRow] = UpdateBuilderMock(UpdateParams.empty, FootballClubFields.structure, map)
  def update(row: FootballClubRow): ConnectionIO[Boolean] = {
    delay {
      map.get(row.id) match {
        case Some(`row`) => false
        case Some(_) =>
          map.put(row.id, row): @nowarn
          true
        case None => false
      }
    }
  }
  def updateFieldValues(id: FootballClubId, fieldValues: List[FootballClubFieldValue[?]]): ConnectionIO[Boolean] = {
    delay {
      map.get(id) match {
        case Some(oldRow) =>
          val updatedRow = fieldValues.foldLeft(oldRow) {
            case (acc, FootballClubFieldValue.id(value)) => acc.copy(id = value)
            case (acc, FootballClubFieldValue.name(value)) => acc.copy(name = value)
          }
          if (updatedRow != oldRow) {
            map.put(id, updatedRow): @nowarn
            true
          } else {
            false
          }
        case None => false
      }
    }
  }
  def upsert(unsaved: FootballClubRow): ConnectionIO[FootballClubRow] = {
    delay {
      map.put(unsaved.id, unsaved): @nowarn
      unsaved
    }
  }
  def upsertBatch(unsaved: List[FootballClubRow]): Stream[ConnectionIO, FootballClubRow] = {
    Stream.emits {
      unsaved.map { row =>
        map += (row.id -> row)
        row
      }
    }
  }
  /** NOTE: this functionality is not safe if you use auto-commit mode! it runs 3 SQL statements */
  def upsertStreaming(unsaved: Stream[ConnectionIO, FootballClubRow], batchSize: Int = 10000): ConnectionIO[Int] = {
    unsaved.compile.toList.map { rows =>
      var num = 0
      rows.foreach { row =>
        map += (row.id -> row)
        num += 1
      }
      num
    }
  }
}