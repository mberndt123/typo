"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[5368],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},l=Object.keys(e);for(o=0;o<l.length;o++)r=l[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)r=l[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var i=o.createContext({}),p=function(e){var t=o.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},c=function(e){var t=p(e.components);return o.createElement(i.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},y=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,l=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(r),y=n,f=u["".concat(i,".").concat(y)]||u[y]||m[y]||l;return r?o.createElement(f,a(a({ref:t},c),{},{components:r})):o.createElement(f,a({ref:t},c))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=r.length,a=new Array(l);a[0]=y;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[u]="string"==typeof e?e:n,a[1]=s;for(var p=2;p<l;p++)a[p]=r[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,r)}y.displayName="MDXCreateElement"},2791:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>a,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var o=r(7462),n=(r(7294),r(3905));const l={title:"User-selected types"},a=void 0,s={unversionedId:"type-safety/user-selected-types",id:"type-safety/user-selected-types",title:"User-selected types",description:"If you're integrating the generated code into an existing codebase it may be beneficial to reuse existing types, in particular ID types.",source:"@site/docs/type-safety/user-selected-types.md",sourceDirName:"type-safety",slug:"/type-safety/user-selected-types",permalink:"/typo/docs/type-safety/user-selected-types",draft:!1,tags:[],version:"current",frontMatter:{title:"User-selected types"},sidebar:"tutorialSidebar",previous:{title:"Type flow",permalink:"/typo/docs/type-safety/type-flow"},next:{title:"Ready for Scala.js/native",permalink:"/typo/docs/other-features/scala-js-ready"}},i={},p=[{value:"Note",id:"note",level:2},{value:"Choose column types from relations",id:"choose-column-types-from-relations",level:3},{value:"Choose column types from sql files",id:"choose-column-types-from-sql-files",level:3},{value:"Choose column types for sql file parameters",id:"choose-column-types-for-sql-file-parameters",level:3},{value:"Explicit version",id:"explicit-version",level:3},{value:"Composing multiple column overrides:",id:"composing-multiple-column-overrides",level:3}],c={toc:p},u="wrapper";function m(e){let{components:t,...r}=e;return(0,n.kt)(u,(0,o.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"If you're integrating the generated code into an existing codebase it may be beneficial to reuse existing types, in particular ID types."),(0,n.kt)("p",null,"You can ",(0,n.kt)("a",{parentName:"p",href:"/typo/docs/customization"},"customize")," ",(0,n.kt)("inlineCode",{parentName:"p"},"typo")," to override types."),(0,n.kt)("h2",{id:"note"},"Note"),(0,n.kt)("p",null,"You need to implement a bunch of typeclass instances for the types you use.\nThe compiler will guide you, but it's basically everything which is needed to use the type with your database and json library."),(0,n.kt)("p",null,"You can likely copy/paste from the generated id types and adapt them. "),(0,n.kt)("h3",{id:"choose-column-types-from-relations"},"Choose column types from relations"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import typo.{Options, TypeOverride}\n\nval rewriteColumnTypes = TypeOverride.relation {\n  case ("schema.table", "column") => "org.foo.ColumnId"\n}\n\nOptions(\n  pkg = "org.foo",\n  dbLib = None,\n  typeOverride = rewriteColumnTypes\n)\n')),(0,n.kt)("h3",{id:"choose-column-types-from-sql-files"},"Choose column types from sql files"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import typo.RelPath\n\nval rewriteColumnTypesFromSqlFile = TypeOverride.sqlFile {\n  case (RelPath(List("sql", "fancy_sql.sql")), "my_column") => "org.foo.MyColumn"\n  case (_, "column_name_from_any_sql_file") => "org.foo.MyOtherColumn"\n}\n')),(0,n.kt)("h3",{id:"choose-column-types-for-sql-file-parameters"},"Choose column types for sql file parameters"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import typo.RelPath\n\nval rewriteParamsFromSqlFile = TypeOverride.sqlFileParam {\n  case (_, "my_column") => "org.foo.MyColumn"\n}\n')),(0,n.kt)("h3",{id:"explicit-version"},"Explicit version"),(0,n.kt)("p",null,'The versions above are "simplified", this is the version which gives you all info in one go.'),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import typo.Source\n\nTypeOverride.of { \n  case (Source.Table(relName), colName) if relName.schema.contains("foo") && colName.value.startsWith("foo") => "org.foo.Bar" \n}\n')),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"typo.Source")," is an ADT which describes where the column comes from."),(0,n.kt)("h3",{id:"composing-multiple-column-overrides"},"Composing multiple column overrides:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},"rewriteColumnTypes.orElse(rewriteColumnTypesFromSqlFile)\n")))}m.isMDXComponent=!0}}]);