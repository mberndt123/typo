"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[62],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(n),m=o,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||r;return n?a.createElement(f,s(s({ref:t},p),{},{components:n})):a.createElement(f,s({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,s=new Array(r);s[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:o,s[1]=i;for(var l=2;l<r;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},508:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var a=n(7462),o=(n(7294),n(3905));const r={title:"Testing with stubs"},s=void 0,i={unversionedId:"other-features/testing-with-stubs",id:"other-features/testing-with-stubs",title:"Testing with stubs",description:"It can be incredibly tiring to write tests for the database layer.",source:"@site/docs/other-features/testing-with-stubs.md",sourceDirName:"other-features",slug:"/other-features/testing-with-stubs",permalink:"/typo/docs/other-features/testing-with-stubs",draft:!1,tags:[],version:"current",frontMatter:{title:"Testing with stubs"},sidebar:"tutorialSidebar",previous:{title:"Ready for Scala.js/native",permalink:"/typo/docs/other-features/scala-js-ready"},next:{title:"Testing with random values",permalink:"/typo/docs/other-features/testing-with-random-values"}},c={},l=[{value:"DSL",id:"dsl",level:2},{value:"*Note",id:"note",level:3},{value:"An example of a generated <code>RepoMock</code>:",id:"an-example-of-a-generated-repomock",level:2}],p={toc:l},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"It can be incredibly tiring to write tests for the database layer."),(0,o.kt)("p",null,"Often you want to split you code in pure/effectful code and just test the pure parts,\nbut sometimes you want to observe mutations in the database as well."),(0,o.kt)("p",null,"Sometimes spinning up a real database for this is the right answer, sometimes it's not.\nIt is always slow, however, so it's way easier to get a fast test suite if you're not doing it."),(0,o.kt)("p",null,"The argument for the approach taken by typo is that since the interaction between Scala\nand Postgres is guaranteed to be correct*, it is less important to back your tests with a real database."),(0,o.kt)("p",null,"This leads us to stubs (called mocks in the generated code), implementations of the repository\ninterfaces backed by a mutable ",(0,o.kt)("inlineCode",{parentName:"p"},"Map"),". This can be generated for all tables with a primary key."),(0,o.kt)("h2",{id:"dsl"},"DSL"),(0,o.kt)("p",null,"Notable, these mocks work with the ",(0,o.kt)("a",{parentName:"p",href:"/typo/docs/what-is/dsl"},"dsl"),", which lets you describe semi-complex joins, updates, where predicates,\nstring operations and so on in your code, and test it in-memory!"),(0,o.kt)("h3",{id:"note"},"*Note"),(0,o.kt)("p",null,"typo guarantees schema correctness, but you can still break constraints.\nOr your tests need more advanced postgres functionality."),(0,o.kt)("p",null,"Stubs are obviously not a full replacement, but if they can be used for some non-zero percentage\nof your tests it's still very beneficial!"),(0,o.kt)("h2",{id:"an-example-of-a-generated-repomock"},"An example of a generated ",(0,o.kt)("inlineCode",{parentName:"h2"},"RepoMock"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import java.sql.Connection\nimport typo.generated.pg_catalog.pg_namespace.*\n\nclass PgNamespaceRepoMock(map: scala.collection.mutable.Map[PgNamespaceId, PgNamespaceRow] = scala.collection.mutable.Map.empty) extends PgNamespaceRepo {\n  override def delete(oid: PgNamespaceId)(implicit c: Connection): Boolean = {\n    map.remove(oid).isDefined\n  }\n\n  override def insert(unsaved: PgNamespaceRow)(implicit c: Connection): PgNamespaceRow = {\n    if (map.contains(unsaved.oid))\n      sys.error(s"id ${unsaved.oid} already exists")\n    else\n      map.put(unsaved.oid, unsaved)\n    unsaved\n  }\n\n  override def selectAll(implicit c: Connection): List[PgNamespaceRow] = {\n    map.values.toList\n  }\n\n  override def selectById(oid: PgNamespaceId)(implicit c: Connection): Option[PgNamespaceRow] = {\n    map.get(oid)\n  }\n\n  override def selectByIds(oids: Array[PgNamespaceId])(implicit c: Connection): List[PgNamespaceRow] = {\n    oids.flatMap(map.get).toList\n  }\n\n  override def selectByUnique(nspname: String)(implicit c: Connection): Option[PgNamespaceRow] = {\n    map.values.find(v => nspname == v.nspname)\n  }\n\n  override def update(row: PgNamespaceRow)(implicit c: Connection): Boolean = {\n    map.get(row.oid) match {\n      case Some(`row`) => false\n      case Some(_) =>\n        map.put(row.oid, row)\n        true\n      case None => false\n    }\n  }\n\n  override def upsert(unsaved: PgNamespaceRow)(implicit c: Connection): PgNamespaceRow = {\n    map.put(unsaved.oid, unsaved)\n    unsaved\n  }\n}\n')))}d.isMDXComponent=!0}}]);