"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[3608],{112:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var s=n(4848),i=n(8453);const a={title:"Patterns: Dynamic queries"},r=void 0,o={id:"patterns/dynamic-queries",title:"Patterns: Dynamic queries",description:"If you use sql files, there is a very high chance you'll want some queries to",source:"@site/docs/patterns/dynamic-queries.md",sourceDirName:"patterns",slug:"/patterns/dynamic-queries",permalink:"/typo/docs/patterns/dynamic-queries",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Patterns: Dynamic queries"},sidebar:"tutorialSidebar",previous:{title:"Patterns: The multi-repo",permalink:"/typo/docs/patterns/multi-repo"},next:{title:"Customizing Typo",permalink:"/typo/docs/customization/overview"}},c={},l=[{value:"What can be dynamic?",id:"what-can-be-dynamic",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["If you use ",(0,s.jsx)(t.a,{href:"/typo/docs/what-is/sql-is-king",children:"sql files"}),", there is a very high chance you'll want some queries to\na bit dynamic. The way forward here is to move the dynamism into the sql itself."]}),"\n",(0,s.jsx)(t.p,{children:"A frequently used pattern is a query with an optional filter that selects all rows by default. This can be achieved using a IS NULL construct.\nHere is an example of a query with optional age and name filters:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sql",children:'SELECT p.title, p.firstname, p.middlename, p.lastname\nFROM person.person p\nWHERE :"first_name?" = p.firstname OR :first_name IS NULL \n'})}),"\n",(0,s.jsx)(t.p,{children:"Will generate this repo:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:"import adventureworks.person_dynamic.PersonDynamicSqlRow\nimport java.sql.Connection\n\ntrait PersonDynamicSqlRepo {\n  def apply(firstName: Option[String])(implicit c: Connection): List[PersonDynamicSqlRow]\n}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Note that the sql query needs an explicit cast to figure out the type of the ",(0,s.jsx)(t.code,{children:"first_name"})," parameter since it's compared with ",(0,s.jsx)(t.code,{children:"NULL"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"what-can-be-dynamic",children:"What can be dynamic?"}),"\n",(0,s.jsx)(t.p,{children:"You can only use this mechanism for this which are templated into SQL as parameters.\nIt's not possible to use it decide keywords, column names and so on, unfortunately."})]})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var s=n(6540);const i={},a=s.createContext(i);function r(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);