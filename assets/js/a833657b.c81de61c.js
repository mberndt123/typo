"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[563],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>d});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),i=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=i(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=i(r),f=o,d=u["".concat(c,".").concat(f)]||u[f]||y[f]||a;return r?n.createElement(d,s(s({ref:t},p),{},{components:r})):n.createElement(d,s({ref:t},p))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,s=new Array(a);s[0]=f;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:o,s[1]=l;for(var i=2;i<a;i++)s[i]=r[i];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},2394:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>y,frontMatter:()=>a,metadata:()=>l,toc:()=>i});var n=r(7462),o=(r(7294),r(3905));const a={},s=void 0,l={unversionedId:"scala-js-ready",id:"scala-js-ready",title:"scala-js-ready",description:"If you want to move Row instances across the wire to a Scala.js app, you should be able to do so.",source:"@site/docs/scala-js-ready.md",sourceDirName:".",slug:"/scala-js-ready",permalink:"/typo/docs/scala-js-ready",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"type-flow",permalink:"/typo/docs/type-flow"},next:{title:"testing-with-stubs",permalink:"/typo/docs/testing-with-stubs"}},c={},i=[],p={toc:i},u="wrapper";function y(e){let{components:t,...r}=e;return(0,o.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"If you want to move ",(0,o.kt)("inlineCode",{parentName:"p"},"Row")," instances across the wire to a Scala.js app, you should be able to do so."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Note that this hasn't been tested yet, so report back with results.")),(0,o.kt)("p",null,"It's a rather manual process for now, where you can run typo twice:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"once to generate JVM code, where you specify both a database and json library, and output files to a JVM-only source folder"),(0,o.kt)("li",{parentName:"ul"},"once to generate JS code, where you only specify a json library. You can write files to a JS-only source folder")),(0,o.kt)("p",null,"An enabler for this functionality is the ",(0,o.kt)("a",{parentName:"p",href:"/typo/docs/typo-types"},"Typo wrapper types"),"\nIf you use any date/time column types, it's likely you'll need to add ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cquiroz/scala-java-time"},"scala-java-time")," to your JS project."))}y.isMDXComponent=!0}}]);