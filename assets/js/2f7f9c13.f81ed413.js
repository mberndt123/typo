"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[6820],{3203:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>d,contentTitle:()=>r,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var t=n(4848),i=n(8453);const s={title:"JSON codecs"},r=void 0,a={id:"other-features/json",title:"JSON codecs",description:"Since Typo has the entire schema in memory anyway, it can also generate JSON codecs for you.",source:"@site/docs/other-features/json.md",sourceDirName:"other-features",slug:"/other-features/json",permalink:"/typo/docs/other-features/json",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"JSON codecs"},sidebar:"tutorialSidebar",previous:{title:"Generate code into multiple projects",permalink:"/typo/docs/other-features/generate-into-multiple-projects"},next:{title:"Focus on fast(er) compiles",permalink:"/typo/docs/other-features/faster-compilation"}},d={},c=[];function l(e){const o={code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o.p,{children:"Since Typo has the entire schema in memory anyway, it can also generate JSON codecs for you."}),"\n",(0,t.jsx)(o.p,{children:"If you want to transfer the row objects anywhere else than to and from\nPostgreSQL or write some generic code across tables, it's very convenient to be able to use"}),"\n",(0,t.jsxs)(o.p,{children:["You add the wanted JSON libraries to ",(0,t.jsx)(o.code,{children:"typo.Options"})," when running typo to get the codecs."]}),"\n",(0,t.jsxs)(o.p,{children:["Currently, you can choose between ",(0,t.jsx)(o.code,{children:"play-json"}),", ",(0,t.jsx)(o.code,{children:"circe"})," and ",(0,t.jsx)(o.code,{children:"zio-json"}),".\nIt's likely quite easy to add another one if you want to contribute!"]}),"\n",(0,t.jsx)(o.p,{children:"For instance:"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-scala",children:'import typo.*\n\nval options = Options(\n  pkg = "org.foo",\n  jsonLibs = List(JsonLibName.PlayJson), // or `Nil` if you don\'t want json\n  dbLib = Some(DbLibName.Anorm)\n)\n'})}),"\n",(0,t.jsx)(o.p,{children:"And you will get instances like this:"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-scala",children:'import adventureworks.customtypes.TypoLocalDateTime\nimport adventureworks.customtypes.TypoXml\nimport adventureworks.production.productmodel.ProductmodelId\nimport adventureworks.public.Name\nimport java.util.UUID\nimport play.api.libs.json.JsObject\nimport play.api.libs.json.JsResult\nimport play.api.libs.json.JsValue\nimport play.api.libs.json.OWrites\nimport play.api.libs.json.Reads\nimport play.api.libs.json.Writes\nimport scala.collection.immutable.ListMap\nimport scala.util.Try\n\ncase class ProductmodelRow(\n    /** Primary key for ProductModel records. */\n    productmodelid: ProductmodelId,\n    /** Product model description. */\n    name: Name,\n    /** Detailed product catalog information in xml format. */\n    catalogdescription: Option[TypoXml],\n    /** Manufacturing instructions in xml format. */\n    instructions: Option[TypoXml],\n    rowguid: UUID,\n    modifieddate: TypoLocalDateTime\n)\n\nobject ProductmodelRow {\n  implicit lazy val reads: Reads[ProductmodelRow] = Reads[ProductmodelRow](json => JsResult.fromTry(\n    Try(\n      ProductmodelRow(\n        productmodelid = json.\\("productmodelid").as(ProductmodelId.reads),\n        name = json.\\("name").as(Name.reads),\n        catalogdescription = json.\\("catalogdescription").toOption.map(_.as(TypoXml.reads)),\n        instructions = json.\\("instructions").toOption.map(_.as(TypoXml.reads)),\n        rowguid = json.\\("rowguid").as(Reads.uuidReads),\n        modifieddate = json.\\("modifieddate").as(TypoLocalDateTime.reads)\n      )\n    )\n  ),\n  )\n  implicit lazy val writes: OWrites[ProductmodelRow] = OWrites[ProductmodelRow](o =>\n    new JsObject(ListMap[String, JsValue](\n      "productmodelid" -> ProductmodelId.writes.writes(o.productmodelid),\n      "name" -> Name.writes.writes(o.name),\n      "catalogdescription" -> Writes.OptionWrites(TypoXml.writes).writes(o.catalogdescription),\n      "instructions" -> Writes.OptionWrites(TypoXml.writes).writes(o.instructions),\n      "rowguid" -> Writes.UuidWrites.writes(o.rowguid),\n      "modifieddate" -> TypoLocalDateTime.writes.writes(o.modifieddate)\n    ))\n  )\n}\n'})}),"\n",(0,t.jsx)(o.p,{children:"Then you can go to and from JSON without doing any extra work:"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-scala",children:'import play.api.libs.json._\n\nJson.prettyPrint(\n  Json.toJson(\n    ProductmodelRow(\n      productmodelid = ProductmodelId(1),\n      name = Name("name"),\n      catalogdescription = None,\n      instructions = Some(TypoXml("<xml/>")),\n      rowguid = UUID.fromString("0cf84c1c-0a05-449c-8e09-562663d101ed"),\n      modifieddate = TypoLocalDateTime(java.time.LocalDateTime.parse("2023-08-08T22:50:48.377623"))\n    )\n  )\n)\n// res0: String = """{\n//   "productmodelid" : 1,\n//   "name" : "name",\n//   "catalogdescription" : null,\n//   "instructions" : "<xml/>",\n//   "rowguid" : "0cf84c1c-0a05-449c-8e09-562663d101ed",\n//   "modifieddate" : "2023-08-08T22:50:48.377623"\n// }"""\n'})})]})}function p(e={}){const{wrapper:o}={...(0,i.R)(),...e.components};return o?(0,t.jsx)(o,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,o,n)=>{n.d(o,{R:()=>r,x:()=>a});var t=n(6540);const i={},s=t.createContext(i);function r(e){const o=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function a(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(s.Provider,{value:o},e.children)}}}]);