"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[699],{3905:(e,t,o)=>{o.d(t,{Zo:()=>p,kt:()=>h});var n=o(7294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function s(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function i(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var d=n.createContext({}),l=function(e){var t=n.useContext(d),o=t;return e&&(o="function"==typeof e?e(t):s(s({},t),e)),o},p=function(e){var t=l(e.components);return n.createElement(d.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,a=e.originalType,d=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=l(o),m=r,h=c["".concat(d,".").concat(m)]||c[m]||u[m]||a;return o?n.createElement(h,s(s({ref:t},p),{},{components:o})):n.createElement(h,s({ref:t},p))}));function h(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=o.length,s=new Array(a);s[0]=m;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i[c]="string"==typeof e?e:r,s[1]=i;for(var l=2;l<a;l++)s[l]=o[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,o)}m.displayName="MDXCreateElement"},3988:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var n=o(7462),r=(o(7294),o(3905));const a={title:"Hello, ZIO",description:"Typo ported to ZIO",slug:"hello-zio",authors:[{name:"\xd8yvind Raddum Berg",url:"https://github.com/oyvindberg",image_url:"https://github.com/oyvindberg.png"}],tags:["typo","zio"],image:"https://i.imgur.com/mErPwqL.png",hide_table_of_contents:!1},s=void 0,i={permalink:"/typo/blog/hello-zio",source:"@site/blog/2023-11-16-hello-zio.md",title:"Hello, ZIO",description:"Typo ported to ZIO",date:"2023-11-16T00:00:00.000Z",formattedDate:"November 16, 2023",tags:[{label:"typo",permalink:"/typo/blog/tags/typo"},{label:"zio",permalink:"/typo/blog/tags/zio"}],readingTime:1.8,hasTruncateMarker:!0,authors:[{name:"\xd8yvind Raddum Berg",url:"https://github.com/oyvindberg",image_url:"https://github.com/oyvindberg.png",imageURL:"https://github.com/oyvindberg.png"}],frontMatter:{title:"Hello, ZIO",description:"Typo ported to ZIO",slug:"hello-zio",authors:[{name:"\xd8yvind Raddum Berg",url:"https://github.com/oyvindberg",image_url:"https://github.com/oyvindberg.png",imageURL:"https://github.com/oyvindberg.png"}],tags:["typo","zio"],image:"https://i.imgur.com/mErPwqL.png",hide_table_of_contents:!1}},d={authorsImageUrls:[void 0]},l=[{value:"Never heard of Typo?",id:"never-heard-of-typo",level:3},{value:"Maturity",id:"maturity",level:3},{value:"Implemented missing features in <code>zio-jdbc</code>",id:"implemented-missing-features-in-zio-jdbc",level:3},{value:"Repository signatures",id:"repository-signatures",level:3},{value:"<code>zio-schema</code> is not used",id:"zio-schema-is-not-used",level:3},{value:"Also support for <code>zio-json</code>",id:"also-support-for-zio-json",level:3}],p={toc:l},c="wrapper";function u(e){let{components:t,...o}=e;return(0,r.kt)(c,(0,n.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Thanks to the efforts of Jules Ivanic in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/oyvindberg/typo/pull/57"},"PR #57"),",\nTypo now supports using ",(0,r.kt)("inlineCode",{parentName:"p"},"zio-jdbc")," as a database library."),(0,r.kt)("h3",{id:"never-heard-of-typo"},"Never heard of Typo?"),(0,r.kt)("p",null,"You can check out the ",(0,r.kt)("a",{parentName:"p",href:"https://oyvindberg.github.io/typo/docs/"},"introduction"),".\nEssentially it's a code generator for database access code, which makes PostgreSQL integration type-safe and wonderful to use."),(0,r.kt)("h3",{id:"maturity"},"Maturity"),(0,r.kt)("p",null,"Note that ",(0,r.kt)("inlineCode",{parentName:"p"},"zio-jdbc")," is a bit less mature than ",(0,r.kt)("inlineCode",{parentName:"p"},"doobie")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"anorm"),", so it's a bit more likely to be some rough edges.\nIn particular, it handles nullable values ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/zio/zio-jdbc/issues/188"},"imperfectly"),".\nWe fixed a bunch of issues while working on this PR, so it should be pretty close."),(0,r.kt)("h3",{id:"implemented-missing-features-in-zio-jdbc"},"Implemented missing features in ",(0,r.kt)("inlineCode",{parentName:"h3"},"zio-jdbc")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"zio-jdbc")," does not support postgres arrays, and it does not support\nthe ",(0,r.kt)("a",{parentName:"p",href:"/docs/other-features/streaming-inserts"},"COPY API for streaming inserts"),"."),(0,r.kt)("p",null,"Typo outputs code which implements both of these features."),(0,r.kt)("p",null,"This can likely be upstreamed as a postgres integration module in ",(0,r.kt)("inlineCode",{parentName:"p"},"zio-jdbc")," at some point."),(0,r.kt)("h3",{id:"repository-signatures"},"Repository signatures"),(0,r.kt)("p",null,"To give a taste of the code you'll get, consider this repository definition:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"trait AddressRepo {\n  def delete(addressid: AddressId): ZIO[ZConnection, Throwable, Boolean]\n  def delete: DeleteBuilder[AddressFields, AddressRow]\n  def insert(unsaved: AddressRow): ZIO[ZConnection, Throwable, AddressRow]\n  def insertStreaming(unsaved: ZStream[ZConnection, Throwable, AddressRow], batchSize: Int): ZIO[ZConnection, Throwable, Long]\n  def insert(unsaved: AddressRowUnsaved): ZIO[ZConnection, Throwable, AddressRow]\n  /* NOTE: this functionality requires PostgreSQL 16 or later! */\n  def insertUnsavedStreaming(unsaved: ZStream[ZConnection, Throwable, AddressRowUnsaved], batchSize: Int): ZIO[ZConnection, Throwable, Long]\n  def select: SelectBuilder[AddressFields, AddressRow]\n  def selectAll: ZStream[ZConnection, Throwable, AddressRow]\n  def selectById(addressid: AddressId): ZIO[ZConnection, Throwable, Option[AddressRow]]\n  def selectByIds(addressids: Array[AddressId]): ZStream[ZConnection, Throwable, AddressRow]\n  def update(row: AddressRow): ZIO[ZConnection, Throwable, Boolean]\n  def update: UpdateBuilder[AddressFields, AddressRow]\n  def upsert(unsaved: AddressRow): ZIO[ZConnection, Throwable, UpdateResult[AddressRow]]\n}\n")),(0,r.kt)("p",null,"Notice how the signatures use ",(0,r.kt)("inlineCode",{parentName:"p"},"ZIO"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ZStream"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ZConnection"),"."),(0,r.kt)("h3",{id:"zio-schema-is-not-used"},(0,r.kt)("inlineCode",{parentName:"h3"},"zio-schema")," is not used"),(0,r.kt)("p",null,"We opted to ",(0,r.kt)("em",{parentName:"p"},"not")," go through zio-schema for the generated code. It was not clear that it was possible to implement all\nPostgreSQL features through ",(0,r.kt)("inlineCode",{parentName:"p"},"zio-schema"),", and we wanted to generate code which is as ",(0,r.kt)("a",{parentName:"p",href:"/docs/other-features/faster-compilation"},"fast to compile")," as possible."),(0,r.kt)("h3",{id:"also-support-for-zio-json"},"Also support for ",(0,r.kt)("inlineCode",{parentName:"h3"},"zio-json")),(0,r.kt)("p",null,"Typo supports generating ",(0,r.kt)("a",{parentName:"p",href:"/docs/other-features/json"},"JSON codecs")," for all the row types..\nThe PR also adds support for ",(0,r.kt)("inlineCode",{parentName:"p"},"zio-json"),", so you can get codecs like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"object AddressRow {\n  implicit lazy val jsonDecoder: JsonDecoder[AddressRow] = ???\n  implicit lazy val jsonEncoder: JsonEncoder[AddressRow] = ???\n}\n")))}u.isMDXComponent=!0}}]);