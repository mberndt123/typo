"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[515],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>y});var s=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,s)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,s,r=function(e,n){if(null==e)return{};var t,s,r={},o=Object.keys(e);for(s=0;s<o.length;s++)t=o[s],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(s=0;s<o.length;s++)t=o[s],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var d=s.createContext({}),l=function(e){var n=s.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=l(e.components);return s.createElement(d.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return s.createElement(s.Fragment,{},n)}},m=s.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,d=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),c=l(t),m=r,y=c["".concat(d,".").concat(m)]||c[m]||u[m]||o;return t?s.createElement(y,i(i({ref:n},p),{},{components:t})):s.createElement(y,i({ref:n},p))}));function y(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=m;var a={};for(var d in n)hasOwnProperty.call(n,d)&&(a[d]=n[d]);a.originalType=e,a[c]="string"==typeof e?e:r,i[1]=a;for(var l=2;l<o;l++)i[l]=t[l];return s.createElement.apply(null,i)}return s.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6976:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var s=t(7462),r=(t(7294),t(3905));const o={title:"Generated code for relations"},i=void 0,a={unversionedId:"what-is/relations",id:"what-is/relations",title:"Generated code for relations",description:"Tables",source:"@site/docs/what-is/relations.md",sourceDirName:"what-is",slug:"/what-is/relations",permalink:"/typo/docs/what-is/relations",draft:!1,tags:[],version:"current",frontMatter:{title:"Generated code for relations"},sidebar:"tutorialSidebar",previous:{title:"SQL DSL",permalink:"/typo/docs/what-is/dsl"},next:{title:"setup",permalink:"/typo/docs/setup"}},d={},l=[{value:"Tables",id:"tables",level:2},{value:"Views",id:"views",level:2}],p={toc:l},c="wrapper";function u(e){let{components:n,...t}=e;return(0,r.kt)(c,(0,s.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"tables"},"Tables"),(0,r.kt)("p",null,"Given a table like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"create table address\n(\n    addressid       serial\n        constraint \"PK_Address_AddressID\" primary key,\n    addressline1    varchar(60)                          not null,\n    addressline2    varchar(60),\n    city            varchar(30)                          not null,\n    stateprovinceid integer                              not null \n        constraint \"FK_Address_StateProvince_StateProvinceID\" references stateprovince,\n    postalcode      varchar(15)                          not null,\n    spatiallocation bytea,\n    rowguid         uuid      default uuid_generate_v1() not null,\n    modifieddate    timestamp default now()              not null\n);\n\ncomment on table address is 'Street address information for customers, employees, and vendors.';\ncomment on column address.addressid is 'Primary key for Address records.';\ncomment on column address.addressline1 is 'First street address line.';\ncomment on column address.addressline2 is 'Second street address line.';\ncomment on column address.city is 'Name of the city.';\ncomment on column address.stateprovinceid is 'Unique identification number for the state or province. Foreign key to StateProvince table.';\ncomment on column address.postalcode is 'Postal code for the street address.';\ncomment on column address.spatiallocation is 'Latitude and longitude of this address.';\n")),(0,r.kt)("p",null,"You'll get a row class like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import adventureworks.customtypes.TypoLocalDateTime\nimport adventureworks.person.address.AddressId\nimport adventureworks.person.stateprovince.StateprovinceId\nimport java.util.UUID\n\ncase class AddressRow(\n  /** Primary key for Address records. */\n  addressid: AddressId,\n  /** First street address line. */\n  addressline1: /* max 60 chars */ String,\n  /** Second street address line. */\n  addressline2: Option[/* max 60 chars */ String],\n  /** Name of the city. */\n  city: /* max 30 chars */ String,\n  /** Unique identification number for the state or province. Foreign key to StateProvince table.\n      Points to [[stateprovince.StateprovinceRow.stateprovinceid]] */\n  stateprovinceid: StateprovinceId,\n  /** Postal code for the street address. */\n  postalcode: /* max 15 chars */ String,\n  /** Latitude and longitude of this address. */\n  spatiallocation: Option[Array[Byte]],\n  rowguid: UUID,\n  modifieddate: TypoLocalDateTime\n)\n")),(0,r.kt)("p",null,"and a repo like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import adventureworks.person.address.{AddressFields, AddressRow}\nimport java.sql.Connection\nimport typo.dsl.{DeleteBuilder, SelectBuilder, UpdateBuilder}\n\ntrait AddressRepo {\n  def delete(addressid: AddressId)(implicit c: Connection): Boolean\n  def delete: DeleteBuilder[AddressFields, AddressRow]\n  def insert(unsaved: AddressRow)(implicit c: Connection): AddressRow\n  def insert(unsaved: AddressRowUnsaved)(implicit c: Connection): AddressRow\n  def select: SelectBuilder[AddressFields, AddressRow]\n  def selectAll(implicit c: Connection): List[AddressRow]\n  def selectById(addressid: AddressId)(implicit c: Connection): Option[AddressRow]\n  def selectByIds(addressids: Array[AddressId])(implicit c: Connection): List[AddressRow]\n  def update(row: AddressRow)(implicit c: Connection): Boolean\n  def update: UpdateBuilder[AddressFields, AddressRow]\n  def upsert(unsaved: AddressRow)(implicit c: Connection): AddressRow\n}\n")),(0,r.kt)("p",null,"Since this particular table has auto-increment ID and default values, you will typically use this structure to insert new rows"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import adventureworks.customtypes.Defaulted\n\n/** This class corresponds to a row in table `person.address` which has not been persisted yet */\ncase class AddressRowUnsaved(\n  /** First street address line. */\n  addressline1: /* max 60 chars */ String,\n  /** Second street address line. */\n  addressline2: Option[/* max 60 chars */ String],\n  /** Name of the city. */\n  city: /* max 30 chars */ String,\n  /** Unique identification number for the state or province. Foreign key to StateProvince table.\n      Points to [[stateprovince.StateprovinceRow.stateprovinceid]] */\n  stateprovinceid: StateprovinceId,\n  /** Postal code for the street address. */\n  postalcode: /* max 15 chars */ String,\n  /** Latitude and longitude of this address. */\n  spatiallocation: Option[Array[Byte]],\n  /** Default: nextval('person.address_addressid_seq'::regclass)\n      Primary key for Address records. */\n  addressid: Defaulted[AddressId] = Defaulted.UseDefault,\n  /** Default: uuid_generate_v1() */\n  rowguid: Defaulted[UUID] = Defaulted.UseDefault,\n  /** Default: now() */\n  modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault\n)\n")),(0,r.kt)("h2",{id:"views"},"Views"),(0,r.kt)("p",null,"Less code is generated for views. For now this is what it looks like:"),(0,r.kt)("p",null,"Given the following view:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"create view vemployee\n            (businessentityid, title, firstname, middlename, lastname, suffix, jobtitle, phonenumber, phonenumbertype,\n             emailaddress, emailpromotion, addressline1, addressline2, city, stateprovincename, postalcode,\n             countryregionname, additionalcontactinfo)\nas\nSELECT e.businessentityid,\n       p.title,\n       p.firstname,\n       p.middlename,\n       p.lastname,\n       p.suffix,\n       e.jobtitle,\n       pp.phonenumber,\n       pnt.name AS phonenumbertype,\n       ea.emailaddress,\n       p.emailpromotion,\n       a.addressline1,\n       a.addressline2,\n       a.city,\n       sp.name  AS stateprovincename,\n       a.postalcode,\n       cr.name  AS countryregionname,\n       p.additionalcontactinfo\nFROM humanresources.employee e\n         JOIN person.person p ON p.businessentityid = e.businessentityid\n         JOIN person.businessentityaddress bea ON bea.businessentityid = e.businessentityid\n         JOIN person.address a ON a.addressid = bea.addressid\n         JOIN person.stateprovince sp ON sp.stateprovinceid = a.stateprovinceid\n         JOIN person.countryregion cr ON cr.countryregioncode::text = sp.countryregioncode::text\n         LEFT JOIN person.personphone pp ON pp.businessentityid = p.businessentityid\n         LEFT JOIN person.phonenumbertype pnt ON pp.phonenumbertypeid = pnt.phonenumbertypeid\n         LEFT JOIN person.emailaddress ea ON p.businessentityid = ea.businessentityid;\n\n")),(0,r.kt)("p",null,"You get the following row type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import adventureworks.customtypes.TypoXml\nimport adventureworks.person.businessentity.BusinessentityId\nimport adventureworks.public.Name\nimport adventureworks.public.Phone\n\ncase class VemployeeViewRow(\n  /** Points to [[person.person.PersonRow.businessentityid]] */\n  businessentityid: BusinessentityId,\n  /** Points to [[person.person.PersonRow.title]] */\n  title: /* max 8 chars */ String,\n  /** Points to [[person.person.PersonRow.firstname]] */\n  firstname: Name,\n  /** Points to [[person.person.PersonRow.middlename]] */\n  middlename: Name,\n  /** Points to [[person.person.PersonRow.lastname]] */\n  lastname: Name,\n  /** Points to [[person.person.PersonRow.suffix]] */\n  suffix: /* max 10 chars */ String,\n  /** Points to [[employee.EmployeeRow.jobtitle]] */\n  jobtitle: /* max 50 chars */ String,\n  /** Points to [[person.personphone.PersonphoneRow.phonenumber]] */\n  phonenumber: Option[Phone],\n  phonenumbertype: Option[Name],\n  /** Points to [[person.emailaddress.EmailaddressRow.emailaddress]] */\n  emailaddress: Option[/* max 50 chars */ String],\n  /** Points to [[person.person.PersonRow.emailpromotion]] */\n  emailpromotion: Int,\n  /** Points to [[person.address.AddressRow.addressline1]] */\n  addressline1: /* max 60 chars */ String,\n  /** Points to [[person.address.AddressRow.addressline2]] */\n  addressline2: /* max 60 chars */ String,\n  /** Points to [[person.address.AddressRow.city]] */\n  city: /* max 30 chars */ String,\n  stateprovincename: Name,\n  /** Points to [[person.address.AddressRow.postalcode]] */\n  postalcode: /* max 15 chars */ String,\n  countryregionname: Name,\n  /** Points to [[person.person.PersonRow.additionalcontactinfo]] */\n  additionalcontactinfo: TypoXml\n)\n")),(0,r.kt)("p",null,"And the this repo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import adventureworks.humanresources.vemployee.{VemployeeViewFields, VemployeeViewRow}\n\ntrait VemployeeViewRepo {\n  def select: SelectBuilder[VemployeeViewFields, VemployeeViewRow]\n  def selectAll(implicit c: Connection): List[VemployeeViewRow]\n}\n")))}u.isMDXComponent=!0}}]);