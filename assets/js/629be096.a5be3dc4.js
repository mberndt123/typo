"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[7839],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),d=o,f=u["".concat(s,".").concat(d)]||u[d]||m[d]||a;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2327:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const a={title:"Generate code into multiple projects"},i=void 0,l={unversionedId:"other-features/generate-into-multiple-projects",id:"other-features/generate-into-multiple-projects",title:"Generate code into multiple projects",description:"It's very common that you don't want to expose all the tables in one place in your system.",source:"@site/docs/other-features/generate-into-multiple-projects.md",sourceDirName:"other-features",slug:"/other-features/generate-into-multiple-projects",permalink:"/typo/docs/other-features/generate-into-multiple-projects",draft:!1,tags:[],version:"current",frontMatter:{title:"Generate code into multiple projects"},sidebar:"tutorialSidebar",previous:{title:"Streaming inserts with COPY API",permalink:"/typo/docs/other-features/streaming-inserts"},next:{title:"JSON codecs",permalink:"/typo/docs/other-features/json"}},s={},c=[{value:"todo:",id:"todo",level:3}],p={toc:c},u="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"It's very common that you don't want to expose all the tables in one place in your system.\nYou also don't want duplication of generated code or more than one script to generate database code. "),(0,o.kt)("p",null,"The solution is to pass a ",(0,o.kt)("inlineCode",{parentName:"p"},"ProjectGraph")," structure to ",(0,o.kt)("inlineCode",{parentName:"p"},"generateFromDb")," instead,\nin which you encode the structure of the (relevant) projects in your build."),(0,o.kt)("p",null,"Dependencies between projects are encoded by nesting in the tree you pass (each node has a ",(0,o.kt)("inlineCode",{parentName:"p"},"downstream")," member),\nwith the root being the uppermost one. "),(0,o.kt)("p",null,"If multiple downstream projects want to generate the same code, it'll be pulled up to the level necessary to become visible for all of them."),(0,o.kt)("p",null,"sample:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import typo.*\nimport java.nio.file.Path\nimport java.sql.Connection\n\ndef generate(implicit c: Connection): String = {\n  val cwd: Path = Path.of(sys.props("user.dir"))\n\n  val generated = generateFromDb(\n    Options(\n      pkg = "org.mypkg",\n      jsonLibs = Nil,\n      dbLib = Some(DbLibName.ZioJdbc)\n    ),\n    // setup a project graph. this outer-most project is the root project.\n    // if multiple downstream projects need the same relation, it\'ll be pulled up until it\'s visible for all.\n    // in this simple example it means `a.bicycle` will be pulled up here\n    ProjectGraph(\n      name = "a",\n      target = cwd.resolve("a/src/main/typo"),\n      value = Selector.None,\n      scripts = Nil,\n      downstream = List(\n        ProjectGraph(\n          name = "b",\n          target = cwd.resolve("b/src/main/typo"),\n          value = Selector.fullRelationNames(\n            "a.bicycle",\n            "b.person"\n          ),\n          // where to find sql files\n          scripts = List(cwd.resolve("b/src/main/sql")),\n          downstream = Nil\n        ),\n        ProjectGraph(\n          name = "c",\n          target = cwd.resolve("b/src/main/typo"),\n          value = Selector.fullRelationNames(\n            "a.bicycle",\n            "c.animal"\n          ),\n          scripts = List(cwd.resolve("b/src/main/sql")),\n          downstream = Nil\n        )\n      )\n    )\n  )\n\n  generated.foreach(_.overwriteFolder())\n\n  import scala.sys.process.*\n\n  (List("git", "add") ++ generated.map(_.folder.toString)).!!\n}\n')),(0,o.kt)("h3",{id:"todo"},"todo:"),(0,o.kt)("ul",{className:"contains-task-list"},(0,o.kt)("li",{parentName:"ul",className:"task-list-item"},(0,o.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ",(0,o.kt)("inlineCode",{parentName:"li"},"testInsert")," (we'll need one for each project)"),(0,o.kt)("li",{parentName:"ul",className:"task-list-item"},(0,o.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","docs"),(0,o.kt)("li",{parentName:"ul",className:"task-list-item"},(0,o.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","tests")))}m.isMDXComponent=!0}}]);