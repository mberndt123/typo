"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[3671],{751:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var n=i(4848),s=i(8453);const r={title:"Limitations"},o=void 0,l={id:"limitations",title:"Limitations",description:"Stability",source:"@site/docs/limitations.md",sourceDirName:".",slug:"/limitations",permalink:"/typo/docs/limitations",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Limitations"},sidebar:"tutorialSidebar",previous:{title:"Getting started",permalink:"/typo/docs/setup"},next:{title:"Primary key types",permalink:"/typo/docs/type-safety/id-types"}},a={},c=[{value:"Stability",id:"stability",level:3},{value:"Correctness",id:"correctness",level:3},{value:"Nullability",id:"nullability",level:4}];function d(e){const t={a:"a",code:"code",em:"em",h3:"h3",h4:"h4",p:"p",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h3,{id:"stability",children:"Stability"}),"\n",(0,n.jsx)(t.p,{children:"the interface of the generated code is not final yet. You can keep using a particular version of Typo\n~forever, but if you want to upgrade to the newest version you need to expect at least some API churn."}),"\n",(0,n.jsx)(t.h3,{id:"correctness",children:"Correctness"}),"\n",(0,n.jsxs)(t.p,{children:["Typo tries to make a guarantee that all generated code will not fail with a type error.\nYou can still break ",(0,n.jsx)(t.a,{href:"/typo/docs/other-features/constraints",children:"constraints"})," naturally, but the types should align."]}),"\n",(0,n.jsxs)(t.p,{children:["Typo is close to delivering on this, but JDBC makes it ",(0,n.jsx)(t.em,{children:"incredibly"})," difficult to get all the details exactly right.\nIn other words, let's call it a strong tendency to get it right, for now :)"]}),"\n",(0,n.jsx)(t.h4,{id:"nullability",children:"Nullability"}),"\n",(0,n.jsxs)(t.p,{children:["In particular, nullability in columns returned by sql files and views is something which may never be ",(0,n.jsx)(t.em,{children:"entirely"})," right.\nThis is mainly due to PostgreSQL being inexact when inferring nullability for arbitrary sql."]}),"\n",(0,n.jsxs)(t.p,{children:["The pgtyped project has a metaissue which collects type inference issues in PostgreSQL ",(0,n.jsx)(t.a,{href:"https://github.com/adelsz/pgtyped/issues/375",children:"here"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:["Some effort has been made in Typo to get a better source of nullability by looking at ",(0,n.jsx)(t.code,{children:"explain"})," plans,\nsee ",(0,n.jsx)(t.a,{href:"https://github.com/oyvindberg/typo/pull/27",children:"#27"}),"."]})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,t,i)=>{i.d(t,{R:()=>o,x:()=>l});var n=i(6540);const s={},r=n.createContext(s);function o(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);