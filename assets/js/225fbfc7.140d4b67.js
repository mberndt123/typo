"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[6062],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var d=r.createContext({}),l=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(d.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,d=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=l(n),m=s,f=u["".concat(d,".").concat(m)]||u[m]||p[m]||o;return n?r.createElement(f,a(a({ref:t},c),{},{components:n})):r.createElement(f,a({ref:t},c))}));function f(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,a=new Array(o);a[0]=m;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i[u]="string"==typeof e?e:s,a[1]=i;for(var l=2;l<o;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},508:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var r=n(7462),s=(n(7294),n(3905));const o={title:"Testing with stubs"},a=void 0,i={unversionedId:"other-features/testing-with-stubs",id:"other-features/testing-with-stubs",title:"Testing with stubs",description:"It can be incredibly tiring to write tests for the database layer.",source:"@site/docs/other-features/testing-with-stubs.md",sourceDirName:"other-features",slug:"/other-features/testing-with-stubs",permalink:"/typo/docs/other-features/testing-with-stubs",draft:!1,tags:[],version:"current",frontMatter:{title:"Testing with stubs"},sidebar:"tutorialSidebar",previous:{title:"User-selected types",permalink:"/typo/docs/type-safety/user-selected-types"},next:{title:"Testing with random values",permalink:"/typo/docs/other-features/testing-with-random-values"}},d={},l=[{value:"DSL",id:"dsl",level:2},{value:"*Note",id:"note",level:3},{value:"An example of a generated <code>RepoMock</code>:",id:"an-example-of-a-generated-repomock",level:2}],c={toc:l},u="wrapper";function p(e){let{components:t,...n}=e;return(0,s.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"It can be incredibly tiring to write tests for the database layer."),(0,s.kt)("p",null,"Often you want to split you code in pure/effectful code and just test the pure parts,\nbut sometimes you want to observe mutations in the database as well."),(0,s.kt)("p",null,"Sometimes spinning up a real database for this is the right answer, sometimes it's not.\nIt is always slow, however, so it's way easier to get a fast test suite if you're not doing it."),(0,s.kt)("p",null,"The argument for the approach taken by Typo is that since the interaction between Scala\nand PostgreSQL is guaranteed to be correct*, it is less important to back your tests with a real database."),(0,s.kt)("p",null,"This leads us to stubs (called mocks in the generated code), implementations of the repository\ninterfaces backed by a mutable ",(0,s.kt)("inlineCode",{parentName:"p"},"Map"),". This can be generated for all tables with a primary key."),(0,s.kt)("h2",{id:"dsl"},"DSL"),(0,s.kt)("p",null,"Notable, these mocks work with the ",(0,s.kt)("a",{parentName:"p",href:"/typo/docs/what-is/dsl"},"dsl"),", which lets you describe semi-complex joins, updates, where predicates,\nstring operations and so on in your code, and test it in-memory!"),(0,s.kt)("h3",{id:"note"},"*Note"),(0,s.kt)("p",null,"Typo guarantees schema correctness, but you can still break constraints.\nOr your tests need more advanced PostgreSQL functionality."),(0,s.kt)("p",null,"Stubs are obviously not a full replacement, but if they can be used for some non-zero percentage\nof your tests it's still very beneficial!"),(0,s.kt)("h2",{id:"an-example-of-a-generated-repomock"},"An example of a generated ",(0,s.kt)("inlineCode",{parentName:"h2"},"RepoMock"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import adventureworks.person.address.*\nimport typo.dsl.*\nimport java.sql.Connection\nimport scala.annotation.nowarn\n\nclass AddressRepoMock(toRow: Function1[AddressRowUnsaved, AddressRow],\n                      map: scala.collection.mutable.Map[AddressId, AddressRow] = scala.collection.mutable.Map.empty) extends AddressRepo {\n  override def delete(addressid: AddressId)(implicit c: Connection): Boolean = {\n    map.remove(addressid).isDefined\n  }\n  override def delete: DeleteBuilder[AddressFields, AddressRow] = {\n    DeleteBuilder.DeleteBuilderMock(DeleteParams.empty, AddressFields.structure.fields, map)\n  }\n  override def insert(unsaved: AddressRow)(implicit c: Connection): AddressRow = {\n    val _ = if (map.contains(unsaved.addressid))\n      sys.error(s"id ${unsaved.addressid} already exists")\n    else\n      map.put(unsaved.addressid, unsaved)\n\n    unsaved\n  }\n  override def insertStreaming(unsaved: Iterator[AddressRow], batchSize: Int)(implicit c: Connection): Long = {\n    unsaved.foreach { row =>\n      map += (row.addressid -> row)\n    }\n    unsaved.size.toLong\n  }\n  override def insert(unsaved: AddressRowUnsaved)(implicit c: Connection): AddressRow = {\n    insert(toRow(unsaved))\n  }\n  /* NOTE: this functionality requires PostgreSQL 16 or later! */\n  override def insertUnsavedStreaming(unsaved: Iterator[AddressRowUnsaved], batchSize: Int)(implicit c: Connection): Long = {\n    unsaved.foreach { unsavedRow =>\n      val row = toRow(unsavedRow)\n      map += (row.addressid -> row)\n    }\n    unsaved.size.toLong\n  }\n  override def select: SelectBuilder[AddressFields, AddressRow] = {\n    SelectBuilderMock(AddressFields.structure, () => map.values.toList, SelectParams.empty)\n  }\n  override def selectAll(implicit c: Connection): List[AddressRow] = {\n    map.values.toList\n  }\n  override def selectById(addressid: AddressId)(implicit c: Connection): Option[AddressRow] = {\n    map.get(addressid)\n  }\n  override def selectByIds(addressids: Array[AddressId])(implicit c: Connection): List[AddressRow] = {\n    addressids.flatMap(map.get).toList\n  }\n  override def update(row: AddressRow)(implicit c: Connection): Boolean = {\n    map.get(row.addressid) match {\n      case Some(`row`) => false\n      case Some(_) =>\n        map.put(row.addressid, row): @nowarn\n        true\n      case None => false\n    }\n  }\n  override def update: UpdateBuilder[AddressFields, AddressRow] = {\n    UpdateBuilder.UpdateBuilderMock(UpdateParams.empty, AddressFields.structure.fields, map)\n  }\n  override def upsert(unsaved: AddressRow)(implicit c: Connection): AddressRow = {\n    map.put(unsaved.addressid, unsaved): @nowarn\n    unsaved\n  }\n}\n')))}p.isMDXComponent=!0}}]);