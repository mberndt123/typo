"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[1787],{4860:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>i,default:()=>y,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var t=n(4848),a=n(8453);const o={title:"Typo types"},i=void 0,r={id:"type-safety/typo-types",title:"Typo types",description:"Typo generates some helper types if they are needed by your database schema.",source:"@site/docs/type-safety/typo-types.md",sourceDirName:"type-safety",slug:"/type-safety/typo-types",permalink:"/typo/docs/type-safety/typo-types",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Typo types"},sidebar:"tutorialSidebar",previous:{title:"Defaulted types",permalink:"/typo/docs/type-safety/defaulted-types"},next:{title:"Type flow",permalink:"/typo/docs/type-safety/type-flow"}},l={},c=[{value:"(In-)convenience",id:"in-convenience",level:2},{value:"Full list of types",id:"full-list-of-types",level:2},{value:"Unknown types",id:"unknown-types",level:2}];function p(e){const s={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.p,{children:"Typo generates some helper types if they are needed by your database schema."}),"\n",(0,t.jsx)(s.p,{children:"There are multiple reasons why this is sometimes necessary:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"PostgreSQL driver has broken handling of offset date/time types. need to go through string in order to not lose offset/precision"}),"\n",(0,t.jsx)(s.li,{children:"money type is broken in many interesting ways"}),"\n",(0,t.jsxs)(s.li,{children:["possibility of transferring instances of a ",(0,t.jsx)(s.code,{children:"Row"})," type to a platform which doesn't have the PostgreSQL driver jar available"]}),"\n",(0,t.jsx)(s.li,{children:"a type to hang otherwise orphan type classes on"}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"in-convenience",children:"(In-)convenience"}),"\n",(0,t.jsx)(s.p,{children:"The goal here is type-safety, not convenience."}),"\n",(0,t.jsx)(s.p,{children:"You'll very likely map row types into your domain objects anyway, so mapping these types to what you want is typically trivial.\nThe row types belong in the database layer, and so do these Typo types."}),"\n",(0,t.jsx)(s.p,{children:"That said, these types are primarily driven by the (self-imposed) constraint that typeclass instances be coherent -\nThat is only one instance per type. This may change in the future."}),"\n",(0,t.jsx)(s.h2,{id:"full-list-of-types",children:"Full list of types"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-scala",children:"import java.time.*\n\n/** aclitem (via PGObject) */\ncase class TypoAclItem(value: String)\n/** anyarray (via PGObject) */\ncase class TypoAnyArray(value: String)\n/** This represents the box datatype in PostgreSQL */\ncase class TypoBox(x1: Double, y1: Double, x2: Double, y2: Double)\n/** This represents the bytea datatype in PostgreSQL */\ncase class TypoBytea(value: Array[Byte])\n/** This represents circle datatype in PostgreSQL, consisting of a point and a radius */\ncase class TypoCircle(center: TypoPoint, radius: Double)\n/** The text representation of an hstore, used for input and output, includes zero or more key => value pairs separated by commas */\ncase class TypoHStore(value: Map[String, String])\n/** inet (via PGObject) */\ncase class TypoInet(value: String)\n/** This is `java.time.TypoInstant`, but with microsecond precision and transferred to and from postgres as strings. The reason is that postgres driver and db libs are broken */\ncase class TypoInstant(value: Instant)\n/** int2vector (via PGObject) */\ncase class TypoInt2Vector(value: String)\n/** Interval type in PostgreSQL */\ncase class TypoInterval(years: Int, months: Int, days: Int, hours: Int, minutes: Int, seconds: Double)\n/** json (via PGObject) */\ncase class TypoJson(value: String)\n/** jsonb (via PGObject) */\ncase class TypoJsonb(value: String)\n/** This implements a line represented by the linear equation Ax + By + C = 0 */\ncase class TypoLine(a: Double, b: Double, c: Double)\n/** This implements a line represented by the linear equation Ax + By + C = 0 */\ncase class TypoLineSegment(p1: TypoPoint, p2: TypoPoint)\n/** This is `java.time.LocalDate`, but transferred to and from postgres as strings. The reason is that postgres driver and db libs are broken */\ncase class TypoLocalDate(value: LocalDate)\n/** This is `java.time.LocalDateTime`, but with microsecond precision and transferred to and from postgres as strings. The reason is that postgres driver and db libs are broken */\ncase class TypoLocalDateTime(value: LocalDateTime)\n/** This is `java.time.LocalTime`, but with microsecond precision and transferred to and from postgres as strings. The reason is that postgres driver and db libs are broken */\ncase class TypoLocalTime(value: LocalTime)\n/** Money and cash types in PostgreSQL */\ncase class TypoMoney(value: BigDecimal)\n/** This is `java.time.OffsetTime`, but with microsecond precision and transferred to and from postgres as strings. The reason is that postgres driver and db libs are broken */\ncase class TypoOffsetTime(value: OffsetTime)\n/** oidvector (via PGObject) */\ncase class TypoOidVector(value: String)\n/** This implements a path (a multiple segmented line, which may be closed) */\ncase class TypoPath(open: Boolean, points: List[TypoPoint])\n/** pg_node_tree (via PGObject) */\ncase class TypoPgNodeTree(value: String)\n/** Point datatype in PostgreSQL */\ncase class TypoPoint(x: Double, y: Double)\n/** Polygon datatype in PostgreSQL */\ncase class TypoPolygon(points: List[TypoPoint])\n/** record (via PGObject) */\ncase class TypoRecord(value: String)\n/** regproc (via PGObject) */\ncase class TypoRegproc(value: String)\n/** regtype (via PGObject) */\ncase class TypoRegtype(value: String)\n/** Short primitive */\ncase class TypoShort(value: Short)\n/** xid (via PGObject) */\ncase class TypoXid(value: String)\n/** XML */\ncase class TypoXml(value: String)\n"})}),"\n",(0,t.jsx)(s.h2,{id:"unknown-types",children:"Unknown types"}),"\n",(0,t.jsx)(s.p,{children:"You may also come across column types Typo doesn't know how to handle yet.\nYou will see warnings in the log at generation-time like this:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"typo: Couldn't translate type from table pg_catalog.pg_statistic_ext_data column stxdndistinct with type Some(pg_ndistinct). Falling back to text\n"})}),"\n",(0,t.jsx)(s.p,{children:"And then you'll see corresponding classes like this:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-scala",children:"/** This is a type typo does not know how to handle yet. This falls back to casting to string and crossing fingers. Time to file an issue! :] */\ncase class TypoUnknownPgNdistinct(value: String)\n"})})]})}function y(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>r});var t=n(6540);const a={},o=t.createContext(a);function i(e){const s=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function r(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(o.Provider,{value:s},e.children)}}}]);