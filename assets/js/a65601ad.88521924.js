"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[368],{3905:(e,t,r)=>{r.d(t,{Zo:()=>y,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),l=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},y=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,y=i(e,["components","mdxType","originalType","parentName"]),c=l(r),d=a,f=c["".concat(p,".").concat(d)]||c[d]||u[d]||o;return r?n.createElement(f,s(s({ref:t},y),{},{components:r})):n.createElement(f,s({ref:t},y))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[c]="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},2791:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var n=r(7462),a=(r(7294),r(3905));const o={title:"User-selected types"},s=void 0,i={unversionedId:"type-safety/user-selected-types",id:"type-safety/user-selected-types",title:"User-selected types",description:"This functionality is present in Typo in order to:",source:"@site/docs/type-safety/user-selected-types.md",sourceDirName:"type-safety",slug:"/type-safety/user-selected-types",permalink:"/typo/docs/type-safety/user-selected-types",draft:!1,tags:[],version:"current",frontMatter:{title:"User-selected types"},sidebar:"tutorialSidebar",previous:{title:"Type flow",permalink:"/typo/docs/type-safety/type-flow"},next:{title:"Ready for Scala.js/native",permalink:"/typo/docs/other-features/scala-js-ready"}},p={},l=[{value:"Usage",id:"usage",level:2},{value:"\ud83d\udca3 Note \ud83d\udca3",id:"-note-",level:2}],y={toc:l},c="wrapper";function u(e){let{components:t,...r}=e;return(0,a.kt)(c,(0,n.Z)({},y,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This functionality is present in Typo in order to:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"avoid generating ",(0,a.kt)("a",{parentName:"li",href:"/typo/docs/type-safety/id-types"},"primary key types")," for what is typically strings and numbers if you already have such a type and you're integrating with an existing codebase."),(0,a.kt)("li",{parentName:"ul"},"to type up columns which should have had a more specific wrapper type, again typically strings or numbers")),(0,a.kt)("p",null,"It's strongly discouraged to use it for anything else. In particular, you should ",(0,a.kt)("em",{parentName:"p"},"not")," use it to avoid ",(0,a.kt)("a",{parentName:"p",href:"/typo/docs/type-safety/typo-types"},"Typo types"),"!\nThey are there to work around bugs."),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"You setup user-selected types by ",(0,a.kt)("a",{parentName:"p",href:"/typo/docs/customization/customize-types"},"Customizing column types"),"."),(0,a.kt)("p",null,"You need to implement a bunch of typeclass instances for the types you use.\nThe compiler will guide you, but it's basically everything which is needed to use the type with your database and json library.\nThe easiest approach is probably to copy/paste a generated primary key type and adapt it."),(0,a.kt)("h2",{id:"-note-"},"\ud83d\udca3 Note \ud83d\udca3"),(0,a.kt)("p",null,"It is crucial that you implement these typeclass instances ",(0,a.kt)("strong",{parentName:"p"},"correctly"),", or things may obviously blow up at runtime.\nIn particular, the generated Typo code makes use of ",(0,a.kt)("inlineCode",{parentName:"p"},"sqlType")," to make explicit casts in generated SQL."))}u.isMDXComponent=!0}}]);