"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[6760],{4551:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var o=n(4848),a=n(8453);const r={title:"Testing with random values"},s=void 0,i={id:"other-features/testing-with-random-values",title:"Testing with random values",description:"This covers a lot of interesting ground, test-wise.",source:"@site/docs/other-features/testing-with-random-values.md",sourceDirName:"other-features",slug:"/other-features/testing-with-random-values",permalink:"/typo/docs/other-features/testing-with-random-values",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Testing with random values"},sidebar:"tutorialSidebar",previous:{title:"Testing with stubs",permalink:"/typo/docs/other-features/testing-with-stubs"},next:{title:"Streaming inserts with COPY API",permalink:"/typo/docs/other-features/streaming-inserts"}},d={},l=[{value:"Domains",id:"domains",level:3},{value:"Usage example",id:"usage-example",level:3},{value:"Comparison with scalacheck",id:"comparison-with-scalacheck",level:3}];function u(e){const t={a:"a",code:"code",em:"em",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:"This covers a lot of interesting ground, test-wise."}),"\n",(0,o.jsxs)(t.p,{children:["If you enable ",(0,o.jsx)(t.code,{children:"enableTestInserts"})," in ",(0,o.jsx)(t.code,{children:"typo.Options"})," you now get an ",(0,o.jsx)(t.code,{children:"TestInsert"})," class, with a method to insert a row for each table Typo knows about.\nAll values except ids, foreign keys and so on are ",(0,o.jsx)(t.em,{children:"randomly generated"}),", but you can override them with named parameters."]}),"\n",(0,o.jsx)(t.p,{children:"The idea is that you:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"can easily insert rows for testing"}),"\n",(0,o.jsxs)(t.li,{children:["can explicitly set the values you ",(0,o.jsx)(t.em,{children:"do"})," care about"]}),"\n",(0,o.jsx)(t.li,{children:"will get random values for the rest"}),"\n",(0,o.jsx)(t.li,{children:"are still forced to follow FKs to setup the data graph correctly"}),"\n",(0,o.jsx)(t.li,{children:"it's easy to follow those FKs, because after inserting a row you get the persisted version back, including generated IDs"}),"\n",(0,o.jsxs)(t.li,{children:["can get the same values each time by hard coding the seed ",(0,o.jsx)(t.code,{children:"new TestInsert(new scala.util.Random(0L))"}),", or you can run it multiple times with different seeds to see that the random values really do not matter"]}),"\n",(0,o.jsxs)(t.li,{children:["do not need to write ",(0,o.jsx)(t.em,{children:"any"})," code to get all this available to you, like the rest of Typo."]}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"In summary, this is a fantastic way of setting up complex test scenarios in the database!"}),"\n",(0,o.jsx)(t.h3,{id:"domains",children:"Domains"}),"\n",(0,o.jsxs)(t.p,{children:["If you use ",(0,o.jsx)(t.a,{href:"/typo/docs/type-safety/domains",children:"postgres domains"})," you typically want affect the generation of data yourself.\nFor that reason there is a trait you need to implement and pass in. This only affect you if you use domains."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-scala",children:"import adventureworks.public.*\n\nimport scala.util.Random\n\n// apply domain-specific rules here\nobject DomainInsert extends adventureworks.TestDomainInsert {\n  override def publicAccountNumber(random: Random): AccountNumber = AccountNumber(random.nextString(10))\n  override def publicFlag(random: Random): Flag = Flag(random.nextBoolean())\n  override def publicMydomain(random: Random): Mydomain = Mydomain(random.nextString(10))\n  override def publicName(random: Random): Name = Name(random.nextString(10))\n  override def publicNameStyle(random: Random): NameStyle = NameStyle(random.nextBoolean())\n  override def publicPhone(random: Random): Phone = Phone(random.nextString(10))\n  override def publicShortText(random: Random): ShortText = ShortText(random.nextString(10))\n  override def publicOrderNumber(random: Random): OrderNumber = OrderNumber(random.nextString(10))\n}\n"})}),"\n",(0,o.jsx)(t.h3,{id:"usage-example",children:"Usage example"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-scala",children:'import adventureworks.customtypes.{Defaulted, TypoShort, TypoLocalDateTime, TypoXml}\nimport adventureworks.production.unitmeasure.UnitmeasureId\nimport adventureworks.TestInsert\n\nimport scala.util.Random\n\nval testInsert = new TestInsert(new Random(0), DomainInsert)\n// testInsert: TestInsert = adventureworks.TestInsert@429075c8\n\nval unitmeasure = testInsert.productionUnitmeasure(UnitmeasureId("kgg"))\n// unitmeasure: UnitmeasureRow = UnitmeasureRow(\n//   unitmeasurecode = UnitmeasureId(value = "kgg"),\n//   name = Name(value = "\u6915\u76bf\u923b\u745c\u3daf\u7700\u33dd\u2442\ua7c6\u4a47"),\n//   modifieddate = TypoLocalDateTime(value = 2024-06-21T15:59:30.773064)\n// )\nval productCategory = testInsert.productionProductcategory()\n// productCategory: ProductcategoryRow = ProductcategoryRow(\n//   productcategoryid = ProductcategoryId(value = 194),\n//   name = Name(value = "\u2123\u067f\u7381\u51a7\u1f00\u84c6\u92e5\u5c04\u2145\u532b"),\n//   rowguid = TypoUUID(value = 7b47c85a-2fd6-11ef-8bf6-0242ac160002),\n//   modifieddate = TypoLocalDateTime(value = 2024-06-21T15:59:30.773064)\n// )\nval productSubcategory = testInsert.productionProductsubcategory(productCategory.productcategoryid)\n// productSubcategory: ProductsubcategoryRow = ProductsubcategoryRow(\n//   productsubcategoryid = ProductsubcategoryId(value = 194),\n//   productcategoryid = ProductcategoryId(value = 194),\n//   name = Name(value = "\u4abe\u60b2\ucf3a\u044f\u760a\ua597\u6b16\ub890\u8c76\u3916"),\n//   rowguid = TypoUUID(value = 7b4ceef2-2fd6-11ef-8bf6-0242ac160002),\n//   modifieddate = TypoLocalDateTime(value = 2024-06-21T15:59:30.773064)\n// )\nval productModel = testInsert.productionProductmodel(catalogdescription = Some(new TypoXml("<xml/>")), instructions = Some(new TypoXml("<instructions/>")))\n// productModel: ProductmodelRow = ProductmodelRow(\n//   productmodelid = ProductmodelId(value = 194),\n//   name = Name(value = "\u8873\u29a5\u1340\u27d1\u9aa9\u8a96\u06a0\u9ba9\u7138\ubb77"),\n//   catalogdescription = Some(value = TypoXml(value = "<xml/>")),\n//   instructions = Some(value = TypoXml(value = "<instructions/>")),\n//   rowguid = TypoUUID(value = 7b53416c-2fd6-11ef-8bf6-0242ac160002),\n//   modifieddate = TypoLocalDateTime(value = 2024-06-21T15:59:30.773064)\n// )\ntestInsert.productionProduct(\n  safetystocklevel = TypoShort(1),\n  reorderpoint = TypoShort(1),\n  standardcost = BigDecimal(1),\n  listprice = BigDecimal(1),\n  daystomanufacture = 10,\n  sellstartdate = TypoLocalDateTime.now,\n  sizeunitmeasurecode = Some(unitmeasure.unitmeasurecode),\n  weightunitmeasurecode = Some(unitmeasure.unitmeasurecode),\n  `class` = Some("H "),\n  style = Some("W "),\n  productsubcategoryid = Some(productSubcategory.productsubcategoryid),\n  productmodelid = Some(productModel.productmodelid)\n)\n// res1: ProductRow = ProductRow(\n//   productid = ProductId(value = 194),\n//   name = Name(value = "\u774d\uba00\u7f36\uc3c4\u8fc4\ub13c\u4484\u48c3\u34ce\u4fe0"),\n//   productnumber = "JXQqPyuxbr589wyJzS2S",\n//   makeflag = Flag(value = true),\n//   finishedgoodsflag = Flag(value = true),\n//   color = Some(value = "iHrAOB2RuvBbFbQ"),\n//   safetystocklevel = TypoShort(value = 1),\n//   reorderpoint = TypoShort(value = 1),\n//   standardcost = 1,\n//   listprice = 1,\n//   size = Some(value = "NB7Zu"),\n//   sizeunitmeasurecode = Some(value = UnitmeasureId(value = "kgg")),\n//   weightunitmeasurecode = Some(value = UnitmeasureId(value = "kgg")),\n//   weight = None,\n//   daystomanufacture = 10,\n//   productline = None,\n//   class = Some(value = "H "),\n//   style = Some(value = "W "),\n//   productsubcategoryid = Some(value = ProductsubcategoryId(value = 194)),\n//   productmodelid = Some(value = ProductmodelId(value = 194)),\n//   sellstartdate = TypoLocalDateTime(value = 2024-06-21T15:59:31.054475),\n//   sellenddate = None,\n//   discontinueddate = Some(\n//     value = TypoLocalDateTime(value = 2034-05-19T00:51:56)\n//   ),\n//   rowguid = TypoUUID(value = 7b5a5830-2fd6-11ef-8bf6-0242ac160002),\n//   modifieddate = TypoLocalDateTime(value = 2024-06-21T15:59:30.773064)\n// )\n'})}),"\n",(0,o.jsx)(t.h3,{id:"comparison-with-scalacheck",children:"Comparison with scalacheck"}),"\n",(0,o.jsx)(t.p,{children:"This does look a lot like scalacheck indeed."}),"\n",(0,o.jsx)(t.p,{children:"But look closer, there are:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"no implicits"}),"\n",(0,o.jsx)(t.li,{children:"no integration glue code with test libraries"}),"\n",(0,o.jsx)(t.li,{children:"almost no imports, you need to mention very few types"}),"\n",(0,o.jsx)(t.li,{children:"no keeping track of all the possible row types and repositories"}),"\n",(0,o.jsx)(t.li,{children:"and so on"}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"This feature is meant to be easy to use, and I really think/hope it is!"})]})}function c(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>i});var o=n(6540);const a={},r=o.createContext(a);function s(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);