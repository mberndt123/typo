"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[122],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>f});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=l(t),d=o,f=u["".concat(c,".").concat(d)]||u[d]||p[d]||a;return t?r.createElement(f,i(i({ref:n},m),{},{components:t})):r.createElement(f,i({ref:n},m))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7894:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=t(7462),o=(t(7294),t(3905));const a={title:"Customize naming"},i=void 0,s={unversionedId:"customization/customize-naming",id:"customization/customize-naming",title:"Customize naming",description:"You provide a typo.Naming instance in typo.Options when running typo.",source:"@site/docs/customization/customize-naming.md",sourceDirName:"customization",slug:"/customization/customize-naming",permalink:"/typo/docs/customization/customize-naming",draft:!1,tags:[],version:"current",frontMatter:{title:"Customize naming"},sidebar:"tutorialSidebar",previous:{title:"Customize SQL files",permalink:"/typo/docs/customization/customize-sql-files"},next:{title:"Customize nullability for parameters and columns",permalink:"/typo/docs/customization/customize-nullability"}},c={},l=[{value:"Customize field names",id:"customize-field-names",level:3}],m={toc:l},u="wrapper";function p(e){let{components:n,...t}=e;return(0,o.kt)(u,(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"You provide a ",(0,o.kt)("inlineCode",{parentName:"p"},"typo.Naming")," instance in ",(0,o.kt)("inlineCode",{parentName:"p"},"typo.Options")," when running typo.\nThis is responsible for computing all scala names based on names from PostgreSQL."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import typo.*\n\nval naming = new Naming(sc.QIdent("org.foo")) {\n  override def enumName(name: db.RelationName): sc.QIdent = tpe(name, suffix = "ENUM")\n}\n// naming: Naming = repl.MdocSession$App$$anon$1@3358805a\n\nsc.renderTree(naming.enumName(db.RelationName(Some("schema"), "foo")))\n// res0: String = "org.foo.schema.FooENUM"\n')),(0,o.kt)("h3",{id:"customize-field-names"},"Customize field names"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'// say you you have some weird naming standard in your schemas, for instance `id_table` instead of `table_id`. \n// This is how it can be prettified in the generated scala code\nval fixIdPattern = new Naming(sc.QIdent("org.foo")) {\n  override def field(name: db.ColName): sc.Ident = {\n    val newName = if (name.value.startsWith("id_")) db.ColName(name.value.drop(3) + "_id") else name\n    super.field(newName)\n  }\n}\n// fixIdPattern: Naming = repl.MdocSession$App$$anon$4@62cf873a\n\nsc.renderTree(fixIdPattern.field(db.ColName("id_flaff")))\n// res1: String = "flaffId"\n')))}p.isMDXComponent=!0}}]);