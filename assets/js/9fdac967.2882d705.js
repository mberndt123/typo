"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[9077],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(r),m=a,f=c["".concat(s,".").concat(m)]||c[m]||y[m]||o;return r?n.createElement(f,l(l({ref:t},u),{},{components:r})):n.createElement(f,l({ref:t},u))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[c]="string"==typeof e?e:a,l[1]=i;for(var p=2;p<o;p++)l[p]=r[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},711:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>y,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const o={},l=void 0,i={unversionedId:"arrays",id:"arrays",title:"arrays",description:"Arrays are super useful in Postgres, but almost impossible to work with through JDBC, unfortunately.",source:"@site/docs/arrays.md",sourceDirName:".",slug:"/arrays",permalink:"/typo/docs/arrays",draft:!1,tags:[],version:"current",frontMatter:{}},s={},p=[{value:"Note",id:"note",level:2}],u={toc:p},c="wrapper";function y(e){let{components:t,...r}=e;return(0,a.kt)(c,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Arrays are super useful in Postgres, but almost impossible to work with through JDBC, unfortunately."),(0,a.kt)("p",null,"In ",(0,a.kt)("inlineCode",{parentName:"p"},"typo"),", a lot of care has been taken to support ",(0,a.kt)("inlineCode",{parentName:"p"},"Array"),"s of all relevant types,\nso you can freely use them in your relations and in your queries."),(0,a.kt)("h2",{id:"note"},"Note"),(0,a.kt)("p",null,"Postgres arrays can be multidimensional, and can have ",(0,a.kt)("inlineCode",{parentName:"p"},"NULL")," values.\nNo attempt has been made at handling that yet."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"To handle multidimensionality ",(0,a.kt)("inlineCode",{parentName:"li"},"typo")," may adopt ",(0,a.kt)("inlineCode",{parentName:"li"},"skunk"),"s ",(0,a.kt)("inlineCode",{parentName:"li"},"Arr")," data type, which looks like it handles it well."),(0,a.kt)("li",{parentName:"ul"},"To handle ",(0,a.kt)("inlineCode",{parentName:"li"},"NULL")," we could (optionally) always generate ",(0,a.kt)("inlineCode",{parentName:"li"},"Arr[Option[T]]")," types for all array columns.")))}y.isMDXComponent=!0}}]);