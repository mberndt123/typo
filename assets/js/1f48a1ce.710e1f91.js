"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[5108],{6139:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>a,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var s=o(4848),n=o(8453);const r={title:"Customize column types"},i=void 0,c={id:"customization/customize-types",title:"Customize column types",description:"Note that use of this feature is in general discouraged,",source:"@site/docs/customization/customize-types.md",sourceDirName:"customization",slug:"/customization/customize-types",permalink:"/typo/docs/customization/customize-types",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Customize column types"},sidebar:"tutorialSidebar",previous:{title:"Customize nullability for parameters and columns",permalink:"/typo/docs/customization/customize-nullability"},next:{title:"Picking subsets of relations with Selector",permalink:"/typo/docs/customization/selector"}},a={},l=[{value:"More structured version",id:"more-structured-version",level:3},{value:"Composing multiple column overrides:",id:"composing-multiple-column-overrides",level:3}];function u(e){const t={a:"a",code:"code",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["Note that use of this feature is in general ",(0,s.jsx)(t.strong,{children:"discouraged"}),",\nsee warning in ",(0,s.jsx)(t.a,{href:"/typo/docs/type-safety/user-selected-types",children:"user-selected type"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"If you're not happy with the types PostgreSQL and Typo has ended up with for a given column, you can override it."}),"\n",(0,s.jsxs)(t.p,{children:["This is referred to within Typo as a ",(0,s.jsx)(t.a,{href:"/typo/docs/type-safety/user-selected-types",children:"user-selected type"}),"."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:'import typo.{Options, TypeOverride}\n\nval rewriteColumnTypes = TypeOverride.relation {\n  case ("schema.table", "column") => "org.foo.ColumnId"\n}\n\nOptions(\n  pkg = "org.foo",\n  dbLib = None,\n  typeOverride = rewriteColumnTypes\n)\n'})}),"\n",(0,s.jsx)(t.h3,{id:"more-structured-version",children:"More structured version"}),"\n",(0,s.jsx)(t.p,{children:'The version above is "simplified", in that is takes a descriptive type and explodes it into strings.\nYou may prefer the version below which is more cumbersome but more structured:'}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:'import typo.db.RelationName\n\nval rewriteMore = TypeOverride.of { \n  case (RelationName(Some(schema), tableName), colName) if schema.contains("foo") && colName.value.startsWith("foo") => "org.foo.Bar" \n}\n'})}),"\n",(0,s.jsx)(t.h3,{id:"composing-multiple-column-overrides",children:"Composing multiple column overrides:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:"rewriteColumnTypes.orElse(rewriteMore)\n"})})]})}function d(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},8453:(e,t,o)=>{o.d(t,{R:()=>i,x:()=>c});var s=o(6540);const n={},r=s.createContext(n);function i(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);