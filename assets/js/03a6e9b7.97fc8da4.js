"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[8646],{289:(e,o,s)=>{s.r(o),s.d(o,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>d,toc:()=>l});var t=s(4848),n=s(8453);const i={title:"Hello, ZIO",description:"Typo ported to ZIO",slug:"hello-zio",authors:[{name:"\xd8yvind Raddum Berg",url:"https://github.com/oyvindberg",image_url:"https://github.com/oyvindberg.png"}],tags:["typo","zio"],image:"https://i.imgur.com/mErPwqL.png",hide_table_of_contents:!1},r=void 0,d={permalink:"/typo/blog/hello-zio",source:"@site/blog/2023-11-24-hello-zio.md",title:"Hello, ZIO",description:"Typo ported to ZIO",date:"2023-11-24T00:00:00.000Z",tags:[{label:"typo",permalink:"/typo/blog/tags/typo"},{label:"zio",permalink:"/typo/blog/tags/zio"}],readingTime:1.8,hasTruncateMarker:!0,authors:[{name:"\xd8yvind Raddum Berg",url:"https://github.com/oyvindberg",image_url:"https://github.com/oyvindberg.png",imageURL:"https://github.com/oyvindberg.png"}],frontMatter:{title:"Hello, ZIO",description:"Typo ported to ZIO",slug:"hello-zio",authors:[{name:"\xd8yvind Raddum Berg",url:"https://github.com/oyvindberg",image_url:"https://github.com/oyvindberg.png",imageURL:"https://github.com/oyvindberg.png"}],tags:["typo","zio"],image:"https://i.imgur.com/mErPwqL.png",hide_table_of_contents:!1},unlisted:!1,prevItem:{title:"The compilation cost of implicits",permalink:"/typo/blog/the-cost-of-implicits"}},a={authorsImageUrls:[void 0]},l=[{value:"Never heard of Typo?",id:"never-heard-of-typo",level:3},{value:"Maturity",id:"maturity",level:3},{value:"Implemented missing features in <code>zio-jdbc</code>",id:"implemented-missing-features-in-zio-jdbc",level:3},{value:"Repository signatures",id:"repository-signatures",level:3},{value:"<code>zio-schema</code> is not used",id:"zio-schema-is-not-used",level:3},{value:"Also support for <code>zio-json</code>",id:"also-support-for-zio-json",level:3}];function c(e){const o={a:"a",code:"code",em:"em",h3:"h3",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(o.p,{children:["Thanks to the efforts of Jules Ivanic in ",(0,t.jsx)(o.a,{href:"https://github.com/oyvindberg/typo/pull/57",children:"PR #57"}),",\nTypo now supports using ",(0,t.jsx)(o.code,{children:"zio-jdbc"})," as a database library."]}),"\n",(0,t.jsx)(o.h3,{id:"never-heard-of-typo",children:"Never heard of Typo?"}),"\n",(0,t.jsxs)(o.p,{children:["You can check out the ",(0,t.jsx)(o.a,{href:"https://oyvindberg.github.io/typo/docs/",children:"introduction"}),".\nEssentially it's a code generator for database access code, which makes PostgreSQL integration type-safe and wonderful to use."]}),"\n",(0,t.jsx)(o.h3,{id:"maturity",children:"Maturity"}),"\n",(0,t.jsxs)(o.p,{children:["Note that ",(0,t.jsx)(o.code,{children:"zio-jdbc"})," is a bit less mature than ",(0,t.jsx)(o.code,{children:"doobie"})," and ",(0,t.jsx)(o.code,{children:"anorm"}),", so it's a bit more likely to be some rough edges.\nIn particular, it handles nullable values ",(0,t.jsx)(o.a,{href:"https://github.com/zio/zio-jdbc/issues/188",children:"imperfectly"}),".\nWe fixed a bunch of issues while working on this PR, so it should be pretty close."]}),"\n",(0,t.jsxs)(o.h3,{id:"implemented-missing-features-in-zio-jdbc",children:["Implemented missing features in ",(0,t.jsx)(o.code,{children:"zio-jdbc"})]}),"\n",(0,t.jsxs)(o.p,{children:[(0,t.jsx)(o.code,{children:"zio-jdbc"})," does not support postgres arrays, and it does not support\nthe ",(0,t.jsx)(o.a,{href:"/docs/other-features/streaming-inserts",children:"COPY API for streaming inserts"}),"."]}),"\n",(0,t.jsx)(o.p,{children:"Typo outputs code which implements both of these features."}),"\n",(0,t.jsxs)(o.p,{children:["This can likely be upstreamed as a postgres integration module in ",(0,t.jsx)(o.code,{children:"zio-jdbc"})," at some point."]}),"\n",(0,t.jsx)(o.h3,{id:"repository-signatures",children:"Repository signatures"}),"\n",(0,t.jsx)(o.p,{children:"To give a taste of the code you'll get, consider this repository definition:"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-scala",children:"trait AddressRepo {\n  def delete(addressid: AddressId): ZIO[ZConnection, Throwable, Boolean]\n  def delete: DeleteBuilder[AddressFields, AddressRow]\n  def insert(unsaved: AddressRow): ZIO[ZConnection, Throwable, AddressRow]\n  def insertStreaming(unsaved: ZStream[ZConnection, Throwable, AddressRow], batchSize: Int): ZIO[ZConnection, Throwable, Long]\n  def insert(unsaved: AddressRowUnsaved): ZIO[ZConnection, Throwable, AddressRow]\n  /* NOTE: this functionality requires PostgreSQL 16 or later! */\n  def insertUnsavedStreaming(unsaved: ZStream[ZConnection, Throwable, AddressRowUnsaved], batchSize: Int): ZIO[ZConnection, Throwable, Long]\n  def select: SelectBuilder[AddressFields, AddressRow]\n  def selectAll: ZStream[ZConnection, Throwable, AddressRow]\n  def selectById(addressid: AddressId): ZIO[ZConnection, Throwable, Option[AddressRow]]\n  def selectByIds(addressids: Array[AddressId]): ZStream[ZConnection, Throwable, AddressRow]\n  def update(row: AddressRow): ZIO[ZConnection, Throwable, Boolean]\n  def update: UpdateBuilder[AddressFields, AddressRow]\n  def upsert(unsaved: AddressRow): ZIO[ZConnection, Throwable, UpdateResult[AddressRow]]\n}\n"})}),"\n",(0,t.jsxs)(o.p,{children:["Notice how the signatures use ",(0,t.jsx)(o.code,{children:"ZIO"}),", ",(0,t.jsx)(o.code,{children:"ZStream"}),", ",(0,t.jsx)(o.code,{children:"ZConnection"}),"."]}),"\n",(0,t.jsxs)(o.h3,{id:"zio-schema-is-not-used",children:[(0,t.jsx)(o.code,{children:"zio-schema"})," is not used"]}),"\n",(0,t.jsxs)(o.p,{children:["We opted to ",(0,t.jsx)(o.em,{children:"not"})," go through zio-schema for the generated code. It was not clear that it was possible to implement all\nPostgreSQL features through ",(0,t.jsx)(o.code,{children:"zio-schema"}),", and we wanted to generate code which is as ",(0,t.jsx)(o.a,{href:"/docs/other-features/faster-compilation",children:"fast to compile"})," as possible."]}),"\n",(0,t.jsxs)(o.h3,{id:"also-support-for-zio-json",children:["Also support for ",(0,t.jsx)(o.code,{children:"zio-json"})]}),"\n",(0,t.jsxs)(o.p,{children:["Typo supports generating ",(0,t.jsx)(o.a,{href:"/docs/other-features/json",children:"JSON codecs"})," for all the row types..\nThe PR also adds support for ",(0,t.jsx)(o.code,{children:"zio-json"}),", so you can get codecs like this:"]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-scala",children:"object AddressRow {\n  implicit lazy val jsonDecoder: JsonDecoder[AddressRow] = ???\n  implicit lazy val jsonEncoder: JsonEncoder[AddressRow] = ???\n}\n"})})]})}function h(e={}){const{wrapper:o}={...(0,n.R)(),...e.components};return o?(0,t.jsx)(o,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,o,s)=>{s.d(o,{R:()=>r,x:()=>d});var t=s(6540);const n={},i=t.createContext(n);function r(e){const o=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function d(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),t.createElement(i.Provider,{value:o},e.children)}}}]);