"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[398],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(n),y=o,m=u["".concat(c,".").concat(y)]||u[y]||f[y]||s;return n?r.createElement(m,a(a({ref:t},p),{},{components:n})):r.createElement(m,a({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,a=new Array(s);a[0]=y;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:o,a[1]=i;for(var l=2;l<s;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},2399:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>f,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const s={title:"Constraints"},a=void 0,i={unversionedId:"other-features/constraints",id:"other-features/constraints",title:"Constraints",description:"Typo covers a lot of ground in that it should generate all types correctly.",source:"@site/docs/other-features/constraints.md",sourceDirName:"other-features",slug:"/other-features/constraints",permalink:"/typo/docs/other-features/constraints",draft:!1,tags:[],version:"current",frontMatter:{title:"Constraints"},sidebar:"tutorialSidebar",previous:{title:"Clickable links",permalink:"/typo/docs/other-features/clickable-links"},next:{title:"Patterns: The multi-repo",permalink:"/typo/docs/patterns/multi-repo"}},c={},l=[],p={toc:l},u="wrapper";function f(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Typo covers a lot of ground in that it should generate all types correctly.\nHowever, to safely insert or update data into PostgreSQL, you also need to satisfy contraints.\nTypo does a good job a helping out with foreign keys, but there are other types of constraints as well."),(0,o.kt)("p",null,"For now the constraints are picked up and output as field comments for the ",(0,o.kt)("inlineCode",{parentName:"p"},"Row")," types."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import adventureworks.person.businessentity.BusinessentityId\n\ncase class PersonRow(\n  /** Primary key for Person records.\n      Points to [[businessentity.BusinessentityRow.businessentityid]] */\n  businessentityid: BusinessentityId,\n  /** Primary type of person: SC = Store Contact, IN = Individual (retail) customer, SP = Sales person, EM = Employee (non-sales), VC = Vendor contact, GC = General contact\n      Constraint CK_Person_PersonType affecting columns \"persontype\":  (((persontype IS NULL) OR (upper((persontype)::text) = ANY (ARRAY['SC'::text, 'VC'::text, 'IN'::text, 'EM'::text, 'SP'::text, 'GC'::text])))) */\n  /** 0 = Contact does not wish to receive e-mail promotions, 1 = Contact does wish to receive e-mail promotions from AdventureWorks, 2 = Contact does wish to receive e-mail promotions from AdventureWorks and selected partners.\n      Constraint CK_Person_EmailPromotion affecting columns \"emailpromotion\":  (((emailpromotion >= 0) AND (emailpromotion <= 2))) */\n  emailpromotion: Int,\n)\n")),(0,o.kt)("p",null,"In the future, we can generate types for check constraints such as these to force you to use them correctly.\nit's not implemented yet, however."))}f.isMDXComponent=!0}}]);