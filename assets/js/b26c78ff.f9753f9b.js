"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[4967],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),i=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=i(e.components);return n.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),m=i(r),y=o,f=m["".concat(l,".").concat(y)]||m[y]||u[y]||a;return r?n.createElement(f,s(s({ref:t},p),{},{components:r})):n.createElement(f,s({ref:t},p))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,s=new Array(a);s[0]=y;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[m]="string"==typeof e?e:o,s[1]=c;for(var i=2;i<a;i++)s[i]=r[i];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}y.displayName="MDXCreateElement"},2146:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>i});var n=r(7462),o=(r(7294),r(3905));const a={title:"Picking subsets of relations with Selector"},s=void 0,c={unversionedId:"customization/selector",id:"customization/selector",title:"Picking subsets of relations with Selector",description:"For much of the customization, you select sets of relations, or enable particular pieces of code generation for a set of relations.",source:"@site/docs/customization/selector.md",sourceDirName:"customization",slug:"/customization/selector",permalink:"/typo/docs/customization/selector",draft:!1,tags:[],version:"current",frontMatter:{title:"Picking subsets of relations with Selector"},sidebar:"tutorialSidebar",previous:{title:"Customize column types",permalink:"/typo/docs/customization/customize-types"}},l={},i=[{value:"Pick relations by name or by schema",id:"pick-relations-by-name-or-by-schema",level:2},{value:"Selectors can be inverted",id:"selectors-can-be-inverted",level:3},{value:"Selectors are also composable:",id:"selectors-are-also-composable",level:3}],p={toc:i},m="wrapper";function u(e){let{components:t,...r}=e;return(0,o.kt)(m,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"For much of the customization, you select sets of relations, or enable particular pieces of code generation for a set of relations."),(0,o.kt)("p",null,"In order to make this convenient, there is a ",(0,o.kt)("inlineCode",{parentName:"p"},"Selector")," data type."),(0,o.kt)("h2",{id:"pick-relations-by-name-or-by-schema"},"Pick relations by name or by schema"),(0,o.kt)("p",null,"You can pick relations by expressing with ",(0,o.kt)("inlineCode",{parentName:"p"},"Selector")," what you want:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import typo.*\n\nval personAndPet0 = Selector.fullRelationNames("myschema.person", "myschemapet") // picks exactly these tables\nval personAndPet = Selector.relationNames("person", "pet") // picks these regardless of schema\nval mySchema = Selector.schemas("myschema") // picks all relations in schema\n\n// heaviest syntax, but most flexible\nval custom: Selector = relName => relName.schema.exists(_.contains("foo")) && relName.name.contains("bar")\n\n')),(0,o.kt)("h3",{id:"selectors-can-be-inverted"},"Selectors can be inverted"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'!Selector.schemas("myschema") // matches everything except schema "myschema"\n')),(0,o.kt)("h3",{id:"selectors-are-also-composable"},"Selectors are also composable:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"// picks relations which are called `person` or `pet` AND are in the `myschema` schema\npersonAndPet and mySchema\n\n// picks those who are *both* called `person` or `pet` OR are in the `myschema` schema. \n// This will typically select more relations\npersonAndPet or mySchema \n")),(0,o.kt)("p",null,"The and/or names follows boolean logic, and may actually be a bit counter-intuitive in this particular context. Suggestions welcome to improve naming"))}u.isMDXComponent=!0}}]);