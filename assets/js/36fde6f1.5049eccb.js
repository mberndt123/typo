"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[334],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),y=a,f=u["".concat(l,".").concat(y)]||u[y]||m[y]||i;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=y;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},8617:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const i={title:"Patterns: Dynamic queries"},o=void 0,s={unversionedId:"patterns/dynamic-queries",id:"patterns/dynamic-queries",title:"Patterns: Dynamic queries",description:"If you use sql files, there is a very high chance you'll want some queries to",source:"@site/docs/patterns/dynamic-queries.md",sourceDirName:"patterns",slug:"/patterns/dynamic-queries",permalink:"/typo/docs/patterns/dynamic-queries",draft:!1,tags:[],version:"current",frontMatter:{title:"Patterns: Dynamic queries"},sidebar:"tutorialSidebar",previous:{title:"Patterns: The multi-repo",permalink:"/typo/docs/patterns/multi-repo"},next:{title:"Customizing typo",permalink:"/typo/docs/customization/overview"}},l={},c=[{value:"What can be dynamic?",id:"what-can-be-dynamic",level:2}],p={toc:c},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"If you use ",(0,a.kt)("a",{parentName:"p",href:"/typo/docs/what-is/sql-is-king"},"sql files"),", there is a very high chance you'll want some queries to\na bit dynamic. The way forward here is to move the dynamism into the sql itself. "),(0,a.kt)("p",null,"A frequently used pattern is a query with an optional filter that selects all rows by default. This can be achieved using a IS NULL construct.\nHere is an example of a query with optional age and name filters:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT p.title, p.firstname, p.middlename, p.lastname\nFROM person.person p\nWHERE :"first_name?" = p.firstname OR :first_name IS NULL \n')),(0,a.kt)("p",null,"Will generate this repo:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"import adventureworks.person_dynamic.PersonDynamicSqlRow\nimport java.sql.Connection\n\ntrait PersonDynamicSqlRepo {\n  def apply(firstName: Option[String])(implicit c: Connection): List[PersonDynamicSqlRow]\n}\n")),(0,a.kt)("p",null,"Note that the sql query needs an explicit cast to figure out the type of the ",(0,a.kt)("inlineCode",{parentName:"p"},"first_name")," parameter since it's compared with ",(0,a.kt)("inlineCode",{parentName:"p"},"NULL"),"."),(0,a.kt)("h2",{id:"what-can-be-dynamic"},"What can be dynamic?"),(0,a.kt)("p",null,"You can only use this mechanism for this which are templated into SQL as parameters.\nIt's not possible to use it decide keywords, column names and so on, unfortunately."))}m.isMDXComponent=!0}}]);