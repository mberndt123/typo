"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[863],{3905:(e,t,s)=>{s.d(t,{Zo:()=>l,kt:()=>m});var r=s(7294);function n(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}function a(e,t){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),s.push.apply(s,r)}return s}function o(e){for(var t=1;t<arguments.length;t++){var s=null!=arguments[t]?arguments[t]:{};t%2?a(Object(s),!0).forEach((function(t){n(e,t,s[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):a(Object(s)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(s,t))}))}return e}function d(e,t){if(null==e)return{};var s,r,n=function(e,t){if(null==e)return{};var s,r,n={},a=Object.keys(e);for(r=0;r<a.length;r++)s=a[r],t.indexOf(s)>=0||(n[s]=e[s]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)s=a[r],t.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(n[s]=e[s])}return n}var i=r.createContext({}),p=function(e){var t=r.useContext(i),s=t;return e&&(s="function"==typeof e?e(t):o(o({},t),e)),s},l=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var s=e.components,n=e.mdxType,a=e.originalType,i=e.parentName,l=d(e,["components","mdxType","originalType","parentName"]),c=p(s),y=n,m=c["".concat(i,".").concat(y)]||c[y]||u[y]||a;return s?r.createElement(m,o(o({ref:t},l),{},{components:s})):r.createElement(m,o({ref:t},l))}));function m(e,t){var s=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=s.length,o=new Array(a);o[0]=y;var d={};for(var i in t)hasOwnProperty.call(t,i)&&(d[i]=t[i]);d.originalType=e,d[c]="string"==typeof e?e:n,o[1]=d;for(var p=2;p<a;p++)o[p]=s[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,s)}y.displayName="MDXCreateElement"},6422:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>d,toc:()=>p});var r=s(7462),n=(s(7294),s(3905));const a={title:"Patterns: The multi-repo"},o=void 0,d={unversionedId:"patterns",id:"patterns",title:"Patterns: The multi-repo",description:"There has been some comments about how the generated repositories do not match with peoples preferences of what a repository should be.",source:"@site/docs/patterns.md",sourceDirName:".",slug:"/patterns",permalink:"/typo/docs/patterns",draft:!1,tags:[],version:"current",frontMatter:{title:"Patterns: The multi-repo"},sidebar:"tutorialSidebar",previous:{title:"customization",permalink:"/typo/docs/customization"},next:{title:"usage",permalink:"/typo/docs/usage"}},i={},p=[{value:"So you write code yourself",id:"so-you-write-code-yourself",level:3},{value:"Example",id:"example",level:3}],l={toc:p},c="wrapper";function u(e){let{components:t,...s}=e;return(0,n.kt)(c,(0,r.Z)({},l,s,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"There has been some comments about how ",(0,n.kt)("a",{parentName:"p",href:"/typo/docs/what-is/relations"},"the generated repositories")," do not match with peoples preferences of what a repository should be.\nFor instance you may prefer that your repositories coordinate multiple tables."),(0,n.kt)("p",null,"And that's more than fair - Often you need to coordinate multiple tables in a transaction.\nThe only snag is that typo does not have the knowledge to write that code for you."),(0,n.kt)("h3",{id:"so-you-write-code-yourself"},"So you write code yourself"),(0,n.kt)("p",null,"Enter the multi-repo pattern! "),(0,n.kt)("p",null,"Here you take low-level typo repositories as parameters, and you write the higher-level flow yourself. "),(0,n.kt)("p",null,"You still get huge benefits from using typo in this case:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"All of this is typesafe"),(0,n.kt)("li",{parentName:"ul"},"You get perfect auto-complete from your IDE"),(0,n.kt)("li",{parentName:"ul"},"Strongly typed ",(0,n.kt)("a",{parentName:"li",href:"/typo/docs/type-safety/id-types"},"Id types")," and ",(0,n.kt)("a",{parentName:"li",href:"/typo/docs/type-safety/type-flow"},"type flow")," ensure that you have to follow foreign keys correctly  "),(0,n.kt)("li",{parentName:"ul"},"It's fairly readable. "),(0,n.kt)("li",{parentName:"ul"},"It's testable! You can even wire in ",(0,n.kt)("a",{parentName:"li",href:"/typo/docs/other-features/testing-with-stubs"},"stub repositories")," and test it all without a running database.")),(0,n.kt)("p",null,"Just have a look at the example and think how long it would take you to write this without typo."),(0,n.kt)("p",null,"With typo, this example worked ",(0,n.kt)("em",{parentName:"p"},"the first time it was ran"),"."),(0,n.kt)("h3",{id:"example"},"Example"),(0,n.kt)("p",null,"The example repo below exposes one method, which coordinates updates to four tables. "),(0,n.kt)("p",null,"The details of what is done is probably not too important, but I tried to comment it anyway."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},"import adventureworks.person.address.*\nimport adventureworks.person.addresstype.*\nimport adventureworks.person.businessentityaddress.*\nimport adventureworks.person.person.*\nimport adventureworks.public.Name\n\nimport java.sql.Connection\n\ncase class PersonWithAddresses(person: PersonRow, addresses: Map[Name, AddressRow])\n\ncase class PersonWithAddressesRepo(\n    personRepo: PersonRepo,\n    businessentityAddressRepo: BusinessentityaddressRepo,\n    addresstypeRepo: AddresstypeRepo,\n    addressRepo: AddressRepo\n) {\n\n  /* A person can have a bunch of addresses registered,\n   * and they each have an address type (BILLING, HOME, etc).\n   *\n   * This method syncs `PersonWithAddresses#addresses` to postgres,\n   * so that old attached addresses are removed,\n   * and the given addresses are attached with the chosen type\n   */\n  def upsert(pa: PersonWithAddresses)(implicit c: Connection): List[BusinessentityaddressRow] = {\n    // update person\n    personRepo.upsert(pa.person)\n    // update stored addresses\n    pa.addresses.toList.foreach { case (_, address) => addressRepo.update(address) }\n\n    // addresses are stored in `PersonWithAddress` by a `Name` which means what type of address it is.\n    // this address type is stored in addresstypeRepo.\n    // In order for foreign keys to align, we need to translate from names to ids, and create rows as necessary\n    val oldStoredAddressTypes: Map[Name, AddresstypeId] =\n      addresstypeRepo.select\n        .where(r => r.name in pa.addresses.keys.toArray)\n        .toList\n        .map(x => (x.name, x.addresstypeid))\n        .toMap\n\n    val currentAddressesByType: Map[AddresstypeId, AddressRow] =\n      pa.addresses.map { case (addressTypeName, wanted) =>\n        oldStoredAddressTypes.get(addressTypeName) match {\n          case Some(addresstypeId) => (addresstypeId, wanted)\n          case None =>\n            val inserted = addresstypeRepo.insert(AddresstypeRowUnsaved(name = addressTypeName))\n            (inserted.addresstypeid, wanted)\n        }\n      }\n\n    // discover existing addresses attached to person\n    val oldAttachedAddresses: Map[(AddressId, AddresstypeId), BusinessentityaddressRow] =\n      businessentityAddressRepo.select\n        .where(x => x.businessentityid === pa.person.businessentityid)\n        .toList\n        .map(x => ((x.addressid, x.addresstypeid), x))\n        .toMap\n\n    // unattach old attached addresses\n    oldAttachedAddresses.foreach { case (_, ba) =>\n      currentAddressesByType.get(ba.addresstypeid) match {\n        case Some(address) if address.addressid == ba.addressid =>\n        case _ =>\n          businessentityAddressRepo.delete(ba.compositeId)\n      }\n    }\n    // attach new addresses\n    currentAddressesByType.map { case (addresstypeId, address) =>\n      oldAttachedAddresses.get((address.addressid, addresstypeId)) match {\n        case Some(bea) => bea\n        case None =>\n          val newRow = BusinessentityaddressRowUnsaved(pa.person.businessentityid, address.addressid, addresstypeId)\n          businessentityAddressRepo.insert(newRow)\n      }\n    }.toList\n  }\n}\n")))}u.isMDXComponent=!0}}]);