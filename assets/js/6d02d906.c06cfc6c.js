"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[9925],{4755:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"hello-zio","metadata":{"permalink":"/typo/blog/hello-zio","source":"@site/blog/2023-11-24-hello-zio.md","title":"Hello, ZIO","description":"Typo ported to ZIO","date":"2023-11-24T00:00:00.000Z","formattedDate":"November 24, 2023","tags":[{"label":"typo","permalink":"/typo/blog/tags/typo"},{"label":"zio","permalink":"/typo/blog/tags/zio"}],"readingTime":1.8,"hasTruncateMarker":true,"authors":[{"name":"\xd8yvind Raddum Berg","url":"https://github.com/oyvindberg","image_url":"https://github.com/oyvindberg.png","imageURL":"https://github.com/oyvindberg.png"}],"frontMatter":{"title":"Hello, ZIO","description":"Typo ported to ZIO","slug":"hello-zio","authors":[{"name":"\xd8yvind Raddum Berg","url":"https://github.com/oyvindberg","image_url":"https://github.com/oyvindberg.png","imageURL":"https://github.com/oyvindberg.png"}],"tags":["typo","zio"],"image":"https://i.imgur.com/mErPwqL.png","hide_table_of_contents":false}},"content":"Thanks to the efforts of Jules Ivanic in [PR #57](https://github.com/oyvindberg/typo/pull/57),\\nTypo now supports using `zio-jdbc` as a database library.\\n\\n### Never heard of Typo? \\n\\nYou can check out the [introduction](https://oyvindberg.github.io/typo/docs/).\\nEssentially it\'s a code generator for database access code, which makes PostgreSQL integration type-safe and wonderful to use.\\n\\n### Maturity\\nNote that `zio-jdbc` is a bit less mature than `doobie` and `anorm`, so it\'s a bit more likely to be some rough edges.\\nIn particular, it handles nullable values [imperfectly](https://github.com/zio/zio-jdbc/issues/188).\\nWe fixed a bunch of issues while working on this PR, so it should be pretty close.\\n\\n### Implemented missing features in `zio-jdbc`\\n\\n`zio-jdbc` does not support postgres arrays, and it does not support\\nthe [COPY API for streaming inserts](/docs/other-features/streaming-inserts).\\n\\nTypo outputs code which implements both of these features.\\n\\nThis can likely be upstreamed as a postgres integration module in `zio-jdbc` at some point.\\n\\n\x3c!-- truncate --\x3e\\n\\n### Repository signatures\\n\\nTo give a taste of the code you\'ll get, consider this repository definition:\\n\\n```scala\\ntrait AddressRepo {\\n  def delete(addressid: AddressId): ZIO[ZConnection, Throwable, Boolean]\\n  def delete: DeleteBuilder[AddressFields, AddressRow]\\n  def insert(unsaved: AddressRow): ZIO[ZConnection, Throwable, AddressRow]\\n  def insertStreaming(unsaved: ZStream[ZConnection, Throwable, AddressRow], batchSize: Int): ZIO[ZConnection, Throwable, Long]\\n  def insert(unsaved: AddressRowUnsaved): ZIO[ZConnection, Throwable, AddressRow]\\n  /* NOTE: this functionality requires PostgreSQL 16 or later! */\\n  def insertUnsavedStreaming(unsaved: ZStream[ZConnection, Throwable, AddressRowUnsaved], batchSize: Int): ZIO[ZConnection, Throwable, Long]\\n  def select: SelectBuilder[AddressFields, AddressRow]\\n  def selectAll: ZStream[ZConnection, Throwable, AddressRow]\\n  def selectById(addressid: AddressId): ZIO[ZConnection, Throwable, Option[AddressRow]]\\n  def selectByIds(addressids: Array[AddressId]): ZStream[ZConnection, Throwable, AddressRow]\\n  def update(row: AddressRow): ZIO[ZConnection, Throwable, Boolean]\\n  def update: UpdateBuilder[AddressFields, AddressRow]\\n  def upsert(unsaved: AddressRow): ZIO[ZConnection, Throwable, UpdateResult[AddressRow]]\\n}\\n```\\n\\nNotice how the signatures use `ZIO`, `ZStream`, `ZConnection`.\\n\\n### `zio-schema` is not used\\n\\nWe opted to *not* go through zio-schema for the generated code. It was not clear that it was possible to implement all\\nPostgreSQL features through `zio-schema`, and we wanted to generate code which is as [fast to compile](/docs/other-features/faster-compilation) as possible.\\n\\n### Also support for `zio-json`\\n\\nTypo supports generating [JSON codecs](/docs/other-features/json) for all the row types..\\nThe PR also adds support for `zio-json`, so you can get codecs like this:\\n\\n```scala\\nobject AddressRow {\\n  implicit lazy val jsonDecoder: JsonDecoder[AddressRow] = ???\\n  implicit lazy val jsonEncoder: JsonEncoder[AddressRow] = ???\\n}\\n```"}]}')}}]);