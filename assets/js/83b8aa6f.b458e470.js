"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[40],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>y});var o=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,o)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function u(e,t){if(null==e)return{};var a,o,n=function(e,t){if(null==e)return{};var a,o,n={},r=Object.keys(e);for(o=0;o<r.length;o++)a=r[o],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)a=r[o],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=o.createContext({}),s=function(e){var t=o.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=s(e.components);return o.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,l=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),d=s(a),m=n,y=d["".concat(l,".").concat(m)]||d[m]||p[m]||r;return a?o.createElement(y,i(i({ref:t},c),{},{components:a})):o.createElement(y,i({ref:t},c))}));function y(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,i=new Array(r);i[0]=m;var u={};for(var l in t)hasOwnProperty.call(t,l)&&(u[l]=t[l]);u.originalType=e,u[d]="string"==typeof e?e:n,i[1]=u;for(var s=2;s<r;s++)i[s]=a[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,a)}m.displayName="MDXCreateElement"},4283:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>u,toc:()=>s});var o=a(7462),n=(a(7294),a(3905));const r={title:"Testing with random values"},i=void 0,u={unversionedId:"other-features/testing-with-random-values",id:"other-features/testing-with-random-values",title:"Testing with random values",description:"This covers a lot of interesting ground, test-wise.",source:"@site/docs/other-features/testing-with-random-values.md",sourceDirName:"other-features",slug:"/other-features/testing-with-random-values",permalink:"/typo/docs/other-features/testing-with-random-values",draft:!1,tags:[],version:"current",frontMatter:{title:"Testing with random values"},sidebar:"tutorialSidebar",previous:{title:"Testing with stubs",permalink:"/typo/docs/other-features/testing-with-stubs"},next:{title:"JSON codecs",permalink:"/typo/docs/other-features/json"}},l={},s=[{value:"Usage example",id:"usage-example",level:3},{value:"Comparison with scalacheck",id:"comparison-with-scalacheck",level:3}],c={toc:s},d="wrapper";function p(e){let{components:t,...a}=e;return(0,n.kt)(d,(0,o.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"This covers a lot of interesting ground, test-wise."),(0,n.kt)("p",null,"If you enable ",(0,n.kt)("inlineCode",{parentName:"p"},"enableTestInserts")," in ",(0,n.kt)("inlineCode",{parentName:"p"},"typo.Options")," you now get an ",(0,n.kt)("inlineCode",{parentName:"p"},"testInsert")," class, with a method to insert a row for each table Typo knows about.\nAll values except ids, foreign keys and so on are ",(0,n.kt)("em",{parentName:"p"},"randomly generated"),", but you can override them with named parameters."),(0,n.kt)("p",null,"The idea is that you:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"can easily insert rows for testing"),(0,n.kt)("li",{parentName:"ul"},"can explicitly set the values you ",(0,n.kt)("em",{parentName:"li"},"do")," care about"),(0,n.kt)("li",{parentName:"ul"},"will get random values for the rest"),(0,n.kt)("li",{parentName:"ul"},"are still forced to follow FKs to setup the data graph correctly"),(0,n.kt)("li",{parentName:"ul"},"it's easy to follow those FKs, because after inserting a row you get the persisted version back, including generated IDs"),(0,n.kt)("li",{parentName:"ul"},"can get the same values each time by hard coding the seed ",(0,n.kt)("inlineCode",{parentName:"li"},"new testInsert(new scala.util.Random(0L))"),", or you can run it multiple times with different seeds to see that the random values really do not matter"),(0,n.kt)("li",{parentName:"ul"},"do not need to write ",(0,n.kt)("em",{parentName:"li"},"any")," code to get all this available to you, like the rest of Typo.")),(0,n.kt)("p",null,"In summary, this is a fantastic way of setting up complex test scenarios in the database!"),(0,n.kt)("h3",{id:"usage-example"},"Usage example"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import adventureworks.customtypes.{Defaulted, TypoXml}\nimport adventureworks.production.unitmeasure.UnitmeasureId\nimport adventureworks.testInsert\n\nimport scala.util.Random\n\nval testInsert = new testInsert(new Random(0))\n// testInsert: testInsert = adventureworks.testInsert@8a743a1\n\nval unitmeasure = testInsert.productionUnitmeasure(UnitmeasureId("kgg"))\n// unitmeasure: UnitmeasureRow = UnitmeasureRow(\n//   unitmeasurecode = UnitmeasureId(value = "kgg"),\n//   name = Name(value = "CCzLNHBFHuRvbI1iI19W"),\n//   modifieddate = TypoLocalDateTime(value = 2023-09-26T10:14:08.781867)\n// )\nval productCategory = testInsert.productionProductcategory()\n// productCategory: ProductcategoryRow = ProductcategoryRow(\n//   productcategoryid = ProductcategoryId(value = 5),\n//   name = Name(value = "jGGR8UNWutFRZvWebpA5"),\n//   rowguid = TypoUUID(value = aae6a6b4-5c44-11ee-aa85-0242c0a85002),\n//   modifieddate = TypoLocalDateTime(value = 2023-09-26T10:14:08.781867)\n// )\nval productSubcategory = testInsert.productionProductsubcategory(productCategory.productcategoryid)\n// productSubcategory: ProductsubcategoryRow = ProductsubcategoryRow(\n//   productsubcategoryid = ProductsubcategoryId(value = 5),\n//   productcategoryid = ProductcategoryId(value = 5),\n//   name = Name(value = "WHfyqts0coJXQqPyuxbr"),\n//   rowguid = TypoUUID(value = aaee1160-5c44-11ee-aa85-0242c0a85002),\n//   modifieddate = TypoLocalDateTime(value = 2023-09-26T10:14:08.781867)\n// )\nval productModel = testInsert.productionProductmodel(catalogdescription = Some(new TypoXml("<xml/>")), instructions = Some(new TypoXml("<instructions/>")))\n// productModel: ProductmodelRow = ProductmodelRow(\n//   productmodelid = ProductmodelId(value = 5),\n//   name = Name(value = "589wyJzS2SuiHrAOB2Ru"),\n//   catalogdescription = Some(value = TypoXml(value = "<xml/>")),\n//   instructions = Some(value = TypoXml(value = "<instructions/>")),\n//   rowguid = TypoUUID(value = aaf6b43c-5c44-11ee-aa85-0242c0a85002),\n//   modifieddate = TypoLocalDateTime(value = 2023-09-26T10:14:08.781867)\n// )\ntestInsert.productionProduct(\n  sizeunitmeasurecode = Some(unitmeasure.unitmeasurecode),\n  weightunitmeasurecode = Some(unitmeasure.unitmeasurecode),\n  `class` = Some("H "),\n  style = Some("W "),\n  productsubcategoryid = Some(productSubcategory.productsubcategoryid),\n  productmodelid = Some(productModel.productmodelid)\n)\n// res1: ProductRow = ProductRow(\n//   productid = ProductId(value = 5),\n//   name = Name(value = "vBbFbQPNB7ZuKSWpBejT"),\n//   productnumber = "wv1NdpH7sjiP63hvGdgZ",\n//   makeflag = Flag(value = true),\n//   finishedgoodsflag = Flag(value = true),\n//   color = None,\n//   safetystocklevel = TypoShort(value = 21170),\n//   reorderpoint = TypoShort(value = 27774),\n//   standardcost = 0.9043197434746348,\n//   listprice = 0.2871518999993117,\n//   size = None,\n//   sizeunitmeasurecode = Some(value = UnitmeasureId(value = "kgg")),\n//   weightunitmeasurecode = Some(value = UnitmeasureId(value = "kgg")),\n//   weight = Some(value = 0.32),\n//   daystomanufacture = 412901507,\n//   productline = None,\n//   class = Some(value = "H "),\n//   style = Some(value = "W "),\n//   productsubcategoryid = Some(value = ProductsubcategoryId(value = 5)),\n//   productmodelid = Some(value = ProductmodelId(value = 5)),\n//   sellstartdate = TypoLocalDateTime(value = 2003-07-12T04:09:01),\n//   sellenddate = None,\n//   discontinueddate = None,\n//   rowguid = TypoUUID(value = aaffcb58-5c44-11ee-aa85-0242c0a85002),\n//   modifieddate = TypoLocalDateTime(value = 2023-09-26T10:14:08.781867)\n// )\n')),(0,n.kt)("h3",{id:"comparison-with-scalacheck"},"Comparison with scalacheck"),(0,n.kt)("p",null,"This does look a lot like scalacheck indeed."),(0,n.kt)("p",null,"But look closer, there are:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"no implicits"),(0,n.kt)("li",{parentName:"ul"},"no integration glue code with test libraries"),(0,n.kt)("li",{parentName:"ul"},"almost no imports, you need to mention very few types"),(0,n.kt)("li",{parentName:"ul"},"no keeping track of all the possible row types and repositories"),(0,n.kt)("li",{parentName:"ul"},"and so on")),(0,n.kt)("p",null,"This feature is meant to be easy to use, and I really think/hope it is!"))}p.isMDXComponent=!0}}]);