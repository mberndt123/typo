"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[154],{5929:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>d,toc:()=>c});var n=t(4848),i=t(8453);const r={title:"Customizing Typo"},o=void 0,d={id:"customization/overview",title:"Customizing Typo",description:"All customizations are done through the typo.Options object passed to typo:",source:"@site/docs/customization/overview.md",sourceDirName:"customization",slug:"/customization/overview",permalink:"/typo/docs/customization/overview",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Customizing Typo"},sidebar:"tutorialSidebar",previous:{title:"Patterns: Dynamic queries",permalink:"/typo/docs/patterns/dynamic-queries"},next:{title:"Customize selected relations",permalink:"/typo/docs/customization/customize-selected-relations"}},l={},c=[{value:"All options",id:"all-options",level:2},{value:"Development options",id:"development-options",level:2}];function a(e){const s={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(s.p,{children:["All customizations are done through the ",(0,n.jsx)(s.code,{children:"typo.Options"})," object passed to typo:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-scala",children:'import typo.*\n\nval options = Options(\n  pkg = "org.foo",\n  jsonLibs = List(JsonLibName.PlayJson),\n  dbLib = Some(DbLibName.Anorm),\n  // .. more options here\n)\n\n'})}),"\n",(0,n.jsx)(s.h2,{id:"all-options",children:"All options"}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{children:"Field Name"}),(0,n.jsx)(s.th,{children:"Effect"})]})}),(0,n.jsxs)(s.tbody,{children:[(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"pkg"})}),(0,n.jsx)(s.td,{children:"Specifies the package name for the generated code."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"dbLib"})}),(0,n.jsxs)(s.td,{children:["Defines the database library to use for code generation (anorm, doobie, zio-jdbc or ",(0,n.jsx)(s.code,{children:"None"}),")."]})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"jsonLibs"})}),(0,n.jsx)(s.td,{children:"JSON libraries to generate codecs for (default is empty)."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"silentBanner"})}),(0,n.jsxs)(s.td,{children:["Controls whether to suppress the Typo banner while running Typo (default is ",(0,n.jsx)(s.code,{children:"false"}),")."]})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"fileHeader"})}),(0,n.jsx)(s.td,{children:"Sets the header text that appears at the top of generated files."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"naming"})}),(0,n.jsx)(s.td,{children:"Configures naming conventions for generated code. See section below"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"typeOverride"})}),(0,n.jsx)(s.td,{children:"Defines type overrides for specific database types See section below."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"nullabilityOverride"})}),(0,n.jsx)(s.td,{children:"Defines nullability overrides for specific columns See section below."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"generateMockRepos"})}),(0,n.jsx)(s.td,{children:"Specifies which repositories to generate mock versions for (default is all)."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"enableFieldValue"})}),(0,n.jsxs)(s.td,{children:["Controls whether to enable ",(0,n.jsx)(s.code,{children:"FieldValue"})," code generation for specific repositories (default is disabled)."]})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"enableStreamingInserts"})}),(0,n.jsxs)(s.td,{children:["Controls whether to enable ",(0,n.jsx)(s.a,{href:"/typo/docs/other-features/streaming-inserts",children:"streaming inserts"})]})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"enableTestInserts"})}),(0,n.jsxs)(s.td,{children:["Controls whether to enable ",(0,n.jsx)(s.a,{href:"/typo/docs/other-features/testing-with-random-values",children:"test inserts"})," for specific repositories (default is none)."]})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"enablePrimaryKeyType"})}),(0,n.jsxs)(s.td,{children:["Controls whether to enable ",(0,n.jsx)(s.a,{href:"/typo/docs/type-safety/id-types",children:"primary key types"})," for specific repositories (default is all)."]})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"readonlyRepo"})}),(0,n.jsxs)(s.td,{children:["Specifies whether to generate read-only repositories for specific repositories. Useful when you're working on a part of the system where you only consume certain tables. (default is ",(0,n.jsx)(s.code,{children:"false"})," - all mutable)."]})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"enableDsl"})}),(0,n.jsxs)(s.td,{children:["Enables the ",(0,n.jsx)(s.a,{href:"/typo/docs/what-is/dsl",children:"SQL DSL"})," for code generation (default is ",(0,n.jsx)(s.code,{children:"false"}),")."]})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"keepDependencies"})}),(0,n.jsxs)(s.td,{children:["Specifies whether to generate ",(0,n.jsx)(s.a,{href:"/typo/docs/type-safety/type-flow",children:"table dependencies"})," in generated code even if you didn't select them (default is ",(0,n.jsx)(s.code,{children:"false"}),")."]})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"rewriteDatabase"})}),(0,n.jsx)(s.td,{children:"Let's you perform arbitrary rewrites of database schema snapshot. you can add/remove rows, foreign keys and so on."})]})]})]}),"\n",(0,n.jsx)(s.h2,{id:"development-options",children:"Development options"}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{children:"Field Name"}),(0,n.jsx)(s.th,{children:"Effect"})]})}),(0,n.jsxs)(s.tbody,{children:[(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"debugTypes"})}),(0,n.jsxs)(s.td,{children:["Enables debug mode for types during code generation (default is ",(0,n.jsx)(s.code,{children:"false"}),")."]})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"inlineImplicits"})}),(0,n.jsxs)(s.td,{children:["Controls whether to inline implicits for generated code (default is ",(0,n.jsx)(s.code,{children:"true"}),")."]})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"logger"})}),(0,n.jsx)(s.td,{children:"Specifies the logger to use for logging during code generation (default is console logging). Useful for"})]})]})]})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}},8453:(e,s,t)=>{t.d(s,{R:()=>o,x:()=>d});var n=t(6540);const i={},r=n.createContext(i);function o(e){const s=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(r.Provider,{value:s},e.children)}}}]);