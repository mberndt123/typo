"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[5867],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},y=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(n),y=a,d=m["".concat(l,".").concat(y)]||m[y]||u[y]||r;return n?o.createElement(d,s(s({ref:t},p),{},{components:n})):o.createElement(d,s({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,s=new Array(r);s[0]=y;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[m]="string"==typeof e?e:a,s[1]=i;for(var c=2;c<r;c++)s[c]=n[c];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}y.displayName="MDXCreateElement"},8130:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var o=n(7462),a=(n(7294),n(3905));const r={title:"Customize selected relations"},s=void 0,i={unversionedId:"customization/customize-selected-relations",id:"customization/customize-selected-relations",title:"Customize selected relations",description:"You typically have many more relations in your database than you want to expose to application code.",source:"@site/docs/customization/customize-selected-relations.md",sourceDirName:"customization",slug:"/customization/customize-selected-relations",permalink:"/typo/docs/customization/customize-selected-relations",draft:!1,tags:[],version:"current",frontMatter:{title:"Customize selected relations"},sidebar:"tutorialSidebar",previous:{title:"Customizing Typo",permalink:"/typo/docs/customization/overview"},next:{title:"Customize SQL files",permalink:"/typo/docs/customization/customize-sql-files"}},l={},c=[{value:"<code>Selector</code>",id:"selector",level:2},{value:"Transitive relations",id:"transitive-relations",level:2}],p={toc:c},m="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"You typically have many more relations in your database than you want to expose to application code.\nMaybe you're generating code for just a part of the system, not the whole thing."),(0,a.kt)("p",null,"Typo has a mechanism by which you can choose which relations to generate code for."),(0,a.kt)("p",null,"among the arguments to ",(0,a.kt)("inlineCode",{parentName:"p"},"generateFromDb")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"selector"),", which by default picks all relations except those in the postgres schemas."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"import typo.*\n\ngenerateFromDb(options, selector = Selector.ExcludePostgresInternal)\n")),(0,a.kt)("h2",{id:"selector"},(0,a.kt)("inlineCode",{parentName:"h2"},"Selector")),(0,a.kt)("p",null,"You can pick relations by expressing with ",(0,a.kt)("inlineCode",{parentName:"p"},"Selector")," what you want:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import typo.*\n\nval personAndPet0 = Selector.fullRelationNames("myschema.person", "myschemapet") // picks exactly these tables\nval personAndPet = Selector.relationNames("person", "pet") // picks these regardless of schema\nval mySchema = Selector.schemas("myschema") // picks all relations in schema\n\n// heaviest syntax, but most flexible\nval custom: Selector = relName => relName.schema.exists(_.contains("foo")) && relName.name.contains("bar")\n')),(0,a.kt)("p",null,"Selectors are also composable:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"// picks relations which are called `person` or `pet` AND are in the `myschema` schema\npersonAndPet and mySchema\n\n// picks those who are *both* called `person` or `pet` OR are in the `myschema` schema. \n// This will typically select more relations\npersonAndPet or mySchema \n")),(0,a.kt)("p",null,"The and/or names follows boolean logic, and may actually be a bit counter-intuitive in this particular context. Suggestions welcome to improve naming"),(0,a.kt)("h2",{id:"transitive-relations"},"Transitive relations"),(0,a.kt)("p",null,"So in Typo we say that relations have dependencies, see ",(0,a.kt)("a",{parentName:"p",href:"/typo/docs/type-safety/type-flow"},"flow typing"),". "),(0,a.kt)("p",null,"Say you have some ",(0,a.kt)("a",{parentName:"p",href:"/typo/docs/what-is/sql-is-king"},"sql files")," and have chosen some relations, and some of those have dependencies on other relations.\nTypo can optionally generate code for these dependencies as well. "),(0,a.kt)("p",null,"If you want that, you can  ",(0,a.kt)("a",{parentName:"p",href:"/typo/docs/customization/overview"},"customize")," Typo and set the ",(0,a.kt)("inlineCode",{parentName:"p"},"keepDependencies")," parameter to ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," to generate code for those dependencies as well. "),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"keepDependencies")," is set to ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," by default. If it's left at ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),", you'll only see the ",(0,a.kt)("a",{parentName:"p",href:"/typo/docs/type-safety/id-types"},"primary key types")," for those relations"))}u.isMDXComponent=!0}}]);