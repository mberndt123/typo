"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[122],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),m=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=m(e.components);return a.createElement(l.Provider,{value:n},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=m(t),d=i,f=c["".concat(l,".").concat(d)]||c[d]||p[d]||o;return t?a.createElement(f,r(r({ref:n},u),{},{components:t})):a.createElement(f,r({ref:n},u))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[c]="string"==typeof e?e:i,r[1]=s;for(var m=2;m<o;m++)r[m]=t[m];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7894:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>m});var a=t(7462),i=(t(7294),t(3905));const o={title:"Customize naming"},r=void 0,s={unversionedId:"customization/customize-naming",id:"customization/customize-naming",title:"Customize naming",description:"You provide a typo.Naming instance in typo.Options when running typo.",source:"@site/docs/customization/customize-naming.md",sourceDirName:"customization",slug:"/customization/customize-naming",permalink:"/typo/docs/customization/customize-naming",draft:!1,tags:[],version:"current",frontMatter:{title:"Customize naming"},sidebar:"tutorialSidebar",previous:{title:"Customize SQL files",permalink:"/typo/docs/customization/customize-sql-files"},next:{title:"Customize nullability for parameters and columns",permalink:"/typo/docs/customization/customize-nullability"}},l={},m=[{value:"Customize field names",id:"customize-field-names",level:3},{value:"Customize enum field names",id:"customize-enum-field-names",level:3}],u={toc:m},c="wrapper";function p(e){let{components:n,...t}=e;return(0,i.kt)(c,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"You provide a ",(0,i.kt)("inlineCode",{parentName:"p"},"typo.Naming")," instance in ",(0,i.kt)("inlineCode",{parentName:"p"},"typo.Options")," when running typo.\nThis is responsible for computing all scala names based on names from PostgreSQL."),(0,i.kt)("h3",{id:"customize-field-names"},"Customize field names"),(0,i.kt)("p",null,"As an example, say you you have some weird naming standard in your schemas, for instance ",(0,i.kt)("inlineCode",{parentName:"p"},"id_table")," instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"table_id"),".\nThis is how it can be prettified in the generated scala code"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'import typo.*\n\nval optsCustomId = Options(\n  pkg = "org.foo",\n  dbLib = None,\n  naming = pkg => new Naming(pkg) {\n    override def field(name: db.ColName): sc.Ident = {\n      val newName = if (name.value.startsWith("id_")) db.ColName(name.value.drop(3) + "_id") else name\n      super.field(newName)\n    }\n  }\n)\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'// this incantation demos the effect, you don\'t have to write this in your code\nsc.renderTree(optsCustomId.naming(sc.QIdent(optsCustomId.pkg)).field(db.ColName("id_flaff")))\n// res0: String = "flaffId"\n')),(0,i.kt)("h3",{id:"customize-enum-field-names"},"Customize enum field names"),(0,i.kt)("p",null,"Let's say you get a name clash between a string enum value and a typeclass instance name.\nThis is something which can happen currently"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'val optsCustomEnum = Options(\n  pkg = "org.foo",\n  dbLib = None,\n  naming = pkg => new Naming(pkg) {\n    override def enumValue(name: String): sc.Ident =\n      sc.Ident(if (name == "writes") "Writes" else name)\n  }\n)\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'// this incantation demos the effect, you don\'t have to write this in your code\nsc.renderTree(optsCustomEnum.naming(sc.QIdent(optsCustomEnum.pkg)).enumValue("writes"))\n// res1: String = "Writes"\n')))}p.isMDXComponent=!0}}]);