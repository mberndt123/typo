"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[6916],{2599:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>y,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var s=n(4848),r=n(8453);const o={title:"Primary key types"},i=void 0,a={id:"type-safety/id-types",title:"Primary key types",description:"For every table with primary keys, a corresponding id type is created.",source:"@site/docs/type-safety/id-types.md",sourceDirName:"type-safety",slug:"/type-safety/id-types",permalink:"/typo/docs/type-safety/id-types",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Primary key types"},sidebar:"tutorialSidebar",previous:{title:"Limitations",permalink:"/typo/docs/limitations"},next:{title:"String enums",permalink:"/typo/docs/type-safety/string-enums"}},p={},d=[{value:"Composite keys",id:"composite-keys",level:2},{value:"I don&#39;t want these",id:"i-dont-want-these",level:2}];function c(e){const t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"For every table with primary keys, a corresponding id type is created."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:"case class PgNamespaceId(value: /* oid */ Long) extends AnyVal\nobject PgNamespaceId {\n  // ... instances\n}\n"})}),"\n",(0,s.jsx)(t.h2,{id:"composite-keys",children:"Composite keys"}),"\n",(0,s.jsx)(t.p,{children:"Composite keys are also supported, and the id type is a product type in that case."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:"import adventureworks.customtypes.TypoLocalDate\nimport adventureworks.humanresources.employeedepartmenthistory.EmployeedepartmenthistoryId\nimport adventureworks.humanresources.department.DepartmentId\nimport adventureworks.humanresources.shift.ShiftId\nimport adventureworks.person.businessentity.BusinessentityId\n\n/** Type for the composite primary key of table `humanresources.employeedepartmenthistory` */\ncase class EmployeedepartmenthistoryId(\n    businessentityid: BusinessentityId, \n    startdate: TypoLocalDate, \n    departmentid: DepartmentId, \n    shiftid: ShiftId\n)\nobject EmployeedepartmenthistoryId {\n  // ...instances\n}\n"})}),"\n",(0,s.jsx)(t.h2,{id:"i-dont-want-these",children:"I don't want these"}),"\n",(0,s.jsxs)(t.p,{children:["if you have some tables where you don't want the type-safety this brings, you can ",(0,s.jsx)(t.a,{href:"/typo/docs/customization/overview",children:"customize"}),"\ncode generation by tweaking ",(0,s.jsx)(t.code,{children:"Options#enablePrimaryKeyType"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:'import typo.*\n\nval options = Options(\n  pkg = "mypkg",\n  Some(DbLibName.Doobie),\n  enablePrimaryKeyType = Selector.relationNames("myrelationname"),\n)\n'})}),"\n",(0,s.jsx)(t.p,{children:"Composite id key types are currently always created."})]})}function y(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var s=n(6540);const r={},o=s.createContext(r);function i(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);