"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[3096],{4348:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var s=n(4848),r=n(8453);const o={title:"String enums"},a=void 0,i={id:"type-safety/string-enums",title:"String enums",description:"If you use string enums in PostgreSQL like this:",source:"@site/docs/type-safety/string-enums.md",sourceDirName:"type-safety",slug:"/type-safety/string-enums",permalink:"/typo/docs/type-safety/string-enums",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"String enums"},sidebar:"tutorialSidebar",previous:{title:"Primary key types",permalink:"/typo/docs/type-safety/id-types"},next:{title:"Domains",permalink:"/typo/docs/type-safety/domains"}},c={},l=[];function p(e){const t={code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"If you use string enums in PostgreSQL like this:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-postgresql",children:"CREATE TYPE sector AS ENUM ('PUBLIC', 'PRIVATE', 'OTHER');\n"})}),"\n",(0,s.jsx)(t.p,{children:"Typo will generate a type for it with the corresponding type class instances:"}),"\n",(0,s.jsxs)(t.p,{children:["Note that like all generated code from Typo it is in the scala 2/3 shared subset, so\nit doesn't use ",(0,s.jsx)(t.code,{children:"enum"})," for now."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:'/** Enum `myschema.sector`\n *  - PUBLIC\n *  - PRIVATE\n *  - OTHER\n */\nsealed abstract class Sector(val value: String)\n\nobject Sector {\n  def apply(str: String): Either[String, Sector] =\n    ByName.get(str).toRight(s"\'$str\' does not match any of the following legal values: $Names")\n  def force(str: String): Sector =\n    apply(str) match {\n      case Left(msg) => sys.error(msg)\n      case Right(value) => value\n    }\n  case object PUBLIC extends Sector("PUBLIC")\n  case object PRIVATE extends Sector("PRIVATE")\n  case object OTHER extends Sector("OTHER")\n  val All: List[Sector] = List(PUBLIC, PRIVATE, OTHER)\n  val Names: String = All.map(_.value).mkString(", ")\n  val ByName: Map[String, Sector] = All.map(x => (x.value, x)).toMap\n\n  // ...instances\n}\n'})})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>i});var s=n(6540);const r={},o=s.createContext(r);function a(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);