"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[6482],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>y});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),l=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(i.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,c=d(e,["components","mdxType","originalType","parentName"]),p=l(n),f=r,y=p["".concat(i,".").concat(f)]||p[f]||u[f]||s;return n?a.createElement(y,o(o({ref:t},c),{},{components:n})):a.createElement(y,o({ref:t},c))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=f;var d={};for(var i in t)hasOwnProperty.call(t,i)&&(d[i]=t[i]);d.originalType=e,d[p]="string"==typeof e?e:r,o[1]=d;for(var l=2;l<s;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},1106:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>d,toc:()=>l});var a=n(7462),r=(n(7294),n(3905));const s={title:"Defaulted types"},o=void 0,d={unversionedId:"type-safety/defaulted-types",id:"type-safety/defaulted-types",title:"Defaulted types",description:"An interesting case is how to model inserting rows into tables with default values.",source:"@site/docs/type-safety/defaulted-types.md",sourceDirName:"type-safety",slug:"/type-safety/defaulted-types",permalink:"/typo/docs/type-safety/defaulted-types",draft:!1,tags:[],version:"current",frontMatter:{title:"Defaulted types"},sidebar:"tutorialSidebar",previous:{title:"Date/time types",permalink:"/typo/docs/type-safety/date-time"},next:{title:"Typo types",permalink:"/typo/docs/type-safety/typo-types"}},i={},l=[],c={toc:l},p="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"An interesting case is how to model inserting rows into tables with default values.\nTypo gives you the option of doing it very explicitly with the ",(0,r.kt)("inlineCode",{parentName:"p"},"Defaulted")," type."),(0,r.kt)("p",null,"Here it is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"sealed trait Defaulted[+T]\n\nobject Defaulted {\n  case class Provided[T](value: T) extends Defaulted[T]\n  case object UseDefault extends Defaulted[Nothing]\n  \n  /// json instances only. repositories transfer only values you have provided in the insert\n}\n")),(0,r.kt)("p",null,'It is used only in "Unsaved" row types, which are really good for talking about not persisted rows.'),(0,r.kt)("p",null,"For instance:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import adventureworks.Defaulted\nimport adventureworks.TypoLocalDateTime\nimport adventureworks.person.stateprovince.StateprovinceId\nimport adventureworks.person.address.{AddressId, AddressRow}\nimport java.util.UUID\n\n/** This class corresponds to a row in table `person.address` which has not been persisted yet */\ncase class AddressRowUnsaved(\n  /** First street address line. */\n  addressline1: /* max 60 chars */ String,\n  /** Second street address line. */\n  addressline2: Option[/* max 60 chars */ String],\n  /** Name of the city. */\n  city: /* max 30 chars */ String,\n  /** Unique identification number for the state or province. Foreign key to StateProvince table.\n      Points to [[stateprovince.StateprovinceRow.stateprovinceid]] */\n  stateprovinceid: StateprovinceId,\n  /** Postal code for the street address. */\n  postalcode: /* max 15 chars */ String,\n  /** Latitude and longitude of this address. */\n  spatiallocation: Option[Array[Byte]],\n  /** Default: nextval('person.address_addressid_seq'::regclass)\n      Primary key for Address records. */\n  addressid: Defaulted[AddressId] = Defaulted.UseDefault,\n  /** Default: uuid_generate_v1() */\n  rowguid: Defaulted[UUID] = Defaulted.UseDefault,\n  /** Default: now() */\n  modifieddate: Defaulted[TypoLocalDateTime] = Defaulted.UseDefault\n) {\n  def toRow(addressidDefault: => AddressId, rowguidDefault: => UUID, modifieddateDefault: => TypoLocalDateTime): AddressRow =\n    AddressRow(\n      addressline1 = addressline1,\n      addressline2 = addressline2,\n      city = city,\n      stateprovinceid = stateprovinceid,\n      postalcode = postalcode,\n      spatiallocation = spatiallocation,\n      addressid = addressid match {\n                    case Defaulted.UseDefault => addressidDefault\n                    case Defaulted.Provided(value) => value\n                  },\n      rowguid = rowguid match {\n                  case Defaulted.UseDefault => rowguidDefault\n                  case Defaulted.Provided(value) => value\n                },\n      modifieddate = modifieddate match {\n                       case Defaulted.UseDefault => modifieddateDefault\n                       case Defaulted.Provided(value) => value\n                     }\n    )\n}\nobject AddressRowUnsaved {\n  // also only json instances\n}\n")),(0,r.kt)("p",null,"The corresponding repo then exposes these methods:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import java.sql.Connection\n\ntrait AddressRepo {\n  def insert(unsaved: AddressRow)(implicit c: Connection): AddressRow\n  def insert(unsaved: AddressRowUnsaved)(implicit c: Connection): AddressRow\n}\n")))}u.isMDXComponent=!0}}]);