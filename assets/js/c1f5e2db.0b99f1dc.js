"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[441],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(n),f=o,d=u["".concat(c,".").concat(f)]||u[f]||m[f]||a;return n?r.createElement(d,s(s({ref:t},p),{},{components:n})):r.createElement(d,s({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=f;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:o,s[1]=i;for(var l=2;l<a;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},1986:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const a={},s=void 0,i={unversionedId:"string-enums",id:"string-enums",title:"string-enums",description:"If you use string enums in postgres like this:",source:"@site/docs/string-enums.md",sourceDirName:".",slug:"/string-enums",permalink:"/typo/docs/string-enums",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"id-types",permalink:"/typo/docs/id-types"},next:{title:"domains",permalink:"/typo/docs/domains"}},c={},l=[],p={toc:l},u="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"If you use string enums in postgres like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-postgresql"},"CREATE TYPE sector AS ENUM ('PUBLIC', 'PRIVATE', 'OTHER');\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"typo")," will generate a type for it with the corresponding type class instances:"),(0,o.kt)("p",null,"Note that like all generated code from ",(0,o.kt)("inlineCode",{parentName:"p"},"typo")," it is in the scala 2/3 shared subset, so\nit doesn't use ",(0,o.kt)("inlineCode",{parentName:"p"},"enum")," for now."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'/** Enum `myschema.sector`\n *  - PUBLIC\n *  - PRIVATE\n *  - OTHER\n */\nsealed abstract class Sector(val value: String)\n\nobject Sector {\n  def apply(str: String): Either[String, Sector] =\n    ByName.get(str).toRight(s"\'$str\' does not match any of the following legal values: $Names")\n  def force(str: String): Sector =\n    apply(str) match {\n      case Left(msg) => sys.error(msg)\n      case Right(value) => value\n    }\n  case object PUBLIC extends Sector("PUBLIC")\n  case object PRIVATE extends Sector("PRIVATE")\n  case object OTHER extends Sector("OTHER")\n  val All: List[Sector] = List(PUBLIC, PRIVATE, OTHER)\n  val Names: String = All.map(_.value).mkString(", ")\n  val ByName: Map[String, Sector] = All.map(x => (x.value, x)).toMap\n\n  // ...instances\n}\n')))}m.isMDXComponent=!0}}]);