"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[368],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},l=Object.keys(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},u="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,d=u["".concat(s,".").concat(m)]||u[m]||y[m]||l;return n?o.createElement(d,a(a({ref:t},c),{},{components:n})):o.createElement(d,a({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,a=new Array(l);a[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:r,a[1]=i;for(var p=2;p<l;p++)a[p]=n[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2791:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>y,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var o=n(7462),r=(n(7294),n(3905));const l={title:"User-selected types"},a=void 0,i={unversionedId:"type-safety/user-selected-types",id:"type-safety/user-selected-types",title:"User-selected types",description:"If you're integrating the generated code into an existing codebase it may be beneficial to reuse existing types, in particular ID types.",source:"@site/docs/type-safety/user-selected-types.md",sourceDirName:"type-safety",slug:"/type-safety/user-selected-types",permalink:"/typo/docs/type-safety/user-selected-types",draft:!1,tags:[],version:"current",frontMatter:{title:"User-selected types"},sidebar:"tutorialSidebar",previous:{title:"Type flow",permalink:"/typo/docs/type-safety/type-flow"},next:{title:"Ready for Scala.js/native",permalink:"/typo/docs/other-features/scala-js-ready"}},s={},p=[{value:"Note",id:"note",level:2},{value:"Choose column types from relations",id:"choose-column-types-from-relations",level:3},{value:"Explicit version",id:"explicit-version",level:3},{value:"Composing multiple column overrides:",id:"composing-multiple-column-overrides",level:3},{value:"Choose nullability and types for parameters and columns in sql files",id:"choose-nullability-and-types-for-parameters-and-columns-in-sql-files",level:2}],c={toc:p},u="wrapper";function y(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"If you're integrating the generated code into an existing codebase it may be beneficial to reuse existing types, in particular ID types."),(0,r.kt)("p",null,"You can ",(0,r.kt)("a",{parentName:"p",href:"/typo/docs/customization"},"customize")," ",(0,r.kt)("inlineCode",{parentName:"p"},"typo")," to override types."),(0,r.kt)("h2",{id:"note"},"Note"),(0,r.kt)("p",null,"You need to implement a bunch of typeclass instances for the types you use.\nThe compiler will guide you, but it's basically everything which is needed to use the type with your database and json library."),(0,r.kt)("p",null,"You can likely copy/paste from the generated id types and adapt them. "),(0,r.kt)("h3",{id:"choose-column-types-from-relations"},"Choose column types from relations"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import typo.{Options, TypeOverride}\n\nval rewriteColumnTypes = TypeOverride.relation {\n  case ("schema.table", "column") => "org.foo.ColumnId"\n}\n\nOptions(\n  pkg = "org.foo",\n  dbLib = None,\n  typeOverride = rewriteColumnTypes\n)\n')),(0,r.kt)("h3",{id:"explicit-version"},"Explicit version"),(0,r.kt)("p",null,'The version above is "simplified", in that is takes a descriptive type and explodes it into strings.\nYou may prefer the version below which is more cumbersome but more structured:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import typo.db.RelationName\n\nval rewriteMore = TypeOverride.of { \n  case (RelationName(Some(schema), tableName), colName) if schema.contains("foo") && colName.value.startsWith("foo") => "org.foo.Bar" \n}\n')),(0,r.kt)("h3",{id:"composing-multiple-column-overrides"},"Composing multiple column overrides:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"rewriteColumnTypes.orElse(rewriteMore)\n")),(0,r.kt)("h2",{id:"choose-nullability-and-types-for-parameters-and-columns-in-sql-files"},"Choose nullability and types for parameters and columns in sql files"),(0,r.kt)("p",null,"This is done inline in the SQL you write:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'-- foo is nullable, by default pg cannot infer nullability\nselect 1 where :foo = 1;\n-- foo is explicitly set to nullable\nselect 1 where :"foo?" = 1;\n-- foo is explicitly set to not nullable\nselect 1 where :"foo!" = 1;\n-- foo is explicitly set to not nullable and `Long`\nselect 1 where :"foo:scala.Long!" = 1;\n')),(0,r.kt)("p",null,"also works for columns, naturally:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'select 1 as "foo:scala.Double?" -- rewrite `Int` to `Option[Double]`\n')),(0,r.kt)("p",null,"and if you mention a parameter multiple times you only need to customize it at first mention"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'select 1 where :"foo!" = 1 and :foo != 2;\n')))}y.isMDXComponent=!0}}]);