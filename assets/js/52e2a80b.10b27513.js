"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[12],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>y});var s=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,s,r=function(e,t){if(null==e)return{};var n,s,r={},a=Object.keys(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=s.createContext({}),l=function(e){var t=s.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return s.createElement(d.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},m=s.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,d=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=l(n),m=r,y=p["".concat(d,".").concat(m)]||p[m]||u[m]||a;return n?s.createElement(y,o(o({ref:t},c),{},{components:n})):s.createElement(y,o({ref:t},c))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=m;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i[p]="string"==typeof e?e:r,o[1]=i;for(var l=2;l<a;l++)o[l]=n[l];return s.createElement.apply(null,o)}return s.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6861:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var s=n(7462),r=(n(7294),n(3905));const a={},o="Welcome!",i={unversionedId:"readme",id:"readme",title:"Welcome!",description:'typo (for "typed postgres") generates code to',source:"@site/docs/readme.md",sourceDirName:".",slug:"/",permalink:"/typo/docs/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",next:{title:"setup",permalink:"/typo/docs/setup"}},d={},l=[{value:"Build safer systems",id:"build-safer-systems",level:2},{value:"Write less boilerplate code",id:"write-less-boilerplate-code",level:2},{value:"SQL is king!",id:"sql-is-king",level:2},{value:"Tables",id:"tables",level:2}],c={toc:l},p="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,s.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"welcome"},"Welcome!"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"typo"),' (for "typed postgres") generates code to'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"safely interact with your Postgres database"),(0,r.kt)("li",{parentName:"ul"},"avoid having to write repetitive and error-prone code")),(0,r.kt)("h2",{id:"build-safer-systems"},"Build safer systems"),(0,r.kt)("p",null,"We use the compiler to verify our programs. All is great, until you need to interact with the messy outside world."),(0,r.kt)("p",null,"One of the best tools we have available to help the compiler verify our interactions with the outside world is contract-driven development."),(0,r.kt)("p",null,"Say an API is described by an OpenApi definition.\nIf you use that to generate code for the HTTP layer you guarantee that you implement it correctly because otherwise the compiler can help you!"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"typo")," intends to provide the same safety in the database layer.\nIt does this by generating correct code for all your tables, views and queries based on postgres metadata tables."),(0,r.kt)("h2",{id:"write-less-boilerplate-code"},"Write less boilerplate code"),(0,r.kt)("p",null,"No more redefining basic crud-operations, writing fragile row mappers, tolerating quirky string interpolation functionality and so on."),(0,r.kt)("h2",{id:"sql-is-king"},"SQL is king!"),(0,r.kt)("p",null,"So what is described above gives you a perfect interface to perform CUD operations.\nHowever, this is not how we normally (R)ead data!\nTypically, you'll join some tables based on some conditions and extract some data. All normal and fine, but how can ",(0,r.kt)("inlineCode",{parentName:"p"},"typo")," help here?"),(0,r.kt)("p",null,"Let's accept that SQL is king in this domain. Let's write SQL in SQL files!\nLet's take an example, ",(0,r.kt)("inlineCode",{parentName:"p"},"${PROJECT_HOME}/sql/person_detail.sql"),"."),(0,r.kt)("p",null,"You point the ",(0,r.kt)("inlineCode",{parentName:"p"},"typo")," at the ",(0,r.kt)("inlineCode",{parentName:"p"},"sql")," folder, it'll discover all the SQL files and generate a case classes, row mappers, and everything else you need."),(0,r.kt)("p",null,"Say it looks like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT s.businessentityid,\n       p.title,\n       p.firstname,\n       p.middlename,\n       p.lastname,\n       e.jobtitle,\n       a.addressline1,\n       a.city,\n       a.postalcode\nFROM sales.salesperson s\n         JOIN humanresources.employee e ON e.businessentityid = s.businessentityid\n         JOIN person.person p ON p.businessentityid = s.businessentityid\n         JOIN person.businessentityaddress bea ON bea.businessentityid = s.businessentityid\n         JOIN person.address a ON a.addressid = bea.addressid\nwhere s.businessentityid = :businessentityid\n")),(0,r.kt)("p",null,"(note that ",(0,r.kt)("inlineCode",{parentName:"p"},":businessentityid")," is a named parameter. ",(0,r.kt)("inlineCode",{parentName:"p"},"typo")," will generate a method with a parameter of the correct type)"),(0,r.kt)("p",null,"You'll then get a row class like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"case class PersonDetailSqlRow(\n  /** Points to [[sales.salesperson.SalespersonRow.businessentityid]] */\n  businessentityid: BusinessentityId,\n  /** Points to [[person.person.PersonRow.title]] */\n  title: Option[String],\n  /** Points to [[person.person.PersonRow.firstname]] */\n  firstname: Name,\n  /** Points to [[person.person.PersonRow.middlename]] */\n  middlename: Option[Name],\n  /** Points to [[person.person.PersonRow.lastname]] */\n  lastname: Name,\n  /** Points to [[humanresources.employee.EmployeeRow.jobtitle]] */\n  jobtitle: String,\n  /** Points to [[person.address.AddressRow.addressline1]] */\n  addressline1: String,\n  /** Points to [[person.address.AddressRow.city]] */\n  city: String,\n  /** Points to [[person.address.AddressRow.postalcode]] */\n  postalcode: String\n)\n")),(0,r.kt)("p",null,"and a repo with a method like this, for doobie:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"trait PersonDetailSqlRepo {\n  def apply(businessentityid: /* nullability unknown */ Option[Int]): Stream[ConnectionIO, PersonDetailSqlRow]\n}\n")),(0,r.kt)("p",null,"or this, for anorm:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"trait PersonDetailSqlRepo {\n  def apply(businessentityid: /* nullability unknown */ Option[Int])(implicit c: Connection): List[PersonDetailSqlRow]\n}\n\n")),(0,r.kt)("p",null,"You also get an implementation of course."),(0,r.kt)("p",null,"Note that postgres is not able to decide nullability for parameters. You can override that (and any other type) through customization."),(0,r.kt)("h2",{id:"tables"},"Tables"),(0,r.kt)("p",null,"Given a table like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"create table address\n(\n    addressid       serial\n        constraint \"PK_Address_AddressID\" primary key,\n    addressline1    varchar(60)                          not null,\n    addressline2    varchar(60),\n    city            varchar(30)                          not null,\n    stateprovinceid integer                              not null \n        constraint \"FK_Address_StateProvince_StateProvinceID\" references stateprovince,\n    postalcode      varchar(15)                          not null,\n    spatiallocation bytea,\n    rowguid         uuid      default uuid_generate_v1() not null,\n    modifieddate    timestamp default now()              not null\n);\n\ncomment on table address is 'Street address information for customers, employees, and vendors.';\ncomment on column address.addressid is 'Primary key for Address records.';\ncomment on column address.addressline1 is 'First street address line.';\ncomment on column address.addressline2 is 'Second street address line.';\ncomment on column address.city is 'Name of the city.';\ncomment on column address.stateprovinceid is 'Unique identification number for the state or province. Foreign key to StateProvince table.';\ncomment on column address.postalcode is 'Postal code for the street address.';\ncomment on column address.spatiallocation is 'Latitude and longitude of this address.';\n")),(0,r.kt)("p",null,"You'll get a row class like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"case class AddressRow(\n  /** Primary key for Address records. */\n  addressid: AddressId,\n  /** First street address line. */\n  addressline1: String,\n  /** Second street address line. */\n  addressline2: Option[String],\n  /** Name of the city. */\n  city: String,\n  /** Unique identification number for the state or province. Foreign key to StateProvince table.\n      Points to [[stateprovince.StateprovinceRow.stateprovinceid]] */\n  stateprovinceid: StateprovinceId,\n  /** Postal code for the street address. */\n  postalcode: String,\n  /** Latitude and longitude of this address. */\n  spatiallocation: Option[Array[Byte]],\n  rowguid: UUID,\n  modifieddate: LocalDateTime\n)\n\n")),(0,r.kt)("p",null,"and a repo like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"trait AddressRepo {\n  def delete(addressid: AddressId): ConnectionIO[Boolean]\n  def insert(unsaved: AddressRow): ConnectionIO[AddressRow]\n  def insert(unsaved: AddressRowUnsaved): ConnectionIO[AddressRow]\n  def selectAll: Stream[ConnectionIO, AddressRow]\n  def selectByFieldValues(fieldValues: List[AddressFieldOrIdValue[_]]): Stream[ConnectionIO, AddressRow]\n  def selectById(addressid: AddressId): ConnectionIO[Option[AddressRow]]\n  def selectByIds(addressids: Array[AddressId]): Stream[ConnectionIO, AddressRow]\n  def update(row: AddressRow): ConnectionIO[Boolean]\n  def updateFieldValues(addressid: AddressId, fieldValues: List[AddressFieldValue[_]]): ConnectionIO[Boolean]\n  def upsert(unsaved: AddressRow): ConnectionIO[AddressRow]\n}\n")),(0,r.kt)("p",null,"Since the table has auto-increment ID and default values, you will typically use this structure to insert new rows"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"/** This class corresponds to a row in table `person.address` which has not been persisted yet */\ncase class AddressRowUnsaved(\n  /** First street address line. */\n  addressline1: String,\n  /** Second street address line. */\n  addressline2: Option[String],\n  /** Name of the city. */\n  city: String,\n  /** Unique identification number for the state or province. Foreign key to StateProvince table.\n      Points to [[stateprovince.StateprovinceRow.stateprovinceid]] */\n  stateprovinceid: StateprovinceId,\n  /** Postal code for the street address. */\n  postalcode: String,\n  /** Latitude and longitude of this address. */\n  spatiallocation: Option[Array[Byte]],\n  /** Default: nextval('person.address_addressid_seq'::regclass)\n      Primary key for Address records. */\n  addressid: Defaulted[AddressId] = Defaulted.UseDefault,\n  /** Default: uuid_generate_v1() */\n  rowguid: Defaulted[UUID] = Defaulted.UseDefault,\n  /** Default: now() */\n  modifieddate: Defaulted[LocalDateTime] = Defaulted.UseDefault\n)\n")))}u.isMDXComponent=!0}}]);