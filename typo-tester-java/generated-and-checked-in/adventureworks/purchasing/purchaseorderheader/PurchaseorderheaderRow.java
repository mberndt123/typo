/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks.purchasing.purchaseorderheader;

import adventureworks.customtypes.Defaulted;
import adventureworks.customtypes.TypoLocalDateTime;
import adventureworks.customtypes.TypoShort;
import adventureworks.person.businessentity.BusinessentityId;
import adventureworks.purchasing.shipmethod.ShipmethodId;
import java.math.BigDecimal;
import java.util.Optional;

/** Table: purchasing.purchaseorderheader
  * General purchase order information. See PurchaseOrderDetail.
  * Primary key: purchaseorderid
  */
public record PurchaseorderheaderRow(
  /** Primary key.
    * Default: nextval('purchasing.purchaseorderheader_purchaseorderid_seq'::regclass)
    */
  PurchaseorderheaderId purchaseorderid,
  /** Incremental number to track changes to the purchase order over time.
    * Default: 0
    */
  TypoShort revisionnumber,
  /** Order current status. 1 = Pending; 2 = Approved; 3 = Rejected; 4 = Complete
    * Default: 1
    * Constraint CK_PurchaseOrderHeader_Status affecting columns status: (((status >= 1) AND (status <= 4)))
    */
  TypoShort status,
  /** Employee who created the purchase order. Foreign key to Employee.BusinessEntityID.
    * Points to {@link adventureworks.humanresources.employee.EmployeeRow.businessentityid}
    */
  BusinessentityId employeeid,
  /** Vendor with whom the purchase order is placed. Foreign key to Vendor.BusinessEntityID.
    * Points to {@link adventureworks.purchasing.vendor.VendorRow.businessentityid}
    */
  BusinessentityId vendorid,
  /** Shipping method. Foreign key to ShipMethod.ShipMethodID.
    * Points to {@link adventureworks.purchasing.shipmethod.ShipmethodRow.shipmethodid}
    */
  ShipmethodId shipmethodid,
  /** Purchase order creation date.
    * Default: now()
    * Constraint CK_PurchaseOrderHeader_ShipDate affecting columns orderdate, shipdate: (((shipdate >= orderdate) OR (shipdate IS NULL)))
    */
  TypoLocalDateTime orderdate,
  /** Estimated shipment date from the vendor.
    * Constraint CK_PurchaseOrderHeader_ShipDate affecting columns orderdate, shipdate: (((shipdate >= orderdate) OR (shipdate IS NULL)))
    */
  Optional<TypoLocalDateTime> shipdate,
  /** Purchase order subtotal. Computed as SUM(PurchaseOrderDetail.LineTotal)for the appropriate PurchaseOrderID.
    * Default: 0.00
    * Constraint CK_PurchaseOrderHeader_SubTotal affecting columns subtotal: ((subtotal >= 0.00))
    */
  BigDecimal subtotal,
  /** Tax amount.
    * Default: 0.00
    * Constraint CK_PurchaseOrderHeader_TaxAmt affecting columns taxamt: ((taxamt >= 0.00))
    */
  BigDecimal taxamt,
  /** Shipping cost.
    * Default: 0.00
    * Constraint CK_PurchaseOrderHeader_Freight affecting columns freight: ((freight >= 0.00))
    */
  BigDecimal freight,
  /** Default: now() */
  TypoLocalDateTime modifieddate
) {
  public PurchaseorderheaderId id() {
    return purchaseorderid;
  };
  public PurchaseorderheaderRowUnsaved toUnsavedRow(
                                                     Defaulted<PurchaseorderheaderId> purchaseorderid,
                                                     Defaulted<TypoShort> revisionnumber,
                                                     Defaulted<TypoShort> status,
                                                     Defaulted<TypoLocalDateTime> orderdate,
                                                     Defaulted<BigDecimal> subtotal,
                                                     Defaulted<BigDecimal> taxamt,
                                                     Defaulted<BigDecimal> freight,
                                                     Defaulted<TypoLocalDateTime> modifieddate
                                                   ) {
    return new PurchaseorderheaderRowUnsaved(employeeid, vendorid, shipmethodid, shipdate, purchaseorderid, revisionnumber, status, orderdate, subtotal, taxamt, freight, modifieddate);
  };
}