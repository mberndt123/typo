/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks.purchasing.purchaseorderheader;

import adventureworks.customtypes.Defaulted;
import adventureworks.customtypes.TypoLocalDateTime;
import adventureworks.customtypes.TypoShort;
import adventureworks.person.businessentity.BusinessentityId;
import adventureworks.purchasing.shipmethod.ShipmethodId;
import java.math.BigDecimal;
import java.util.Optional;

/** This class corresponds to a row in table `purchasing.purchaseorderheader` which has not been persisted yet */
public record PurchaseorderheaderRowUnsaved(
  /** Employee who created the purchase order. Foreign key to Employee.BusinessEntityID.
    * Points to {@link adventureworks.humanresources.employee.EmployeeRow.businessentityid}
    */
  BusinessentityId employeeid,
  /** Vendor with whom the purchase order is placed. Foreign key to Vendor.BusinessEntityID.
    * Points to {@link adventureworks.purchasing.vendor.VendorRow.businessentityid}
    */
  BusinessentityId vendorid,
  /** Shipping method. Foreign key to ShipMethod.ShipMethodID.
    * Points to {@link adventureworks.purchasing.shipmethod.ShipmethodRow.shipmethodid}
    */
  ShipmethodId shipmethodid,
  /** Estimated shipment date from the vendor.
    * Constraint CK_PurchaseOrderHeader_ShipDate affecting columns orderdate, shipdate:  (((shipdate >= orderdate) OR (shipdate IS NULL)))
    */
  Optional<TypoLocalDateTime> shipdate,
  /** Default: nextval('purchasing.purchaseorderheader_purchaseorderid_seq'::regclass)
    * Primary key.
    */
  Defaulted<PurchaseorderheaderId> purchaseorderid,
  /** Default: 0
    * Incremental number to track changes to the purchase order over time.
    */
  Defaulted<TypoShort> revisionnumber,
  /** Default: 1
    * Order current status. 1 = Pending; 2 = Approved; 3 = Rejected; 4 = Complete
    * Constraint CK_PurchaseOrderHeader_Status affecting columns status:  (((status >= 1) AND (status <= 4)))
    */
  Defaulted<TypoShort> status,
  /** Default: now()
    * Purchase order creation date.
    * Constraint CK_PurchaseOrderHeader_ShipDate affecting columns orderdate, shipdate:  (((shipdate >= orderdate) OR (shipdate IS NULL)))
    */
  Defaulted<TypoLocalDateTime> orderdate,
  /** Default: 0.00
    * Purchase order subtotal. Computed as SUM(PurchaseOrderDetail.LineTotal)for the appropriate PurchaseOrderID.
    * Constraint CK_PurchaseOrderHeader_SubTotal affecting columns subtotal:  ((subtotal >= 0.00))
    */
  Defaulted<BigDecimal> subtotal,
  /** Default: 0.00
    * Tax amount.
    * Constraint CK_PurchaseOrderHeader_TaxAmt affecting columns taxamt:  ((taxamt >= 0.00))
    */
  Defaulted<BigDecimal> taxamt,
  /** Default: 0.00
    * Shipping cost.
    * Constraint CK_PurchaseOrderHeader_Freight affecting columns freight:  ((freight >= 0.00))
    */
  Defaulted<BigDecimal> freight,
  /** Default: now() */
  Defaulted<TypoLocalDateTime> modifieddate
) {
  public PurchaseorderheaderRow toRow(
                                       java.util.function.Supplier<PurchaseorderheaderId> purchaseorderidDefault,
                                       java.util.function.Supplier<TypoShort> revisionnumberDefault,
                                       java.util.function.Supplier<TypoShort> statusDefault,
                                       java.util.function.Supplier<TypoLocalDateTime> orderdateDefault,
                                       java.util.function.Supplier<BigDecimal> subtotalDefault,
                                       java.util.function.Supplier<BigDecimal> taxamtDefault,
                                       java.util.function.Supplier<BigDecimal> freightDefault,
                                       java.util.function.Supplier<TypoLocalDateTime> modifieddateDefault
                                     ) {
    return new PurchaseorderheaderRow(purchaseorderid.getOrElse(purchaseorderidDefault), revisionnumber.getOrElse(revisionnumberDefault), status.getOrElse(statusDefault), employeeid, vendorid, shipmethodid, orderdate.getOrElse(orderdateDefault), shipdate, subtotal.getOrElse(subtotalDefault), taxamt.getOrElse(taxamtDefault), freight.getOrElse(freightDefault), modifieddate.getOrElse(modifieddateDefault));
  };
}