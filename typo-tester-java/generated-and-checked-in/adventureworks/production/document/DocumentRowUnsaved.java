/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks.production.document;

import adventureworks.customtypes.Defaulted;
import adventureworks.customtypes.TypoBytea;
import adventureworks.customtypes.TypoLocalDateTime;
import adventureworks.customtypes.TypoShort;
import adventureworks.customtypes.TypoUUID;
import adventureworks.person.businessentity.BusinessentityId;
import adventureworks.public_.Flag;
import java.util.Optional;

/** This class corresponds to a row in table `production.document` which has not been persisted yet */
public record DocumentRowUnsaved(
  /** Title of the document. */
  /* max 50 chars */ String title,
  /** Employee who controls the document.  Foreign key to Employee.BusinessEntityID
    * Points to {@link adventureworks.humanresources.employee.EmployeeRow.businessentityid}
    */
  BusinessentityId owner,
  /** File name of the document */
  /* max 400 chars */ String filename,
  /** File extension indicating the document type. For example, .doc or .txt. */
  Optional</* max 8 chars */ String> fileextension,
  /** Revision number of the document. */
  /* bpchar, max 5 chars */ String revision,
  /** 1 = Pending approval, 2 = Approved, 3 = Obsolete
    * Constraint CK_Document_Status affecting columns status:  (((status >= 1) AND (status <= 3)))
    */
  TypoShort status,
  /** Document abstract. */
  Optional<String> documentsummary,
  /** Complete document. */
  Optional<TypoBytea> document,
  /** Default: false
    * 0 = This is a folder, 1 = This is a document.
    */
  Defaulted<Flag> folderflag,
  /** Default: 0
    * Engineering change approval number.
    */
  Defaulted<Integer> changenumber,
  /** Default: uuid_generate_v1()
    * ROWGUIDCOL number uniquely identifying the record. Required for FileStream.
    */
  Defaulted<TypoUUID> rowguid,
  /** Default: now() */
  Defaulted<TypoLocalDateTime> modifieddate,
  /** Default: '/'::character varying
    * Primary key for Document records.
    */
  Defaulted<DocumentId> documentnode
) {
  public DocumentRow toRow(
                            java.util.function.Supplier<Flag> folderflagDefault,
                            java.util.function.Supplier<Integer> changenumberDefault,
                            java.util.function.Supplier<TypoUUID> rowguidDefault,
                            java.util.function.Supplier<TypoLocalDateTime> modifieddateDefault,
                            java.util.function.Supplier<DocumentId> documentnodeDefault
                          ) {
    return new DocumentRow(title, owner, folderflag.getOrElse(folderflagDefault), filename, fileextension, revision, changenumber.getOrElse(changenumberDefault), status, documentsummary, document, rowguid.getOrElse(rowguidDefault), modifieddate.getOrElse(modifieddateDefault), documentnode.getOrElse(documentnodeDefault));
  };
}