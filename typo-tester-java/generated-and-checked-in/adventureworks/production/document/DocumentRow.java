/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks.production.document;

import adventureworks.customtypes.Defaulted;
import adventureworks.customtypes.TypoBytea;
import adventureworks.customtypes.TypoLocalDateTime;
import adventureworks.customtypes.TypoShort;
import adventureworks.customtypes.TypoUUID;
import adventureworks.person.businessentity.BusinessentityId;
import adventureworks.public_.Flag;
import java.util.Optional;

/** Table: production.document
  * Product maintenance documents.
  * Primary key: documentnode
  */
public record DocumentRow(
  /** Title of the document. */
  /* max 50 chars */ String title,
  /** Employee who controls the document.  Foreign key to Employee.BusinessEntityID
    * Points to {@link adventureworks.humanresources.employee.EmployeeRow.businessentityid}
    */
  BusinessentityId owner,
  /** 0 = This is a folder, 1 = This is a document.
    * Default: false
    */
  Flag folderflag,
  /** File name of the document */
  /* max 400 chars */ String filename,
  /** File extension indicating the document type. For example, .doc or .txt. */
  Optional</* max 8 chars */ String> fileextension,
  /** Revision number of the document. */
  /* bpchar, max 5 chars */ String revision,
  /** Engineering change approval number.
    * Default: 0
    */
  Integer changenumber,
  /** 1 = Pending approval, 2 = Approved, 3 = Obsolete
    * Constraint CK_Document_Status affecting columns status: (((status >= 1) AND (status <= 3)))
    */
  TypoShort status,
  /** Document abstract. */
  Optional<String> documentsummary,
  /** Complete document. */
  Optional<TypoBytea> document,
  /** ROWGUIDCOL number uniquely identifying the record. Required for FileStream.
    * Default: uuid_generate_v1()
    */
  TypoUUID rowguid,
  /** Default: now() */
  TypoLocalDateTime modifieddate,
  /** Primary key for Document records.
    * Default: '/'::character varying
    */
  DocumentId documentnode
) {
  public DocumentId id() {
    return documentnode;
  };
  public DocumentRowUnsaved toUnsavedRow(
                                          Defaulted<DocumentId> documentnode,
                                          Defaulted<Flag> folderflag,
                                          Defaulted<Integer> changenumber,
                                          Defaulted<TypoUUID> rowguid,
                                          Defaulted<TypoLocalDateTime> modifieddate
                                        ) {
    return new DocumentRowUnsaved(title, owner, filename, fileextension, revision, status, documentsummary, document, folderflag, changenumber, rowguid, modifieddate, documentnode);
  };
}