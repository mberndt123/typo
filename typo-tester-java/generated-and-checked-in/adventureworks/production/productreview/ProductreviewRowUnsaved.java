/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks.production.productreview;

import adventureworks.customtypes.Defaulted;
import adventureworks.customtypes.TypoLocalDateTime;
import adventureworks.production.product.ProductId;
import adventureworks.public_.Name;
import java.util.Optional;

/** This class corresponds to a row in table `production.productreview` which has not been persisted yet */
public record ProductreviewRowUnsaved(
  /** Product identification number. Foreign key to Product.ProductID.
    * Points to {@link adventureworks.production.product.ProductRow.productid}
    */
  ProductId productid,
  /** Name of the reviewer. */
  Name reviewername,
  /** Reviewer's e-mail address. */
  /* max 50 chars */ String emailaddress,
  /** Product rating given by the reviewer. Scale is 1 to 5 with 5 as the highest rating.
    * Constraint CK_ProductReview_Rating affecting columns rating:  (((rating >= 1) AND (rating <= 5)))
    */
  Integer rating,
  /** Reviewer's comments */
  Optional</* max 3850 chars */ String> comments,
  /** Default: nextval('production.productreview_productreviewid_seq'::regclass)
    * Primary key for ProductReview records.
    */
  Defaulted<ProductreviewId> productreviewid,
  /** Default: now()
    * Date review was submitted.
    */
  Defaulted<TypoLocalDateTime> reviewdate,
  /** Default: now() */
  Defaulted<TypoLocalDateTime> modifieddate
) {
  public ProductreviewRow toRow(
                                 java.util.function.Supplier<ProductreviewId> productreviewidDefault,
                                 java.util.function.Supplier<TypoLocalDateTime> reviewdateDefault,
                                 java.util.function.Supplier<TypoLocalDateTime> modifieddateDefault
                               ) {
    return new ProductreviewRow(productreviewid.getOrElse(productreviewidDefault), productid, reviewername, reviewdate.getOrElse(reviewdateDefault), emailaddress, rating, comments, modifieddate.getOrElse(modifieddateDefault));
  };
}