/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks.production.workorder;

import adventureworks.customtypes.Defaulted;
import adventureworks.customtypes.TypoLocalDateTime;
import adventureworks.customtypes.TypoShort;
import adventureworks.production.product.ProductId;
import adventureworks.production.scrapreason.ScrapreasonId;
import java.util.Optional;

/** This class corresponds to a row in table `production.workorder` which has not been persisted yet */
public record WorkorderRowUnsaved(
  /** Product identification number. Foreign key to Product.ProductID.
    * Points to {@link adventureworks.production.product.ProductRow.productid}
    */
  ProductId productid,
  /** Product quantity to build.
    * Constraint CK_WorkOrder_OrderQty affecting columns orderqty:  ((orderqty > 0))
    */
  Integer orderqty,
  /** Quantity that failed inspection.
    * Constraint CK_WorkOrder_ScrappedQty affecting columns scrappedqty:  ((scrappedqty >= 0))
    */
  TypoShort scrappedqty,
  /** Work order start date.
    * Constraint CK_WorkOrder_EndDate affecting columns enddate, startdate:  (((enddate >= startdate) OR (enddate IS NULL)))
    */
  TypoLocalDateTime startdate,
  /** Work order end date.
    * Constraint CK_WorkOrder_EndDate affecting columns enddate, startdate:  (((enddate >= startdate) OR (enddate IS NULL)))
    */
  Optional<TypoLocalDateTime> enddate,
  /** Work order due date. */
  TypoLocalDateTime duedate,
  /** Reason for inspection failure.
    * Points to {@link adventureworks.production.scrapreason.ScrapreasonRow.scrapreasonid}
    */
  Optional<ScrapreasonId> scrapreasonid,
  /** Default: nextval('production.workorder_workorderid_seq'::regclass)
    * Primary key for WorkOrder records.
    */
  Defaulted<WorkorderId> workorderid,
  /** Default: now() */
  Defaulted<TypoLocalDateTime> modifieddate
) {
  public WorkorderRow toRow(java.util.function.Supplier<WorkorderId> workorderidDefault, java.util.function.Supplier<TypoLocalDateTime> modifieddateDefault) {
    return new WorkorderRow(workorderid.getOrElse(workorderidDefault), productid, orderqty, scrappedqty, startdate, enddate, duedate, scrapreasonid, modifieddate.getOrElse(modifieddateDefault));
  };
}