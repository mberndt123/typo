/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks.production.transactionhistoryarchive;

import adventureworks.customtypes.Defaulted;
import adventureworks.customtypes.TypoLocalDateTime;
import java.math.BigDecimal;

/** This class corresponds to a row in table `production.transactionhistoryarchive` which has not been persisted yet */
public record TransactionhistoryarchiveRowUnsaved(
  /** Primary key for TransactionHistoryArchive records. */
  TransactionhistoryarchiveId transactionid,
  /** Product identification number. Foreign key to Product.ProductID. */
  Integer productid,
  /** Purchase order, sales order, or work order identification number. */
  Integer referenceorderid,
  /** W = Work Order, S = Sales Order, P = Purchase Order
    * Constraint CK_TransactionHistoryArchive_TransactionType affecting columns transactiontype:  ((upper((transactiontype)::text) = ANY (ARRAY['W'::text, 'S'::text, 'P'::text])))
    */
  /* bpchar, max 1 chars */ String transactiontype,
  /** Product quantity. */
  Integer quantity,
  /** Product cost. */
  BigDecimal actualcost,
  /** Default: 0
    * Line number associated with the purchase order, sales order, or work order.
    */
  Defaulted<Integer> referenceorderlineid,
  /** Default: now()
    * Date and time of the transaction.
    */
  Defaulted<TypoLocalDateTime> transactiondate,
  /** Default: now() */
  Defaulted<TypoLocalDateTime> modifieddate
) {
  public TransactionhistoryarchiveRow toRow(
                                             java.util.function.Supplier<Integer> referenceorderlineidDefault,
                                             java.util.function.Supplier<TypoLocalDateTime> transactiondateDefault,
                                             java.util.function.Supplier<TypoLocalDateTime> modifieddateDefault
                                           ) {
    return new TransactionhistoryarchiveRow(transactionid, productid, referenceorderid, referenceorderlineid.getOrElse(referenceorderlineidDefault), transactiondate.getOrElse(transactiondateDefault), transactiontype, quantity, actualcost, modifieddate.getOrElse(modifieddateDefault));
  };
}