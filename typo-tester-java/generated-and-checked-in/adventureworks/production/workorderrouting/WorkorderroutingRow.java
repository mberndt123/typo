/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks.production.workorderrouting;

import adventureworks.customtypes.Defaulted;
import adventureworks.customtypes.TypoLocalDateTime;
import adventureworks.customtypes.TypoShort;
import adventureworks.production.location.LocationId;
import adventureworks.production.workorder.WorkorderId;
import java.math.BigDecimal;
import java.util.Optional;

/** Table: production.workorderrouting
  * Work order details.
  * Composite primary key: workorderid, productid, operationsequence
  */
public record WorkorderroutingRow(
  /** Primary key. Foreign key to WorkOrder.WorkOrderID.
    * Points to {@link adventureworks.production.workorder.WorkorderRow.workorderid}
    */
  WorkorderId workorderid,
  /** Primary key. Foreign key to Product.ProductID. */
  Integer productid,
  /** Primary key. Indicates the manufacturing process sequence. */
  TypoShort operationsequence,
  /** Manufacturing location where the part is processed. Foreign key to Location.LocationID.
    * Points to {@link adventureworks.production.location.LocationRow.locationid}
    */
  LocationId locationid,
  /** Planned manufacturing start date.
    * Constraint CK_WorkOrderRouting_ScheduledEndDate affecting columns scheduledenddate, scheduledstartdate: ((scheduledenddate >= scheduledstartdate))
    */
  TypoLocalDateTime scheduledstartdate,
  /** Planned manufacturing end date.
    * Constraint CK_WorkOrderRouting_ScheduledEndDate affecting columns scheduledenddate, scheduledstartdate: ((scheduledenddate >= scheduledstartdate))
    */
  TypoLocalDateTime scheduledenddate,
  /** Actual start date.
    * Constraint CK_WorkOrderRouting_ActualEndDate affecting columns actualenddate, actualstartdate: (((actualenddate >= actualstartdate) OR (actualenddate IS NULL) OR (actualstartdate IS NULL)))
    */
  Optional<TypoLocalDateTime> actualstartdate,
  /** Actual end date.
    * Constraint CK_WorkOrderRouting_ActualEndDate affecting columns actualenddate, actualstartdate: (((actualenddate >= actualstartdate) OR (actualenddate IS NULL) OR (actualstartdate IS NULL)))
    */
  Optional<TypoLocalDateTime> actualenddate,
  /** Number of manufacturing hours used.
    * Constraint CK_WorkOrderRouting_ActualResourceHrs affecting columns actualresourcehrs: ((actualresourcehrs >= 0.0000))
    */
  Optional<BigDecimal> actualresourcehrs,
  /** Estimated manufacturing cost.
    * Constraint CK_WorkOrderRouting_PlannedCost affecting columns plannedcost: ((plannedcost > 0.00))
    */
  BigDecimal plannedcost,
  /** Actual manufacturing cost.
    * Constraint CK_WorkOrderRouting_ActualCost affecting columns actualcost: ((actualcost > 0.00))
    */
  Optional<BigDecimal> actualcost,
  /** Default: now() */
  TypoLocalDateTime modifieddate
) {
  static public WorkorderroutingRow apply(
                                           WorkorderroutingId compositeId,
                                           LocationId locationid,
                                           TypoLocalDateTime scheduledstartdate,
                                           TypoLocalDateTime scheduledenddate,
                                           Optional<TypoLocalDateTime> actualstartdate,
                                           Optional<TypoLocalDateTime> actualenddate,
                                           Optional<BigDecimal> actualresourcehrs,
                                           BigDecimal plannedcost,
                                           Optional<BigDecimal> actualcost,
                                           TypoLocalDateTime modifieddate
                                         ) {
           return new WorkorderroutingRow(compositeId.workorderid(), compositeId.productid(), compositeId.operationsequence(), locationid, scheduledstartdate, scheduledenddate, actualstartdate, actualenddate, actualresourcehrs, plannedcost, actualcost, modifieddate);
         };
  public WorkorderroutingId compositeId() {
    return new WorkorderroutingId(workorderid, productid, operationsequence);
  };
  public WorkorderroutingId id() {
    return compositeId();
  };
  public WorkorderroutingRowUnsaved toUnsavedRow(Defaulted<TypoLocalDateTime> modifieddate) {
    return new WorkorderroutingRowUnsaved(workorderid, productid, operationsequence, locationid, scheduledstartdate, scheduledenddate, actualstartdate, actualenddate, actualresourcehrs, plannedcost, actualcost, modifieddate);
  };
}