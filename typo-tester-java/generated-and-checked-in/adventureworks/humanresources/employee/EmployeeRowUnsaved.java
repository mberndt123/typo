/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks.humanresources.employee;

import adventureworks.customtypes.Defaulted;
import adventureworks.customtypes.TypoLocalDate;
import adventureworks.customtypes.TypoLocalDateTime;
import adventureworks.customtypes.TypoShort;
import adventureworks.customtypes.TypoUUID;
import adventureworks.person.businessentity.BusinessentityId;
import adventureworks.public_.Flag;
import java.util.Optional;

/** This class corresponds to a row in table `humanresources.employee` which has not been persisted yet */
public record EmployeeRowUnsaved(
  /** Primary key for Employee records.  Foreign key to BusinessEntity.BusinessEntityID.
    * Points to {@link adventureworks.person.person.PersonRow.businessentityid}
    */
  BusinessentityId businessentityid,
  /** Unique national identification number such as a social security number. */
  /* max 15 chars */ String nationalidnumber,
  /** Network login. */
  /* max 256 chars */ String loginid,
  /** Work title such as Buyer or Sales Representative. */
  /* max 50 chars */ String jobtitle,
  /** Date of birth.
    * Constraint CK_Employee_BirthDate affecting columns birthdate:  (((birthdate >= '1930-01-01'::date) AND (birthdate <= (now() - '18 years'::interval))))
    */
  TypoLocalDate birthdate,
  /** M = Married, S = Single
    * Constraint CK_Employee_MaritalStatus affecting columns maritalstatus:  ((upper((maritalstatus)::text) = ANY (ARRAY['M'::text, 'S'::text])))
    */
  /* bpchar, max 1 chars */ String maritalstatus,
  /** M = Male, F = Female
    * Constraint CK_Employee_Gender affecting columns gender:  ((upper((gender)::text) = ANY (ARRAY['M'::text, 'F'::text])))
    */
  /* bpchar, max 1 chars */ String gender,
  /** Employee hired on this date.
    * Constraint CK_Employee_HireDate affecting columns hiredate:  (((hiredate >= '1996-07-01'::date) AND (hiredate <= (now() + '1 day'::interval))))
    */
  TypoLocalDate hiredate,
  /** Default: true
    * Job classification. 0 = Hourly, not exempt from collective bargaining. 1 = Salaried, exempt from collective bargaining.
    */
  Defaulted<Flag> salariedflag,
  /** Default: 0
    * Number of available vacation hours.
    * Constraint CK_Employee_VacationHours affecting columns vacationhours:  (((vacationhours >= '-40'::integer) AND (vacationhours <= 240)))
    */
  Defaulted<TypoShort> vacationhours,
  /** Default: 0
    * Number of available sick leave hours.
    * Constraint CK_Employee_SickLeaveHours affecting columns sickleavehours:  (((sickleavehours >= 0) AND (sickleavehours <= 120)))
    */
  Defaulted<TypoShort> sickleavehours,
  /** Default: true
    * 0 = Inactive, 1 = Active
    */
  Defaulted<Flag> currentflag,
  /** Default: uuid_generate_v1() */
  Defaulted<TypoUUID> rowguid,
  /** Default: now() */
  Defaulted<TypoLocalDateTime> modifieddate,
  /** Default: '/'::character varying
    * Where the employee is located in corporate hierarchy.
    */
  Defaulted<Optional<String>> organizationnode
) {
  public EmployeeRow toRow(
                            java.util.function.Supplier<Flag> salariedflagDefault,
                            java.util.function.Supplier<TypoShort> vacationhoursDefault,
                            java.util.function.Supplier<TypoShort> sickleavehoursDefault,
                            java.util.function.Supplier<Flag> currentflagDefault,
                            java.util.function.Supplier<TypoUUID> rowguidDefault,
                            java.util.function.Supplier<TypoLocalDateTime> modifieddateDefault,
                            java.util.function.Supplier<Optional<String>> organizationnodeDefault
                          ) {
    return new EmployeeRow(businessentityid, nationalidnumber, loginid, jobtitle, birthdate, maritalstatus, gender, hiredate, salariedflag.getOrElse(salariedflagDefault), vacationhours.getOrElse(vacationhoursDefault), sickleavehours.getOrElse(sickleavehoursDefault), currentflag.getOrElse(currentflagDefault), rowguid.getOrElse(rowguidDefault), modifieddate.getOrElse(modifieddateDefault), organizationnode.getOrElse(organizationnodeDefault));
  };
}