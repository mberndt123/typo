/**
 * File has been automatically generated by `typo` for internal use.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * (If you're developing `typo` and want to change it: run `bleep generate-sources`)
 */
package typo
package generated
package public

import anorm.Column
import anorm.ParameterMetaData
import anorm.ToStatement
import java.sql.Types
import play.api.libs.json.Reads
import play.api.libs.json.Writes

/** Domain `public.Flag`
  * No constraint
  */
case class Flag(value: Boolean)
object Flag {
  implicit lazy val arrayColumn: Column[Array[Flag]] = Column.columnToArray(column, implicitly)
  implicit lazy val arrayToStatement: ToStatement[Array[Flag]] = typo.generated.BooleanArrayToStatement.contramap(_.map(_.value))
  implicit lazy val column: Column[Flag] = Column.columnToBoolean.map(Flag.apply)
  implicit lazy val ordering: Ordering[Flag] = Ordering.by(_.value)
  implicit lazy val parameterMetadata: ParameterMetaData[Flag] = new ParameterMetaData[Flag] {
    override def sqlType: String = """"public"."Flag""""
    override def jdbcType: Int = Types.OTHER
  }
  implicit lazy val reads: Reads[Flag] = Reads.BooleanReads.map(Flag.apply)
  implicit lazy val text: Text[Flag] = new Text[Flag] {
    override def unsafeEncode(v: Flag, sb: StringBuilder) = Text.booleanInstance.unsafeEncode(v.value, sb)
    override def unsafeArrayEncode(v: Flag, sb: StringBuilder) = Text.booleanInstance.unsafeArrayEncode(v.value, sb)
  }
  implicit lazy val toStatement: ToStatement[Flag] = ToStatement.booleanToStatement.contramap(_.value)
  implicit lazy val writes: Writes[Flag] = Writes.BooleanWrites.contramap(_.value)
}