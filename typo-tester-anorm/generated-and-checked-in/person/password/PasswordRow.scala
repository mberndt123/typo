/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package person
package password

import adventureworks.person.businessentity.BusinessentityId
import anorm.RowParser
import anorm.Success
import java.time.LocalDateTime
import java.util.UUID
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PasswordRow(
  /** Points to [[person.PersonRow.businessentityid]] */
  businessentityid: BusinessentityId,
  /** Password for the e-mail account. */
  passwordhash: /* max 128 chars */ String,
  /** Random value concatenated with the password string before the password is hashed. */
  passwordsalt: /* max 10 chars */ String,
  rowguid: UUID,
  modifieddate: LocalDateTime
)

object PasswordRow {
  def rowParser(idx: Int): RowParser[PasswordRow] =
    RowParser[PasswordRow] { row =>
      Success(
        PasswordRow(
          businessentityid = row[BusinessentityId](idx + 0),
          passwordhash = row[/* max 128 chars */ String](idx + 1),
          passwordsalt = row[/* max 10 chars */ String](idx + 2),
          rowguid = row[UUID](idx + 3),
          modifieddate = row[LocalDateTime](idx + 4)
        )
      )
    }
  implicit val oFormat: OFormat[PasswordRow] = new OFormat[PasswordRow]{
    override def writes(o: PasswordRow): JsObject =
      Json.obj(
        "businessentityid" -> o.businessentityid,
        "passwordhash" -> o.passwordhash,
        "passwordsalt" -> o.passwordsalt,
        "rowguid" -> o.rowguid,
        "modifieddate" -> o.modifieddate
      )
  
    override def reads(json: JsValue): JsResult[PasswordRow] = {
      JsResult.fromTry(
        Try(
          PasswordRow(
            businessentityid = json.\("businessentityid").as[BusinessentityId],
            passwordhash = json.\("passwordhash").as[/* max 128 chars */ String],
            passwordsalt = json.\("passwordsalt").as[/* max 10 chars */ String],
            rowguid = json.\("rowguid").as[UUID],
            modifieddate = json.\("modifieddate").as[LocalDateTime]
          )
        )
      )
    }
  }
}
