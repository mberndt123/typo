/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pr
package th

import adventureworks.production.product.ProductId
import adventureworks.production.transactionhistory.TransactionhistoryId
import anorm.RowParser
import anorm.Success
import java.time.LocalDateTime
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class ThViewRow(
  id: Option[Int],
  /** Points to [[production.transactionhistory.TransactionhistoryRow.transactionid]] */
  transactionid: Option[TransactionhistoryId],
  /** Points to [[production.transactionhistory.TransactionhistoryRow.productid]] */
  productid: Option[ProductId],
  /** Points to [[production.transactionhistory.TransactionhistoryRow.referenceorderid]] */
  referenceorderid: Option[Int],
  /** Points to [[production.transactionhistory.TransactionhistoryRow.referenceorderlineid]] */
  referenceorderlineid: Option[Int],
  /** Points to [[production.transactionhistory.TransactionhistoryRow.transactiondate]] */
  transactiondate: Option[LocalDateTime],
  /** Points to [[production.transactionhistory.TransactionhistoryRow.transactiontype]] */
  transactiontype: Option[/* bpchar */ String],
  /** Points to [[production.transactionhistory.TransactionhistoryRow.quantity]] */
  quantity: Option[Int],
  /** Points to [[production.transactionhistory.TransactionhistoryRow.actualcost]] */
  actualcost: Option[BigDecimal],
  /** Points to [[production.transactionhistory.TransactionhistoryRow.modifieddate]] */
  modifieddate: Option[LocalDateTime]
)

object ThViewRow {
  def rowParser(idx: Int): RowParser[ThViewRow] =
    RowParser[ThViewRow] { row =>
      Success(
        ThViewRow(
          id = row[Option[Int]](idx + 0),
          transactionid = row[Option[TransactionhistoryId]](idx + 1),
          productid = row[Option[ProductId]](idx + 2),
          referenceorderid = row[Option[Int]](idx + 3),
          referenceorderlineid = row[Option[Int]](idx + 4),
          transactiondate = row[Option[LocalDateTime]](idx + 5),
          transactiontype = row[Option[/* bpchar */ String]](idx + 6),
          quantity = row[Option[Int]](idx + 7),
          actualcost = row[Option[BigDecimal]](idx + 8),
          modifieddate = row[Option[LocalDateTime]](idx + 9)
        )
      )
    }
  implicit val oFormat: OFormat[ThViewRow] = new OFormat[ThViewRow]{
    override def writes(o: ThViewRow): JsObject =
      Json.obj(
        "id" -> o.id,
        "transactionid" -> o.transactionid,
        "productid" -> o.productid,
        "referenceorderid" -> o.referenceorderid,
        "referenceorderlineid" -> o.referenceorderlineid,
        "transactiondate" -> o.transactiondate,
        "transactiontype" -> o.transactiontype,
        "quantity" -> o.quantity,
        "actualcost" -> o.actualcost,
        "modifieddate" -> o.modifieddate
      )
  
    override def reads(json: JsValue): JsResult[ThViewRow] = {
      JsResult.fromTry(
        Try(
          ThViewRow(
            id = json.\("id").toOption.map(_.as[Int]),
            transactionid = json.\("transactionid").toOption.map(_.as[TransactionhistoryId]),
            productid = json.\("productid").toOption.map(_.as[ProductId]),
            referenceorderid = json.\("referenceorderid").toOption.map(_.as[Int]),
            referenceorderlineid = json.\("referenceorderlineid").toOption.map(_.as[Int]),
            transactiondate = json.\("transactiondate").toOption.map(_.as[LocalDateTime]),
            transactiontype = json.\("transactiontype").toOption.map(_.as[/* bpchar */ String]),
            quantity = json.\("quantity").toOption.map(_.as[Int]),
            actualcost = json.\("actualcost").toOption.map(_.as[BigDecimal]),
            modifieddate = json.\("modifieddate").toOption.map(_.as[LocalDateTime])
          )
        )
      )
    }
  }
}
