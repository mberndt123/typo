/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pr
package bom

import adventureworks.production.billofmaterials.BillofmaterialsId
import adventureworks.production.product.ProductId
import adventureworks.production.unitmeasure.UnitmeasureId
import anorm.RowParser
import anorm.Success
import java.time.LocalDateTime
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class BomViewRow(
  id: Option[Int],
  /** Points to [[production.billofmaterials.BillofmaterialsRow.billofmaterialsid]] */
  billofmaterialsid: Option[BillofmaterialsId],
  /** Points to [[production.billofmaterials.BillofmaterialsRow.productassemblyid]] */
  productassemblyid: Option[ProductId],
  /** Points to [[production.billofmaterials.BillofmaterialsRow.componentid]] */
  componentid: Option[ProductId],
  /** Points to [[production.billofmaterials.BillofmaterialsRow.startdate]] */
  startdate: Option[LocalDateTime],
  /** Points to [[production.billofmaterials.BillofmaterialsRow.enddate]] */
  enddate: Option[LocalDateTime],
  /** Points to [[production.billofmaterials.BillofmaterialsRow.unitmeasurecode]] */
  unitmeasurecode: Option[UnitmeasureId],
  /** Points to [[production.billofmaterials.BillofmaterialsRow.bomlevel]] */
  bomlevel: Option[Int],
  /** Points to [[production.billofmaterials.BillofmaterialsRow.perassemblyqty]] */
  perassemblyqty: Option[BigDecimal],
  /** Points to [[production.billofmaterials.BillofmaterialsRow.modifieddate]] */
  modifieddate: Option[LocalDateTime]
)

object BomViewRow {
  def rowParser(idx: Int): RowParser[BomViewRow] =
    RowParser[BomViewRow] { row =>
      Success(
        BomViewRow(
          id = row[Option[Int]](idx + 0),
          billofmaterialsid = row[Option[BillofmaterialsId]](idx + 1),
          productassemblyid = row[Option[ProductId]](idx + 2),
          componentid = row[Option[ProductId]](idx + 3),
          startdate = row[Option[LocalDateTime]](idx + 4),
          enddate = row[Option[LocalDateTime]](idx + 5),
          unitmeasurecode = row[Option[UnitmeasureId]](idx + 6),
          bomlevel = row[Option[Int]](idx + 7),
          perassemblyqty = row[Option[BigDecimal]](idx + 8),
          modifieddate = row[Option[LocalDateTime]](idx + 9)
        )
      )
    }
  implicit val oFormat: OFormat[BomViewRow] = new OFormat[BomViewRow]{
    override def writes(o: BomViewRow): JsObject =
      Json.obj(
        "id" -> o.id,
        "billofmaterialsid" -> o.billofmaterialsid,
        "productassemblyid" -> o.productassemblyid,
        "componentid" -> o.componentid,
        "startdate" -> o.startdate,
        "enddate" -> o.enddate,
        "unitmeasurecode" -> o.unitmeasurecode,
        "bomlevel" -> o.bomlevel,
        "perassemblyqty" -> o.perassemblyqty,
        "modifieddate" -> o.modifieddate
      )
  
    override def reads(json: JsValue): JsResult[BomViewRow] = {
      JsResult.fromTry(
        Try(
          BomViewRow(
            id = json.\("id").toOption.map(_.as[Int]),
            billofmaterialsid = json.\("billofmaterialsid").toOption.map(_.as[BillofmaterialsId]),
            productassemblyid = json.\("productassemblyid").toOption.map(_.as[ProductId]),
            componentid = json.\("componentid").toOption.map(_.as[ProductId]),
            startdate = json.\("startdate").toOption.map(_.as[LocalDateTime]),
            enddate = json.\("enddate").toOption.map(_.as[LocalDateTime]),
            unitmeasurecode = json.\("unitmeasurecode").toOption.map(_.as[UnitmeasureId]),
            bomlevel = json.\("bomlevel").toOption.map(_.as[Int]),
            perassemblyqty = json.\("perassemblyqty").toOption.map(_.as[BigDecimal]),
            modifieddate = json.\("modifieddate").toOption.map(_.as[LocalDateTime])
          )
        )
      )
    }
  }
}
