/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pr
package p

import adventureworks.production.product.ProductId
import adventureworks.production.productmodel.ProductmodelId
import adventureworks.production.productsubcategory.ProductsubcategoryId
import adventureworks.production.unitmeasure.UnitmeasureId
import adventureworks.public.Flag
import adventureworks.public.Name
import anorm.RowParser
import anorm.Success
import java.time.LocalDateTime
import java.util.UUID
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class PViewRow(
  id: Option[Int],
  /** Points to [[production.product.ProductRow.productid]] */
  productid: Option[ProductId],
  /** Points to [[production.product.ProductRow.name]] */
  name: Option[Name],
  /** Points to [[production.product.ProductRow.productnumber]] */
  productnumber: Option[/* max 25 chars */ String],
  /** Points to [[production.product.ProductRow.makeflag]] */
  makeflag: Flag,
  /** Points to [[production.product.ProductRow.finishedgoodsflag]] */
  finishedgoodsflag: Flag,
  /** Points to [[production.product.ProductRow.color]] */
  color: Option[/* max 15 chars */ String],
  /** Points to [[production.product.ProductRow.safetystocklevel]] */
  safetystocklevel: Option[Int],
  /** Points to [[production.product.ProductRow.reorderpoint]] */
  reorderpoint: Option[Int],
  /** Points to [[production.product.ProductRow.standardcost]] */
  standardcost: Option[BigDecimal],
  /** Points to [[production.product.ProductRow.listprice]] */
  listprice: Option[BigDecimal],
  /** Points to [[production.product.ProductRow.size]] */
  size: Option[/* max 5 chars */ String],
  /** Points to [[production.product.ProductRow.sizeunitmeasurecode]] */
  sizeunitmeasurecode: Option[UnitmeasureId],
  /** Points to [[production.product.ProductRow.weightunitmeasurecode]] */
  weightunitmeasurecode: Option[UnitmeasureId],
  /** Points to [[production.product.ProductRow.weight]] */
  weight: Option[BigDecimal],
  /** Points to [[production.product.ProductRow.daystomanufacture]] */
  daystomanufacture: Option[Int],
  /** Points to [[production.product.ProductRow.productline]] */
  productline: Option[/* bpchar */ String],
  /** Points to [[production.product.ProductRow.class]] */
  `class`: Option[/* bpchar */ String],
  /** Points to [[production.product.ProductRow.style]] */
  style: Option[/* bpchar */ String],
  /** Points to [[production.product.ProductRow.productsubcategoryid]] */
  productsubcategoryid: Option[ProductsubcategoryId],
  /** Points to [[production.product.ProductRow.productmodelid]] */
  productmodelid: Option[ProductmodelId],
  /** Points to [[production.product.ProductRow.sellstartdate]] */
  sellstartdate: Option[LocalDateTime],
  /** Points to [[production.product.ProductRow.sellenddate]] */
  sellenddate: Option[LocalDateTime],
  /** Points to [[production.product.ProductRow.discontinueddate]] */
  discontinueddate: Option[LocalDateTime],
  /** Points to [[production.product.ProductRow.rowguid]] */
  rowguid: Option[UUID],
  /** Points to [[production.product.ProductRow.modifieddate]] */
  modifieddate: Option[LocalDateTime]
)

object PViewRow {
  def rowParser(idx: Int): RowParser[PViewRow] =
    RowParser[PViewRow] { row =>
      Success(
        PViewRow(
          id = row[Option[Int]](idx + 0),
          productid = row[Option[ProductId]](idx + 1),
          name = row[Option[Name]](idx + 2),
          productnumber = row[Option[/* max 25 chars */ String]](idx + 3),
          makeflag = row[Flag](idx + 4),
          finishedgoodsflag = row[Flag](idx + 5),
          color = row[Option[/* max 15 chars */ String]](idx + 6),
          safetystocklevel = row[Option[Int]](idx + 7),
          reorderpoint = row[Option[Int]](idx + 8),
          standardcost = row[Option[BigDecimal]](idx + 9),
          listprice = row[Option[BigDecimal]](idx + 10),
          size = row[Option[/* max 5 chars */ String]](idx + 11),
          sizeunitmeasurecode = row[Option[UnitmeasureId]](idx + 12),
          weightunitmeasurecode = row[Option[UnitmeasureId]](idx + 13),
          weight = row[Option[BigDecimal]](idx + 14),
          daystomanufacture = row[Option[Int]](idx + 15),
          productline = row[Option[/* bpchar */ String]](idx + 16),
          `class` = row[Option[/* bpchar */ String]](idx + 17),
          style = row[Option[/* bpchar */ String]](idx + 18),
          productsubcategoryid = row[Option[ProductsubcategoryId]](idx + 19),
          productmodelid = row[Option[ProductmodelId]](idx + 20),
          sellstartdate = row[Option[LocalDateTime]](idx + 21),
          sellenddate = row[Option[LocalDateTime]](idx + 22),
          discontinueddate = row[Option[LocalDateTime]](idx + 23),
          rowguid = row[Option[UUID]](idx + 24),
          modifieddate = row[Option[LocalDateTime]](idx + 25)
        )
      )
    }
  implicit val oFormat: OFormat[PViewRow] = new OFormat[PViewRow]{
    override def writes(o: PViewRow): JsObject =
      Json.obj(
        "id" -> o.id,
        "productid" -> o.productid,
        "name" -> o.name,
        "productnumber" -> o.productnumber,
        "makeflag" -> o.makeflag,
        "finishedgoodsflag" -> o.finishedgoodsflag,
        "color" -> o.color,
        "safetystocklevel" -> o.safetystocklevel,
        "reorderpoint" -> o.reorderpoint,
        "standardcost" -> o.standardcost,
        "listprice" -> o.listprice,
        "size" -> o.size,
        "sizeunitmeasurecode" -> o.sizeunitmeasurecode,
        "weightunitmeasurecode" -> o.weightunitmeasurecode,
        "weight" -> o.weight,
        "daystomanufacture" -> o.daystomanufacture,
        "productline" -> o.productline,
        "class" -> o.`class`,
        "style" -> o.style,
        "productsubcategoryid" -> o.productsubcategoryid,
        "productmodelid" -> o.productmodelid,
        "sellstartdate" -> o.sellstartdate,
        "sellenddate" -> o.sellenddate,
        "discontinueddate" -> o.discontinueddate,
        "rowguid" -> o.rowguid,
        "modifieddate" -> o.modifieddate
      )
  
    override def reads(json: JsValue): JsResult[PViewRow] = {
      JsResult.fromTry(
        Try(
          PViewRow(
            id = json.\("id").toOption.map(_.as[Int]),
            productid = json.\("productid").toOption.map(_.as[ProductId]),
            name = json.\("name").toOption.map(_.as[Name]),
            productnumber = json.\("productnumber").toOption.map(_.as[/* max 25 chars */ String]),
            makeflag = json.\("makeflag").as[Flag],
            finishedgoodsflag = json.\("finishedgoodsflag").as[Flag],
            color = json.\("color").toOption.map(_.as[/* max 15 chars */ String]),
            safetystocklevel = json.\("safetystocklevel").toOption.map(_.as[Int]),
            reorderpoint = json.\("reorderpoint").toOption.map(_.as[Int]),
            standardcost = json.\("standardcost").toOption.map(_.as[BigDecimal]),
            listprice = json.\("listprice").toOption.map(_.as[BigDecimal]),
            size = json.\("size").toOption.map(_.as[/* max 5 chars */ String]),
            sizeunitmeasurecode = json.\("sizeunitmeasurecode").toOption.map(_.as[UnitmeasureId]),
            weightunitmeasurecode = json.\("weightunitmeasurecode").toOption.map(_.as[UnitmeasureId]),
            weight = json.\("weight").toOption.map(_.as[BigDecimal]),
            daystomanufacture = json.\("daystomanufacture").toOption.map(_.as[Int]),
            productline = json.\("productline").toOption.map(_.as[/* bpchar */ String]),
            `class` = json.\("class").toOption.map(_.as[/* bpchar */ String]),
            style = json.\("style").toOption.map(_.as[/* bpchar */ String]),
            productsubcategoryid = json.\("productsubcategoryid").toOption.map(_.as[ProductsubcategoryId]),
            productmodelid = json.\("productmodelid").toOption.map(_.as[ProductmodelId]),
            sellstartdate = json.\("sellstartdate").toOption.map(_.as[LocalDateTime]),
            sellenddate = json.\("sellenddate").toOption.map(_.as[LocalDateTime]),
            discontinueddate = json.\("discontinueddate").toOption.map(_.as[LocalDateTime]),
            rowguid = json.\("rowguid").toOption.map(_.as[UUID]),
            modifieddate = json.\("modifieddate").toOption.map(_.as[LocalDateTime])
          )
        )
      )
    }
  }
}
