/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package culture

import adventureworks.public.Name
import anorm.RowParser
import anorm.Success
import java.time.LocalDateTime
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class CultureRow(
  /** Primary key for Culture records. */
  cultureid: CultureId,
  /** Culture description. */
  name: Name,
  modifieddate: LocalDateTime
)

object CultureRow {
  def rowParser(idx: Int): RowParser[CultureRow] =
    RowParser[CultureRow] { row =>
      Success(
        CultureRow(
          cultureid = row[CultureId](idx + 0),
          name = row[Name](idx + 1),
          modifieddate = row[LocalDateTime](idx + 2)
        )
      )
    }
  implicit val oFormat: OFormat[CultureRow] = new OFormat[CultureRow]{
    override def writes(o: CultureRow): JsObject =
      Json.obj(
        "cultureid" -> o.cultureid,
        "name" -> o.name,
        "modifieddate" -> o.modifieddate
      )
  
    override def reads(json: JsValue): JsResult[CultureRow] = {
      JsResult.fromTry(
        Try(
          CultureRow(
            cultureid = json.\("cultureid").as[CultureId],
            name = json.\("name").as[Name],
            modifieddate = json.\("modifieddate").as[LocalDateTime]
          )
        )
      )
    }
  }
}
