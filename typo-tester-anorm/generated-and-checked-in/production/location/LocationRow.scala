/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package location

import adventureworks.public.Name
import anorm.RowParser
import anorm.Success
import java.time.LocalDateTime
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class LocationRow(
  /** Primary key for Location records. */
  locationid: LocationId,
  /** Location description. */
  name: Name,
  /** Standard hourly cost of the manufacturing location. */
  costrate: BigDecimal,
  /** Work capacity (in hours) of the manufacturing location. */
  availability: BigDecimal,
  modifieddate: LocalDateTime
)

object LocationRow {
  def rowParser(idx: Int): RowParser[LocationRow] =
    RowParser[LocationRow] { row =>
      Success(
        LocationRow(
          locationid = row[LocationId](idx + 0),
          name = row[Name](idx + 1),
          costrate = row[BigDecimal](idx + 2),
          availability = row[BigDecimal](idx + 3),
          modifieddate = row[LocalDateTime](idx + 4)
        )
      )
    }
  implicit val oFormat: OFormat[LocationRow] = new OFormat[LocationRow]{
    override def writes(o: LocationRow): JsObject =
      Json.obj(
        "locationid" -> o.locationid,
        "name" -> o.name,
        "costrate" -> o.costrate,
        "availability" -> o.availability,
        "modifieddate" -> o.modifieddate
      )
  
    override def reads(json: JsValue): JsResult[LocationRow] = {
      JsResult.fromTry(
        Try(
          LocationRow(
            locationid = json.\("locationid").as[LocationId],
            name = json.\("name").as[Name],
            costrate = json.\("costrate").as[BigDecimal],
            availability = json.\("availability").as[BigDecimal],
            modifieddate = json.\("modifieddate").as[LocalDateTime]
          )
        )
      )
    }
  }
}
