/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package production
package unitmeasure

import adventureworks.public.Name
import anorm.RowParser
import anorm.Success
import java.time.LocalDateTime
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class UnitmeasureRow(
  /** Primary key. */
  unitmeasurecode: UnitmeasureId,
  /** Unit of measure description. */
  name: Name,
  modifieddate: LocalDateTime
)

object UnitmeasureRow {
  def rowParser(idx: Int): RowParser[UnitmeasureRow] =
    RowParser[UnitmeasureRow] { row =>
      Success(
        UnitmeasureRow(
          unitmeasurecode = row[UnitmeasureId](idx + 0),
          name = row[Name](idx + 1),
          modifieddate = row[LocalDateTime](idx + 2)
        )
      )
    }
  implicit val oFormat: OFormat[UnitmeasureRow] = new OFormat[UnitmeasureRow]{
    override def writes(o: UnitmeasureRow): JsObject =
      Json.obj(
        "unitmeasurecode" -> o.unitmeasurecode,
        "name" -> o.name,
        "modifieddate" -> o.modifieddate
      )
  
    override def reads(json: JsValue): JsResult[UnitmeasureRow] = {
      JsResult.fromTry(
        Try(
          UnitmeasureRow(
            unitmeasurecode = json.\("unitmeasurecode").as[UnitmeasureId],
            name = json.\("name").as[Name],
            modifieddate = json.\("modifieddate").as[LocalDateTime]
          )
        )
      )
    }
  }
}
