/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks.production.transactionhistory;

import java.sql.Connection;
import scala.annotation.nowarn;
import typo.dsl.DeleteBuilder;
import typo.dsl.DeleteBuilder.DeleteBuilderMock;
import typo.dsl.DeleteParams;
import typo.dsl.SelectBuilder;
import typo.dsl.SelectBuilderMock;
import typo.dsl.SelectParams;
import typo.dsl.UpdateBuilder;
import typo.dsl.UpdateBuilder.UpdateBuilderMock;
import typo.dsl.UpdateParams;

class TransactionhistoryRepoMock(val toRow: Function1[TransactionhistoryRowUnsaved, TransactionhistoryRow], val map: scala.collection.mutable.Map[TransactionhistoryId, TransactionhistoryRow] = scala.collection.mutable.Map.empty) extends TransactionhistoryRepo {
  def delete: DeleteBuilder[TransactionhistoryFields, TransactionhistoryRow] = DeleteBuilderMock(DeleteParams.empty, TransactionhistoryFields.structure, map)
  def deleteById(transactionid: TransactionhistoryId)(implicit c: Connection): Boolean = map.remove(transactionid).isDefined
  def deleteByIds(transactionids: Array[TransactionhistoryId])(implicit c: Connection): Int = transactionids.map(id => map.remove(id)).count(_.isDefined)
  def insert(unsaved: TransactionhistoryRow)(implicit c: Connection): TransactionhistoryRow = {
    val _ = if (map.contains(unsaved.transactionid))
      sys.error(s"id ${unsaved.transactionid} already exists")
    else
      map.put(unsaved.transactionid, unsaved)
    
    unsaved
  }
  def insert(unsaved: TransactionhistoryRowUnsaved)(implicit c: Connection): TransactionhistoryRow = insert(toRow(unsaved))
  def insertStreaming(unsaved: Iterator[TransactionhistoryRow], batchSize: Int = 10000)(implicit c: Connection): Long = {
    unsaved.foreach { row =>
      map += (row.transactionid -> row)
    }
    unsaved.size.toLong
  }
  /** NOTE: this functionality requires PostgreSQL 16 or later! */
  def insertUnsavedStreaming(unsaved: Iterator[TransactionhistoryRowUnsaved], batchSize: Int = 10000)(implicit c: Connection): Long = {
    unsaved.foreach { unsavedRow =>
      val row = toRow(unsavedRow)
      map += (row.transactionid -> row)
    }
    unsaved.size.toLong
  }
  def select: SelectBuilder[TransactionhistoryFields, TransactionhistoryRow] = SelectBuilderMock(TransactionhistoryFields.structure, () => map.values.toList, SelectParams.empty)
  def selectAll(implicit c: Connection): List[TransactionhistoryRow] = map.values.toList
  def selectById(transactionid: TransactionhistoryId)(implicit c: Connection): Option[TransactionhistoryRow] = map.get(transactionid)
  def selectByIds(transactionids: Array[TransactionhistoryId])(implicit c: Connection): List[TransactionhistoryRow] = transactionids.flatMap(map.get).toList
  def selectByIdsTracked(transactionids: Array[TransactionhistoryId])(implicit c: Connection): Map[TransactionhistoryId, TransactionhistoryRow] = {
    val byId = selectByIds(transactionids).view.map(x => (x.transactionid, x)).toMap
    transactionids.view.flatMap(id => byId.get(id).map(x => (id, x))).toMap
  }
  def update: UpdateBuilder[TransactionhistoryFields, TransactionhistoryRow] = UpdateBuilderMock(UpdateParams.empty, TransactionhistoryFields.structure, map)
  def update(row: TransactionhistoryRow)(implicit c: Connection): Boolean = {
    map.get(row.transactionid) match {
      case Some(`row`) => false
      case Some(_) =>
        map.put(row.transactionid, row): @nowarn
        true
      case None => false
    }
  }
  def upsert(unsaved: TransactionhistoryRow)(implicit c: Connection): TransactionhistoryRow = {
    map.put(unsaved.transactionid, unsaved): @nowarn
    unsaved
  }
  def upsertBatch(unsaved: Iterable[TransactionhistoryRow])(implicit c: Connection): List[TransactionhistoryRow] = {
    unsaved.map { row =>
      map += (row.transactionid -> row)
      row
    }.toList
  }
  /** NOTE: this functionality is not safe if you use auto-commit mode! it runs 3 SQL statements */
  def upsertStreaming(unsaved: Iterator[TransactionhistoryRow], batchSize: Int = 10000)(implicit c: Connection): Int = {
    unsaved.foreach { row =>
      map += (row.transactionid -> row)
    }
    unsaved.size
  }
}