/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks.production.productmodelillustration

import adventureworks.customtypes.TypoLocalDateTime
import adventureworks.production.illustration.IllustrationFields
import adventureworks.production.illustration.IllustrationId
import adventureworks.production.illustration.IllustrationRow
import adventureworks.production.productmodel.ProductmodelFields
import adventureworks.production.productmodel.ProductmodelId
import adventureworks.production.productmodel.ProductmodelRow
import anorm.ToParameterValue
import typo.dsl.ForeignKey
import typo.dsl.Path
import typo.dsl.SqlExpr
import typo.dsl.SqlExpr.CompositeIn
import typo.dsl.SqlExpr.CompositeIn.TuplePart
import typo.dsl.SqlExpr.Const.As.as
import typo.dsl.SqlExpr.Field
import typo.dsl.SqlExpr.FieldLike
import typo.dsl.SqlExpr.IdField
import typo.dsl.Structure.Relation

trait ProductmodelillustrationFields {
  def productmodelid: IdField[ProductmodelId, ProductmodelillustrationRow]
  def illustrationid: IdField[IllustrationId, ProductmodelillustrationRow]
  def modifieddate: Field[TypoLocalDateTime, ProductmodelillustrationRow]
  def fkIllustration: ForeignKey[IllustrationFields, IllustrationRow] =
    ForeignKey[IllustrationFields, IllustrationRow]("production.FK_ProductModelIllustration_Illustration_IllustrationID", Nil)
      .withColumnPair(illustrationid, _.illustrationid)
  def fkProductmodel: ForeignKey[ProductmodelFields, ProductmodelRow] =
    ForeignKey[ProductmodelFields, ProductmodelRow]("production.FK_ProductModelIllustration_ProductModel_ProductModelID", Nil)
      .withColumnPair(productmodelid, _.productmodelid)
  def compositeIdIs(compositeId: ProductmodelillustrationId): SqlExpr[Boolean] =
    productmodelid.isEqual(compositeId.productmodelid).and(illustrationid.isEqual(compositeId.illustrationid))
  def compositeIdIn(compositeIds: Array[ProductmodelillustrationId]): SqlExpr[Boolean] =
    new CompositeIn(compositeIds)(TuplePart[ProductmodelillustrationId](productmodelid)(_.productmodelid)(using as[Array[ProductmodelId]](ToParameterValue(null, ProductmodelId.arrayToStatement), adventureworks.arrayParameterMetaData(ProductmodelId.parameterMetadata)), implicitly), TuplePart[ProductmodelillustrationId](illustrationid)(_.illustrationid)(using as[Array[IllustrationId]](ToParameterValue(null, IllustrationId.arrayToStatement), adventureworks.arrayParameterMetaData(IllustrationId.parameterMetadata)), implicitly))
  
}

object ProductmodelillustrationFields {
  lazy val structure: Relation[ProductmodelillustrationFields, ProductmodelillustrationRow] =
    new Impl(Nil)

  private final class Impl(val _path: List[Path])
    extends Relation[ProductmodelillustrationFields, ProductmodelillustrationRow] {
  
    override lazy val fields: ProductmodelillustrationFields = new ProductmodelillustrationFields {
      override def productmodelid = IdField[ProductmodelId, ProductmodelillustrationRow](_path, "productmodelid", None, Some("int4"), x => x.productmodelid, (row, value) => row.copy(productmodelid = value))
      override def illustrationid = IdField[IllustrationId, ProductmodelillustrationRow](_path, "illustrationid", None, Some("int4"), x => x.illustrationid, (row, value) => row.copy(illustrationid = value))
      override def modifieddate = Field[TypoLocalDateTime, ProductmodelillustrationRow](_path, "modifieddate", Some("text"), Some("timestamp"), x => x.modifieddate, (row, value) => row.copy(modifieddate = value))
    }
  
    override lazy val columns: List[FieldLike[?, ProductmodelillustrationRow]] =
      List[FieldLike[?, ProductmodelillustrationRow]](fields.productmodelid, fields.illustrationid, fields.modifieddate)
  
    override def copy(path: List[Path]): Impl =
      new Impl(path)
  }
  
}
