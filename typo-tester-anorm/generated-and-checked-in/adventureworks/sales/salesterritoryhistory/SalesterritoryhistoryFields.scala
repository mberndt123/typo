/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks.sales.salesterritoryhistory;

import adventureworks.customtypes.TypoLocalDateTime;
import adventureworks.customtypes.TypoUUID;
import adventureworks.person.businessentity.BusinessentityId;
import adventureworks.sales.salesperson.SalespersonFields;
import adventureworks.sales.salesperson.SalespersonRow;
import adventureworks.sales.salesterritory.SalesterritoryFields;
import adventureworks.sales.salesterritory.SalesterritoryId;
import adventureworks.sales.salesterritory.SalesterritoryRow;
import anorm.ToParameterValue;
import typo.dsl.ForeignKey;
import typo.dsl.Path;
import typo.dsl.SqlExpr;
import typo.dsl.SqlExpr.CompositeIn;
import typo.dsl.SqlExpr.CompositeIn.TuplePart;
import typo.dsl.SqlExpr.Const.As.as;
import typo.dsl.SqlExpr.Field;
import typo.dsl.SqlExpr.FieldLike;
import typo.dsl.SqlExpr.IdField;
import typo.dsl.SqlExpr.OptField;
import typo.dsl.Structure.Relation;

trait SalesterritoryhistoryFields {
  def businessentityid: IdField[BusinessentityId, SalesterritoryhistoryRow]
  def territoryid: IdField[SalesterritoryId, SalesterritoryhistoryRow]
  def startdate: IdField[TypoLocalDateTime, SalesterritoryhistoryRow]
  def enddate: OptField[TypoLocalDateTime, SalesterritoryhistoryRow]
  def rowguid: Field[TypoUUID, SalesterritoryhistoryRow]
  def modifieddate: Field[TypoLocalDateTime, SalesterritoryhistoryRow]
  def fkSalesperson: ForeignKey[SalespersonFields, SalespersonRow] =
    ForeignKey[SalespersonFields, SalespersonRow]("sales.FK_SalesTerritoryHistory_SalesPerson_BusinessEntityID", Nil)
      .withColumnPair(businessentityid, _.businessentityid)
  def fkSalesterritory: ForeignKey[SalesterritoryFields, SalesterritoryRow] =
    ForeignKey[SalesterritoryFields, SalesterritoryRow]("sales.FK_SalesTerritoryHistory_SalesTerritory_TerritoryID", Nil)
      .withColumnPair(territoryid, _.territoryid)
  def compositeIdIs(compositeId: SalesterritoryhistoryId): SqlExpr[Boolean] =
    businessentityid.isEqual(compositeId.businessentityid).and(startdate.isEqual(compositeId.startdate)).and(territoryid.isEqual(compositeId.territoryid))
  def compositeIdIn(compositeIds: Array[SalesterritoryhistoryId]): SqlExpr[Boolean] =
    new CompositeIn(compositeIds)(TuplePart[SalesterritoryhistoryId](businessentityid)(_.businessentityid)(using as[Array[BusinessentityId]](ToParameterValue(null, BusinessentityId.arrayToStatement), adventureworks.arrayParameterMetaData(BusinessentityId.parameterMetadata)), implicitly), TuplePart[SalesterritoryhistoryId](startdate)(_.startdate)(using as[Array[TypoLocalDateTime]](ToParameterValue(null, TypoLocalDateTime.arrayToStatement), adventureworks.arrayParameterMetaData(TypoLocalDateTime.parameterMetadata)), implicitly), TuplePart[SalesterritoryhistoryId](territoryid)(_.territoryid)(using as[Array[SalesterritoryId]](ToParameterValue(null, SalesterritoryId.arrayToStatement), adventureworks.arrayParameterMetaData(SalesterritoryId.parameterMetadata)), implicitly))
  
}

object SalesterritoryhistoryFields {
  lazy val structure: Relation[SalesterritoryhistoryFields, SalesterritoryhistoryRow] =
    new Impl(Nil)

  private final class Impl(val _path: List[Path])
    extends Relation[SalesterritoryhistoryFields, SalesterritoryhistoryRow] {
  
    override lazy val fields: SalesterritoryhistoryFields = new SalesterritoryhistoryFields {
      override def businessentityid = IdField[BusinessentityId, SalesterritoryhistoryRow](_path, "businessentityid", None, Some("int4"), x => x.businessentityid, (row, value) => row.copy(businessentityid = value))
      override def territoryid = IdField[SalesterritoryId, SalesterritoryhistoryRow](_path, "territoryid", None, Some("int4"), x => x.territoryid, (row, value) => row.copy(territoryid = value))
      override def startdate = IdField[TypoLocalDateTime, SalesterritoryhistoryRow](_path, "startdate", Some("text"), Some("timestamp"), x => x.startdate, (row, value) => row.copy(startdate = value))
      override def enddate = OptField[TypoLocalDateTime, SalesterritoryhistoryRow](_path, "enddate", Some("text"), Some("timestamp"), x => x.enddate, (row, value) => row.copy(enddate = value))
      override def rowguid = Field[TypoUUID, SalesterritoryhistoryRow](_path, "rowguid", None, Some("uuid"), x => x.rowguid, (row, value) => row.copy(rowguid = value))
      override def modifieddate = Field[TypoLocalDateTime, SalesterritoryhistoryRow](_path, "modifieddate", Some("text"), Some("timestamp"), x => x.modifieddate, (row, value) => row.copy(modifieddate = value))
    }
  
    override lazy val columns: List[FieldLike[?, SalesterritoryhistoryRow]] =
      List[FieldLike[?, SalesterritoryhistoryRow]](fields.businessentityid, fields.territoryid, fields.startdate, fields.enddate, fields.rowguid, fields.modifieddate)
  
    override def copy(path: List[Path]): Impl =
      new Impl(path)
  }
  
}
