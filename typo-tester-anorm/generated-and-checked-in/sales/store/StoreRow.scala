/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sales
package store

import adventureworks.TypoXml
import adventureworks.person.businessentity.BusinessentityId
import adventureworks.public.Name
import anorm.RowParser
import anorm.Success
import java.time.LocalDateTime
import java.util.UUID
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class StoreRow(
  /** Primary key. Foreign key to Customer.BusinessEntityID.
      Points to [[person.businessentity.BusinessentityRow.businessentityid]] */
  businessentityid: BusinessentityId,
  /** Name of the store. */
  name: Name,
  /** ID of the sales person assigned to the customer. Foreign key to SalesPerson.BusinessEntityID.
      Points to [[salesperson.SalespersonRow.businessentityid]] */
  salespersonid: Option[BusinessentityId],
  /** Demographic informationg about the store such as the number of employees, annual sales and store type. */
  demographics: Option[TypoXml],
  rowguid: UUID,
  modifieddate: LocalDateTime
)

object StoreRow {
  def rowParser(idx: Int): RowParser[StoreRow] =
    RowParser[StoreRow] { row =>
      Success(
        StoreRow(
          businessentityid = row[BusinessentityId](idx + 0),
          name = row[Name](idx + 1),
          salespersonid = row[Option[BusinessentityId]](idx + 2),
          demographics = row[Option[TypoXml]](idx + 3),
          rowguid = row[UUID](idx + 4),
          modifieddate = row[LocalDateTime](idx + 5)
        )
      )
    }
  implicit val oFormat: OFormat[StoreRow] = new OFormat[StoreRow]{
    override def writes(o: StoreRow): JsObject =
      Json.obj(
        "businessentityid" -> o.businessentityid,
        "name" -> o.name,
        "salespersonid" -> o.salespersonid,
        "demographics" -> o.demographics,
        "rowguid" -> o.rowguid,
        "modifieddate" -> o.modifieddate
      )
  
    override def reads(json: JsValue): JsResult[StoreRow] = {
      JsResult.fromTry(
        Try(
          StoreRow(
            businessentityid = json.\("businessentityid").as[BusinessentityId],
            name = json.\("name").as[Name],
            salespersonid = json.\("salespersonid").toOption.map(_.as[BusinessentityId]),
            demographics = json.\("demographics").toOption.map(_.as[TypoXml]),
            rowguid = json.\("rowguid").as[UUID],
            modifieddate = json.\("modifieddate").as[LocalDateTime]
          )
        )
      )
    }
  }
}
