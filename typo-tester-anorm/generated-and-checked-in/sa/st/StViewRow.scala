/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package sa
package st

import adventureworks.person.countryregion.CountryregionId
import adventureworks.public.Name
import adventureworks.sales.salesterritory.SalesterritoryId
import anorm.RowParser
import anorm.Success
import java.time.LocalDateTime
import java.util.UUID
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class StViewRow(
  id: Option[Int],
  /** Points to [[sales.salesterritory.SalesterritoryRow.territoryid]] */
  territoryid: Option[SalesterritoryId],
  /** Points to [[sales.salesterritory.SalesterritoryRow.name]] */
  name: Option[Name],
  /** Points to [[sales.salesterritory.SalesterritoryRow.countryregioncode]] */
  countryregioncode: Option[CountryregionId],
  /** Points to [[sales.salesterritory.SalesterritoryRow.group]] */
  group: Option[/* max 50 chars */ String],
  /** Points to [[sales.salesterritory.SalesterritoryRow.salesytd]] */
  salesytd: Option[BigDecimal],
  /** Points to [[sales.salesterritory.SalesterritoryRow.saleslastyear]] */
  saleslastyear: Option[BigDecimal],
  /** Points to [[sales.salesterritory.SalesterritoryRow.costytd]] */
  costytd: Option[BigDecimal],
  /** Points to [[sales.salesterritory.SalesterritoryRow.costlastyear]] */
  costlastyear: Option[BigDecimal],
  /** Points to [[sales.salesterritory.SalesterritoryRow.rowguid]] */
  rowguid: Option[UUID],
  /** Points to [[sales.salesterritory.SalesterritoryRow.modifieddate]] */
  modifieddate: Option[LocalDateTime]
)

object StViewRow {
  def rowParser(idx: Int): RowParser[StViewRow] =
    RowParser[StViewRow] { row =>
      Success(
        StViewRow(
          id = row[Option[Int]](idx + 0),
          territoryid = row[Option[SalesterritoryId]](idx + 1),
          name = row[Option[Name]](idx + 2),
          countryregioncode = row[Option[CountryregionId]](idx + 3),
          group = row[Option[/* max 50 chars */ String]](idx + 4),
          salesytd = row[Option[BigDecimal]](idx + 5),
          saleslastyear = row[Option[BigDecimal]](idx + 6),
          costytd = row[Option[BigDecimal]](idx + 7),
          costlastyear = row[Option[BigDecimal]](idx + 8),
          rowguid = row[Option[UUID]](idx + 9),
          modifieddate = row[Option[LocalDateTime]](idx + 10)
        )
      )
    }
  implicit val oFormat: OFormat[StViewRow] = new OFormat[StViewRow]{
    override def writes(o: StViewRow): JsObject =
      Json.obj(
        "id" -> o.id,
        "territoryid" -> o.territoryid,
        "name" -> o.name,
        "countryregioncode" -> o.countryregioncode,
        "group" -> o.group,
        "salesytd" -> o.salesytd,
        "saleslastyear" -> o.saleslastyear,
        "costytd" -> o.costytd,
        "costlastyear" -> o.costlastyear,
        "rowguid" -> o.rowguid,
        "modifieddate" -> o.modifieddate
      )
  
    override def reads(json: JsValue): JsResult[StViewRow] = {
      JsResult.fromTry(
        Try(
          StViewRow(
            id = json.\("id").toOption.map(_.as[Int]),
            territoryid = json.\("territoryid").toOption.map(_.as[SalesterritoryId]),
            name = json.\("name").toOption.map(_.as[Name]),
            countryregioncode = json.\("countryregioncode").toOption.map(_.as[CountryregionId]),
            group = json.\("group").toOption.map(_.as[/* max 50 chars */ String]),
            salesytd = json.\("salesytd").toOption.map(_.as[BigDecimal]),
            saleslastyear = json.\("saleslastyear").toOption.map(_.as[BigDecimal]),
            costytd = json.\("costytd").toOption.map(_.as[BigDecimal]),
            costlastyear = json.\("costlastyear").toOption.map(_.as[BigDecimal]),
            rowguid = json.\("rowguid").toOption.map(_.as[UUID]),
            modifieddate = json.\("modifieddate").toOption.map(_.as[LocalDateTime])
          )
        )
      )
    }
  }
}
