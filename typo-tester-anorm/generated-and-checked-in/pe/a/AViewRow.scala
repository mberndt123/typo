/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pe
package a

import adventureworks.person.address.AddressId
import adventureworks.person.stateprovince.StateprovinceId
import anorm.RowParser
import anorm.Success
import java.time.LocalDateTime
import java.util.UUID
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class AViewRow(
  id: Option[Int],
  /** Points to [[person.address.AddressRow.addressid]] */
  addressid: Option[AddressId],
  /** Points to [[person.address.AddressRow.addressline1]] */
  addressline1: Option[/* max 60 chars */ String],
  /** Points to [[person.address.AddressRow.addressline2]] */
  addressline2: Option[/* max 60 chars */ String],
  /** Points to [[person.address.AddressRow.city]] */
  city: Option[/* max 30 chars */ String],
  /** Points to [[person.address.AddressRow.stateprovinceid]] */
  stateprovinceid: Option[StateprovinceId],
  /** Points to [[person.address.AddressRow.postalcode]] */
  postalcode: Option[/* max 15 chars */ String],
  /** Points to [[person.address.AddressRow.spatiallocation]] */
  spatiallocation: Option[Byte],
  /** Points to [[person.address.AddressRow.rowguid]] */
  rowguid: Option[UUID],
  /** Points to [[person.address.AddressRow.modifieddate]] */
  modifieddate: Option[LocalDateTime]
)

object AViewRow {
  def rowParser(idx: Int): RowParser[AViewRow] =
    RowParser[AViewRow] { row =>
      Success(
        AViewRow(
          id = row[Option[Int]](idx + 0),
          addressid = row[Option[AddressId]](idx + 1),
          addressline1 = row[Option[/* max 60 chars */ String]](idx + 2),
          addressline2 = row[Option[/* max 60 chars */ String]](idx + 3),
          city = row[Option[/* max 30 chars */ String]](idx + 4),
          stateprovinceid = row[Option[StateprovinceId]](idx + 5),
          postalcode = row[Option[/* max 15 chars */ String]](idx + 6),
          spatiallocation = row[Option[Byte]](idx + 7),
          rowguid = row[Option[UUID]](idx + 8),
          modifieddate = row[Option[LocalDateTime]](idx + 9)
        )
      )
    }
  implicit val oFormat: OFormat[AViewRow] = new OFormat[AViewRow]{
    override def writes(o: AViewRow): JsObject =
      Json.obj(
        "id" -> o.id,
        "addressid" -> o.addressid,
        "addressline1" -> o.addressline1,
        "addressline2" -> o.addressline2,
        "city" -> o.city,
        "stateprovinceid" -> o.stateprovinceid,
        "postalcode" -> o.postalcode,
        "spatiallocation" -> o.spatiallocation,
        "rowguid" -> o.rowguid,
        "modifieddate" -> o.modifieddate
      )
  
    override def reads(json: JsValue): JsResult[AViewRow] = {
      JsResult.fromTry(
        Try(
          AViewRow(
            id = json.\("id").toOption.map(_.as[Int]),
            addressid = json.\("addressid").toOption.map(_.as[AddressId]),
            addressline1 = json.\("addressline1").toOption.map(_.as[/* max 60 chars */ String]),
            addressline2 = json.\("addressline2").toOption.map(_.as[/* max 60 chars */ String]),
            city = json.\("city").toOption.map(_.as[/* max 30 chars */ String]),
            stateprovinceid = json.\("stateprovinceid").toOption.map(_.as[StateprovinceId]),
            postalcode = json.\("postalcode").toOption.map(_.as[/* max 15 chars */ String]),
            spatiallocation = json.\("spatiallocation").toOption.map(_.as[Byte]),
            rowguid = json.\("rowguid").toOption.map(_.as[UUID]),
            modifieddate = json.\("modifieddate").toOption.map(_.as[LocalDateTime])
          )
        )
      )
    }
  }
}
