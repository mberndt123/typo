/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pe
package sp

import adventureworks.person.countryregion.CountryregionId
import adventureworks.person.stateprovince.StateprovinceId
import adventureworks.public.Flag
import adventureworks.public.Name
import adventureworks.sales.salesterritory.SalesterritoryId
import anorm.RowParser
import anorm.Success
import java.time.LocalDateTime
import java.util.UUID
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class SpViewRow(
  id: Option[Int],
  /** Points to [[person.stateprovince.StateprovinceRow.stateprovinceid]] */
  stateprovinceid: Option[StateprovinceId],
  /** Points to [[person.stateprovince.StateprovinceRow.stateprovincecode]] */
  stateprovincecode: Option[/* bpchar */ String],
  /** Points to [[person.stateprovince.StateprovinceRow.countryregioncode]] */
  countryregioncode: Option[CountryregionId],
  /** Points to [[person.stateprovince.StateprovinceRow.isonlystateprovinceflag]] */
  isonlystateprovinceflag: Flag,
  /** Points to [[person.stateprovince.StateprovinceRow.name]] */
  name: Option[Name],
  /** Points to [[person.stateprovince.StateprovinceRow.territoryid]] */
  territoryid: Option[SalesterritoryId],
  /** Points to [[person.stateprovince.StateprovinceRow.rowguid]] */
  rowguid: Option[UUID],
  /** Points to [[person.stateprovince.StateprovinceRow.modifieddate]] */
  modifieddate: Option[LocalDateTime]
)

object SpViewRow {
  def rowParser(idx: Int): RowParser[SpViewRow] =
    RowParser[SpViewRow] { row =>
      Success(
        SpViewRow(
          id = row[Option[Int]](idx + 0),
          stateprovinceid = row[Option[StateprovinceId]](idx + 1),
          stateprovincecode = row[Option[/* bpchar */ String]](idx + 2),
          countryregioncode = row[Option[CountryregionId]](idx + 3),
          isonlystateprovinceflag = row[Flag](idx + 4),
          name = row[Option[Name]](idx + 5),
          territoryid = row[Option[SalesterritoryId]](idx + 6),
          rowguid = row[Option[UUID]](idx + 7),
          modifieddate = row[Option[LocalDateTime]](idx + 8)
        )
      )
    }
  implicit val oFormat: OFormat[SpViewRow] = new OFormat[SpViewRow]{
    override def writes(o: SpViewRow): JsObject =
      Json.obj(
        "id" -> o.id,
        "stateprovinceid" -> o.stateprovinceid,
        "stateprovincecode" -> o.stateprovincecode,
        "countryregioncode" -> o.countryregioncode,
        "isonlystateprovinceflag" -> o.isonlystateprovinceflag,
        "name" -> o.name,
        "territoryid" -> o.territoryid,
        "rowguid" -> o.rowguid,
        "modifieddate" -> o.modifieddate
      )
  
    override def reads(json: JsValue): JsResult[SpViewRow] = {
      JsResult.fromTry(
        Try(
          SpViewRow(
            id = json.\("id").toOption.map(_.as[Int]),
            stateprovinceid = json.\("stateprovinceid").toOption.map(_.as[StateprovinceId]),
            stateprovincecode = json.\("stateprovincecode").toOption.map(_.as[/* bpchar */ String]),
            countryregioncode = json.\("countryregioncode").toOption.map(_.as[CountryregionId]),
            isonlystateprovinceflag = json.\("isonlystateprovinceflag").as[Flag],
            name = json.\("name").toOption.map(_.as[Name]),
            territoryid = json.\("territoryid").toOption.map(_.as[SalesterritoryId]),
            rowguid = json.\("rowguid").toOption.map(_.as[UUID]),
            modifieddate = json.\("modifieddate").toOption.map(_.as[LocalDateTime])
          )
        )
      )
    }
  }
}
