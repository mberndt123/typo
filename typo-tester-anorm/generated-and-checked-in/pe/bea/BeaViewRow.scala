/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package pe
package bea

import adventureworks.person.address.AddressId
import adventureworks.person.addresstype.AddresstypeId
import adventureworks.person.businessentity.BusinessentityId
import anorm.RowParser
import anorm.Success
import java.time.LocalDateTime
import java.util.UUID
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class BeaViewRow(
  id: Option[Int],
  /** Points to [[person.businessentityaddress.BusinessentityaddressRow.businessentityid]] */
  businessentityid: Option[BusinessentityId],
  /** Points to [[person.businessentityaddress.BusinessentityaddressRow.addressid]] */
  addressid: Option[AddressId],
  /** Points to [[person.businessentityaddress.BusinessentityaddressRow.addresstypeid]] */
  addresstypeid: Option[AddresstypeId],
  /** Points to [[person.businessentityaddress.BusinessentityaddressRow.rowguid]] */
  rowguid: Option[UUID],
  /** Points to [[person.businessentityaddress.BusinessentityaddressRow.modifieddate]] */
  modifieddate: Option[LocalDateTime]
)

object BeaViewRow {
  def rowParser(idx: Int): RowParser[BeaViewRow] =
    RowParser[BeaViewRow] { row =>
      Success(
        BeaViewRow(
          id = row[Option[Int]](idx + 0),
          businessentityid = row[Option[BusinessentityId]](idx + 1),
          addressid = row[Option[AddressId]](idx + 2),
          addresstypeid = row[Option[AddresstypeId]](idx + 3),
          rowguid = row[Option[UUID]](idx + 4),
          modifieddate = row[Option[LocalDateTime]](idx + 5)
        )
      )
    }
  implicit val oFormat: OFormat[BeaViewRow] = new OFormat[BeaViewRow]{
    override def writes(o: BeaViewRow): JsObject =
      Json.obj(
        "id" -> o.id,
        "businessentityid" -> o.businessentityid,
        "addressid" -> o.addressid,
        "addresstypeid" -> o.addresstypeid,
        "rowguid" -> o.rowguid,
        "modifieddate" -> o.modifieddate
      )
  
    override def reads(json: JsValue): JsResult[BeaViewRow] = {
      JsResult.fromTry(
        Try(
          BeaViewRow(
            id = json.\("id").toOption.map(_.as[Int]),
            businessentityid = json.\("businessentityid").toOption.map(_.as[BusinessentityId]),
            addressid = json.\("addressid").toOption.map(_.as[AddressId]),
            addresstypeid = json.\("addresstypeid").toOption.map(_.as[AddresstypeId]),
            rowguid = json.\("rowguid").toOption.map(_.as[UUID]),
            modifieddate = json.\("modifieddate").toOption.map(_.as[LocalDateTime])
          )
        )
      )
    }
  }
}
