/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package humanresources
package department

import adventureworks.public.Name
import anorm.RowParser
import anorm.Success
import java.time.LocalDateTime
import play.api.libs.json.JsObject
import play.api.libs.json.JsResult
import play.api.libs.json.JsValue
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import scala.util.Try

case class DepartmentRow(
  /** Primary key for Department records. */
  departmentid: DepartmentId,
  /** Name of the department. */
  name: Name,
  /** Name of the group to which the department belongs. */
  groupname: Name,
  modifieddate: LocalDateTime
)

object DepartmentRow {
  def rowParser(idx: Int): RowParser[DepartmentRow] =
    RowParser[DepartmentRow] { row =>
      Success(
        DepartmentRow(
          departmentid = row[DepartmentId](idx + 0),
          name = row[Name](idx + 1),
          groupname = row[Name](idx + 2),
          modifieddate = row[LocalDateTime](idx + 3)
        )
      )
    }
  implicit val oFormat: OFormat[DepartmentRow] = new OFormat[DepartmentRow]{
    override def writes(o: DepartmentRow): JsObject =
      Json.obj(
        "departmentid" -> o.departmentid,
        "name" -> o.name,
        "groupname" -> o.groupname,
        "modifieddate" -> o.modifieddate
      )
  
    override def reads(json: JsValue): JsResult[DepartmentRow] = {
      JsResult.fromTry(
        Try(
          DepartmentRow(
            departmentid = json.\("departmentid").as[DepartmentId],
            name = json.\("name").as[Name],
            groupname = json.\("groupname").as[Name],
            modifieddate = json.\("modifieddate").as[LocalDateTime]
          )
        )
      )
    }
  }
}
